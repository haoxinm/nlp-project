A Maximum-Entropy-Inspired Parser *We present a new parser for parsing down to Penn tree-bank style parse trees that achieves 90.1% average precision/recall for sentences of 40 and less, and for of length 100 and less when trained and tested on the previously established [5,9,10,15,17] &quot;standard&quot; sections of the Wall Street Journal treebank.This represents a 13% decrease in error rate over the best single-parser results on this corpus [9].The major technical innovation is the use of a &quot;maximum-entropy-inspired&quot; model for conditioning and smoothing that let us successfully to test and combine many different conditioning events.We also present some partial results showing the effects of different conditioning information, including a surprising 2% improvement due to guessing the lexical head's pre-terminal before guessing the lexical head.We present a new parser for parsing down to Penn tree-bank style parse trees [16] that achieves 90.1% average precision/recall for sentences of length < 40, and 89.5% for sentences of length < 100, when trained and tested on the previously established [5,9,10,15,17] &quot;standard&quot; sections of the Wall Street Journal tree-bank.This represents a 13% decrease in error rate over the best single-parser results on this corpus [9].Following [5,10], our parser is based upon a probabilistic generative model.That is, for all sentences s and all parses 7r, the parser assigns a probability p(s , 7r) = p(r), the equality holding when we restrict consideration to 7r whose yield * This research was supported in part by NSF grant LIS SBR 9720368.The author would like to thank Mark Johnson and all the rest of the Brown Laboratory for Linguistic Information Processing. is s. Then for any s the parser returns the parse ir that maximizes this probability.That is, the parser implements the function arg maxrp(7r s) = arg maxirp(7r, s) = arg maxrp(w).What fundamentally distinguishes probabilistic generative parsers is how they compute p(r), and it is to that topic we turn next.The model assigns a probability to a parse by a top-down process of considering each constituent c in Ir and for each c first guessing the pre-terminal of c, t(c) (t for &quot;tag&quot;), then the lexical head of c, h(c), and then the expansion of c into further constituents e(c).Thus the probability of a parse is given by the equation where 1(c) is the label of c (e.g., whether it is a noun phrase (np), verb-phrase, etc.) and H (c) is the relevant history of c — information outside c that our probability model deems important in determining the probability in question.Much of the interesting work is determining what goes into H (c).Whenever it is clear to which constituent we are referring we omit the (c) in, e.g., h(c).In this notation the above equation takes the following form: Next we describe how we assign a probability to the expansion e of a constituent.In Section 5 we present some results in which the possible expansions of a constituent are fixed in advanced by extracting a tree-bank grammar [3] from the training corpus.The method that gives the best results, however, uses a Markov grammar — a method for assigning probabilities to any possible expansion using statistics gathered from the training corpus [6,10,15].The method we use follows that of [10].In this scheme a traditional probabilistic context-free grammar (PCFG) rule can be thought of as consisting of a left-hand side with a label 1(c) drawn from the non-terminal symbols of our grammar, and a right-hand side that is a sequence of one or more such symbols.(We assume that all terminal symbols are generated by rules of the form &quot;preterm word&quot; and we treat these as a special case.)For us the non-terminal symbols are those of the tree-bank, augmented by the symbols aux and auxg, which have been assigned deterministically to certain auxiliary verbs such as &quot;have&quot; or &quot;having&quot;.For each expansion we distinguish one of the right-hand side labels as the &quot;middle&quot; or &quot;head&quot; symbol M(c).M(c) is the constituent from which the head lexical item h is obtained according to deterministic rules that pick the head of a constituent from among the heads of its children.To the left of M is a sequence of one or more left labels Li (c) including the special termination symbol A, which indicates that there are no more symbols to the left, and similarly for the labels to the right, Ri(c).Thus an expansion e(c) looks like: The expansion is generated by guessing first M, then in order L1 through L,„.+1 (= A), and similarly for RI through In a pure Markov PCFG we are given the left-hand side label 1 and then probabilistically generate the right-hand side conditioning on no information other than 1 and (possibly) previously generated pieces of the right-hand side itself.In the simplest of such models, a zeroorder Markov grammar, each label on the righthand side is generated conditioned only on / — that is, according to the distributions p(Li j1), p(M I 1), and p(Ri I 1).More generally, one can condition on the m previously generated labels, thereby obtaining an mth-order Markov grammar.So, for example, in a second-order Markov PCFG, L2 would be conditioned on L1 and M. In our complete model, of course, the probability of each label in the expansions is also conditioned on other material as specified in Equation 1, e.g., p(e t, h, H).Thus we would use p(L2 I L1, M, 1, t, h, H).Note that the As on both ends of the expansion in Expression 2 are conditioned just like any other label in the expansion.The major problem confronting the author of a generative parser is what information to use to condition the probabilities required in the model, and how to smooth the empirically obtained probabilities to take the sting out of the sparse data problems that are inevitable with even the most modest conditioning.For example, in a second-order Markov grammar we conditioned the L2 label according to the distribution p(L2 I L1, M,1, t, h, H).Also, remember that H is a pla,ceholder for any other information beyond the constituent c that may be useful in assigning c a probability.In the past few years the maximum entropy, or log-linear, approach has recommended itself to probabilistic model builders for its flexibility and its novel approach to smoothing [1,17].A complete review of log-linear models is beyond the scope of this paper.Rather, we concentrate on the aspects of these models that most directly influenced the model presented here.To compute a probability in a log-linear model one first defines a set of &quot;features&quot;, functions from the space of configurations over which one is trying to compute probabilities to integers that denote the number of times some pattern occurs in the input.In our work we assume that any feature can occur at most once, so features are boolean-valued: 0 if the pattern does not occur, 1 if it does.In the parser we further assume that features are chosen from certain feature schemata and that every feature is a boolean conjunction of sub-features.For example, in computing the probability of the head's pre-terminal t we might want a feature schema f (t, 1) that returns 1 if the observed pre-terminal of c = t and the label of c = 1, and zero otherwise.This feature is obviously composed of two sub-features, one recognizing t, the other 1.If both return 1, then the feature returns 1.Now consider computing a conditional probability p(a H) with a set of features h that connect a to the history H. In a log-linear model the probability function takes the following form: Here the Ai are weights between negative and positive infinity that indicate the relative importance of a feature: the more relevant the feature to the value of the probability, the higher the absolute value of the associated A.The function Z(H), called the partition function, is a normalizing constant (for fixed H), so the probabilities over all a sum to one.Now for our purposes it is useful to rewrite this as a sequence of multiplicative functions gi(a, H) for 0 < i < j: Here go(a, H) = 11Z (H) and gi(a, H) = eAi(a,H) fi(°,11).The intuitive idea is that each factor gi is larger than one if the feature in question makes the probability more likely, one if the feature has no effect, and smaller than one if it makes the probability less likely.Maximum-entropy models have two benefits for a parser builder.First, as already implicit in our discussion, factoring the probability computation into a sequence of values corresponding to various &quot;features&quot; suggests that the probability model should be easily changeable — just change the set of features used.This point is emphasized by Ratnaparkhi in discussing his parser [17).Second, and this is a point we have not yet mentioned, the features used in these models need have no particular independence of one another.This is useful if one is using a loglinear model for smoothing.That is, suppose we want to compute a conditional probability p(a b, c), but we are not sure that we have enough examples of the conditioning event b, c in the training corpus to ensure that the empirically obtained probability P (a I b, c) is accurate.The traditional way to handle this is also to compute P(a b), and perhaps P(a c) as well, and take some combination of these values as one's best estimate for p(a I b, c).This method is known as &quot;deleted interpolation&quot; smoothing.In max-entropy models one can simply include features for all three events f1 (a, b, c), f2 (a, b), and f3(a, c) and combine them in the model according to Equation 3, or equivalently, Equation 4.The fact that the features are very far from independent is not a concern.Now let us note that we can get an equation of exactly the same form as Equation 4 in the following fashion: Note that the first term of the equation gives a probability based upon little conditioning information and that each subsequent term is a number from zero to positive infinity that is greater or smaller than one if the new information being considered makes the probability greater or smaller than the previous estimate.As it stands, this last equation is pretty much content-free.But let us look at how it works for a particular case in our parsing scheme.Consider the probability distribution for choosing the pre-terminal for the head of a constituent.In Equation 1 we wrote this as p(t I 1, H).As we discuss in more detail in Section 5, several different features in the context surrounding c are useful to include in H: the label, head pre-terminal and head of the parent of c (denoted as lp, tp, hp), the label of c's left sibling (lb for &quot;before&quot;), and the label of the grandparent of c (la).That is, we wish to compute p(t 1, lp, tp, lb, lg, hp).We can now rewrite this in the form of Equation 5 as follows: Here we have sequentially conditioned on steadily increasing portions of c's history.In many cases this is clearly warranted.For example, it does not seem to make much sense to condition on, say, hp without first conditioning on ti,.In other cases, however, we seem to be conditioning on apples and oranges, so to speak.For example, one can well imagine that one might want to condition on the parent's lexical head without conditioning on the left sibling, or the grandparent label.One way to do this is to modify the simple version shown in Equation 6 to allow this: Note the changes to the last three terms in Equation 7.Rather than conditioning each term on the previous ones, they are now conditioned only on those aspects of the history that seem most relevant.The hope is that by doing this we will have less difficulty with the splitting of conditioning events, and thus somewhat less difficulty with sparse data.We make one more point on the connection of Equation 7 to a maximum entropy formulation.Suppose we were, in fact, going to compute a true maximum entropy model based upon the features used in Equation 7, Ii (t,1), f2(t,1,1p), f3(t,1,lp) ....This requires finding the appropriate Ais for Equation 3, which is accomplished using an algorithm such as iterative scaling [II] in which values for the Ai are initially &quot;guessed&quot; and then modified until they converge on stable values.With no prior knowledge of values for the Ai one traditionally starts with Ai = 0, this being a neutral assumption that the feature has neither a positive nor negative impact on the probability in question.With some prior knowledge, non-zero values can greatly speed up this process because fewer iterations are required for convergence.We comment on this because in our example we can substantially speed up the process by choosing values picked so that, when the maximum-entropy equation is expressed in the form of Equation 4, the gi have as their initial values the values of the corresponding terms in Equation 7.(Our experience is that rather than requiring 50 or so iterations, three suffice.)Now we observe that if we were to use a maximum-entropy approach but run iterative scaling zero times, we would, in fact, just have Equation 7.The major advantage of using Equation 7 is that one can generally get away without computing the partition function Z(H).In the simple (content-free) form (Equation 6), it is clear that Z(H) = 1.In the more interesting version, Equation 7, this is not true in general, but one would not expect it to differ much from one, and we assume that as long as we are not publishing the raw probabilities (as we would be doing, for example, in publishing perplexity results) the difference from one should be unimportant.As partition-function calculation is typically the major on-line computational problem for maximum-entropy models, this simplifies the model significantly.Naturally, the distributions required by Equation 7 cannot be used without smoothing.In a pure maximum-entropy model this is done by feature selection, as in Ratnaparkhi's maximum-entropy parser [17].While we could have smoothed in the same fashion, we choose instead to use standard deleted interpolation.(Actually, we use a minor variant described in [4].)We created a parser based upon the maximumentropy-inspired model of the last section, smoothed using standard deleted interpolation.As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser [2,7], we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.For runs with the generative model based upon Markov grammar statistics, the first pass uses the same statistics, but conditioned only on standard PCFG information.This allows the second pass to see expansions not present in the training corpus.We use the gathered statistics for all observed words, even those with very low counts, though obviously our deleted interpolation smoothing gives less emphasis to observed probabilities for rare words.We guess the preterminals of words that are not observed in the training data using statistics on capitalization, hyphenation, word endings (the last two letters), and the probability that a given pre-terminal is realized using a previously unobserved word.As noted above, the probability model uses five smoothed probability distributions, one each for Li, M,Ri,t, and h. The equation for the (unsmoothed) conditional probability distribution for t is given in Equation 7.The other four equations can be found in a longer version of this paper available on the author's website (www.cs.brown.eduhiec).L and R are conditioned on three previous labels so we are using a third-order Markov grammar.Also, the label of the parent constituent lp is conditioned upon even when it is not obviously related to the further conditioning events.This is due to the importance of this factor in parsing, as noted in, e.g., [14].In keeping with the standard methodology [5, 9,10,15,17], we used the Penn Wall Street Journal tree-bank [16] with sections 2-21 for training, section 23 for testing, and section 24 for development (debugging and tuning).Performance on the test corpus is measured using the standard measures from [5,9,10,17].In particular, we measure labeled precision (LP) and recall (LR), average number of crossbrackets per sentence (CB), percentage of sentences with zero cross brackets (OCB), and percentage of sentences with < 2 cross brackets (2CB).Again as standard, we take separate measurements for all sentences of length < 40 and all sentences of length < 100.Note that the definitions of labeled precision and recall are those given in [9] and used in all of the previous work.As noted in [5], these definitions typically give results about 0.4% higher than the more obvious ones.The results for the new parser as well as for the previous top-three individual parsers on this corpus are given in Figure 1.As is typical, all of the standard measures tell pretty much the same story, with the new parser outperforming the other three parsers.Looking in particular at the precision and recall figures, the new parser's give us a 13% error reduction over the best of the previous work, Co1199 [9].In the previous sections we have concentrated on the relation of the parser to a maximumentropy approach, the aspect of the parser that is most novel.However, we do not think this aspect is the sole or even the most important reason for its comparative success.Here we list what we believe to be the most significant contributions and give some experimental results on how well the program behaves without them.We take as our starting point the parser labled Char97 in Figure 1 [5], as that is the program from which our current parser derives.That parser, as stated in Figure 1, achieves an average precision/recall of 87.5.As noted in [5], that system is based upon a &quot;tree-bank grammar&quot; - a grammar read directly off the training corpus.This is as opposed to the &quot;Markovgrammar&quot; approach used in the current parser.Also, the earlier parser uses two techniques not employed in the current parser.First, it uses a clustering scheme on words to give the system a &quot;soft&quot; clustering of heads and sub-heads.(It is &quot;soft&quot; clustering in that a word can belong to more than one cluster with different weights - the weights express the probability of producing the word given that one is going to produce a word from that cluster.)Second, Char97 uses unsupervised learning in that the original system was run on about thirty million words of unparsed text, the output was taken as &quot;correct&quot;, and statistics were collected on the resulting parses.Without these enhancements Char97 performs at the 86.6% level for sentences of length < 40.In this section we evaluate the effects of the various changes we have made by running various versions of our current program.To avoid repeated evaluations based upon the testing corpus, here our evaluation is based upon sentences of length < 40 from the development corpus.We note here that this corpus is somewhat more difficult than the &quot;official&quot; test corpus.For example, the final version of our system achieves an average precision/recall of 90.1% on the test corpus but an average precision/recall of only 89.7% on the development corpus.This is indicated in Figure 2, where the model labeled &quot;Best&quot; has precision of 89.8% and recall of 89.6% for an average of 89.7%, 0.4% lower than the results on the official test corpus.This is in accord with our experience that developmentcorpus results are from 0.3% to 0.5% lower than those obtained on the test corpus.The model labeled &quot;Old&quot; attempts to recreate the Char97 system using the current program.It makes no use of special maximum-entropyinspired features (though their presence made it much easier to perform these experiments), it does not guess the pre-terminal before guessing the lexical head, and it uses a tree-bank grammar rather than a Markov grammar.This parser achieves an average precision/recall of 86.2%.This is consistent with the average precision/recall of 86.6% for [5] mentioned above, as the latter was on the test corpus and the former on the development corpus.Between the Old model and the Best model, Figure 2 gives precision/recall measurements for several different versions of our parser.One of the first and without doubt the most significant change we made in the current parser is to move from two stages of probabilistic decisions at each node to three.As already noted, Char97 first guesses the lexical head of a constituent and then, given the head, guesses the PCFG rule used to expand the constituent in question.In contrast, the current parser first guesses the head's pre-terminal, then the head, and then the expansion.It turns out that usefulness of this process had already been discovered by Collins [10], who in turn notes (personal communication) that it was previously used by Eisner [12].However, Collins in [10] does not stress the decision to guess the head's pre-terminal first, and it might be lost on the casual reader.Indeed, it was lost on the present author until he went back after the fact and found it there.In Figure 2 we show that this one factor improves performance by nearly 2%.It may not be obvious why this should make so great a difference, since most words are effectively unambiguous.(For example, part-ofspeech tagging using the most probable preterminal for each word is 90% accurate [8].)We believe that two factors contribute to this performance gain.The first is simply that if we first guess the pre-terminal, when we go to guess the head the first thing we can condition upon is the pre-terminal, i.e., we compute p(h I t).This quantity is a relatively intuitive one (as, for example, it is the quantity used in a PCFG to relate words to their pre-terminals) and it seems particularly good to condition upon here since we use it, in effect, as the unsmoothed probability upon which all smoothing of p(h) is based.This one &quot;fix&quot; makes slightly over a percent difference in the results.The second major reason why first guessing the pre-terminal makes so much difference is that it can be used when backing off the lexical head in computing the probability of the rule expansion.For example, when we first guess the lexical head we can move from computing p(r I 1,1p, h) to p(r I /, t, /p, h).So, e.g., even if the word &quot;conflating&quot; does not appear in the training corpus (and it does not), the &quot;ng&quot; ending allows our program to guess with relative security that the word has the vbg pre-terminal, and thus the probability of various rule expansions can be considerable sharpened.For example, the tree-bank PCFG probability of the rule &quot;VP --+ vbg np&quot; is 0.0145, whereas once we condition on the fact that the lexical head is a vbg we get a probability of 0.214.The second modification is the explicit marking of noun and verb-phrase coordination.We have already noted the importance of conditioning on the parent label /p.So, for example, information about an np is conditioned on the parent — e.g., an s, vp, pp, etc.Note that when an np is part of an np coordinate structure the parent will itself be an np, and similarly for a vp.But nps and vps can occur with np and vp parents in non-coordinate structures as well.For example, in the Penn Treebank a vp with both main and auxiliary verbs has the structure shown in Figure 3.Note that the subordinate vp has a vp parent.Thus np and vp parents of constituents are marked to indicate if the parents are a coordinate structure.A vp coordinate structure is defined here as a constituent with two or more vp children, one or more of the constituents comma, cc, conjp (conjunctive phrase), and nothing else; coordinate np phrases are defined similarly.Something very much like this is done in [15].As shown in Figure 2, conditioning on this information gives a 0.6% improvement.We believe that this is mostly due to improvements in guessing the sub-constituent's pre-terminal and head.Given we are already at the 88% level of accuracy, we judge a 0.6% improvement to be very much worth while.Next we add the less obvious conditioning events noted in our previous discussion of the final model — grandparent label lg and left sibling label /b.When we do so using our maximum-entropy-inspired conditioning, we get another 0.45% improvement in average precision/recall, as indicated in Figure 2 on the line labeled &quot;MaxEnt-Inspired'.Note that we also tried including this information using a standard deleted-interpolation model.The results here are shown in the line &quot;Standard Interpolation&quot;.Including this information within a standard deleted-interpolation model causes a 0.6% decrease from the results using the less conventional model.Indeed, the resulting performance is worse than not using this information at all.Up to this point all the models considered in this section are tree-bank grammar models.That is, the PCFG grammar rules are read directly off the training corpus.As already noted, our best model uses a Markov-grammar approach.As one can see in Figure 2, a firstorder Markov grammar (with all the aforementioned improvements) performs slightly worse than the equivalent tree-bank-grammar parser.However, a second-order grammar does slightly better and a third-order grammar does significantly better than the tree-bank parser.We have presented a lexicalized Markov grammar parsing model that achieves (using the now standard training/testing/development sections of the Penn treebank) an average precision/recall of 91.1% on sentences of length < 40 and 89.5% on sentences of length < 100.This corresponds to an error reduction of 13% over the best previously published single parser results on this test set, those of Collins [9].That the previous three best parsers on this test [5,9,17] all perform within a percentage point of each other, despite quite different basic mechanisms, led some researchers to wonder if there might be some maximum level of parsing performance that could be obtained using the treebank for training, and to conjecture that perhaps we were at it.The results reported here disprove this conjecture.The results of [13] achieved by combining the aforementioned three-best parsers also suggest that the limit on tree-bank trained parsers is much higher than previously thought.Indeed, it may be that adding this new parser to the mix may yield still higher results.From our perspective, perhaps the two most important numbers to come out of this research are the overall error reduction of 13% over the results in [9] and the intermediateresult improvement of nearly 2% on labeled precision/recall due to the simple idea of guessing the head's pre-terminal before guessing the head.Neither of these results were anticipated at the start of this research.As noted above, the main methodological innovation presented here is our &quot;maximumentropy-inspired&quot; model for conditioning and smoothing.Two aspects of this model deserve some comment.The first is the slight, but important, improvement achieved by using this model over conventional deleted interpolation, as indicated in Figure 2.We expect that as we experiment with other, more semantic conditioning information, the importance of this aspect of the model will increase.More important in our eyes, though, is the flexibility of the maximum-entropy-inspired model.Though in some respects not quite as flexible as true maximum entropy, it is much simpler and, in our estimation, has benefits when it comes to smoothing.Ultimately it is this flexibility that let us try the various conditioning events, to move on to a Markov grammar approach, and to try several Markov grammars of different orders, without significant programming.Indeed, we initiated this line of work in an attempt to create a parser that would be flexible enough to allow modifications for parsing down to more semantic levels of detail.It is to this project that our future parsing work will be devoted.
A Novel Use of Statistical Parsing to Extract Information from TextSince 1995, a few statistical parsing algorithms have demonstrated a breakthrough in parsing accuracy, as measured against the UPenn TREEBANK as a gold standard.In this paper we report adapting a lexic al ized, probabilistic context-free parser to information extraction and evaluate this new technique on MUC-7 template elements and template relations.Since 1995, a few statistical parsing algorithms (Magerman, 1995; Collins, 1996 and 1997; Charniak, 1997; Rathnaparki, 1997) demonstrated a breakthrough in parsing accuracy, as measured against the University of Pennsylvania TREEBANK as a gold standard.Yet, relatively few have embedded one of these algorithms in a task.Chiba, (1999) was able to use such a parsing algorithm to reduce perplexity with the long term goal of improved speech recognition.In this paper, we report adapting a lexicalized, probabilistic context-free parser with head rules (LPCFG-HR) to information extraction.The technique was benchmarked in the Seventh Message Understanding Conference (MUC-7) in 1998.Several technical challenges confronted us and were solved: TREEBANK on Wall Street Journal adequately train the algorithm for New York Times newswire, which includes dozens of newspapers?Manually creating sourcespecific training data for syntax was not required.Instead, our parsing algorithm, trained on the UPenn TREEBANK, was run on the New York Times source to create unsupervised syntactic training which was constrained to be consistent with semantic annotation.We evaluated the new approach to information extraction on two of the tasks of the Seventh Message Understanding Conference (MUC-7) and reported in (Marsh, 1998).The Template Element (TE) task identifies organizations, persons, locations, and some artifacts (rocket and airplane-related artifacts).For each organization in an article, one must identify all of its names as used in the article, its type (corporation, government, or other), and any significant description of it.For each person, one must find all of the person's names within the document, his/her type (civilian or military), and any significant descriptions (e.g., titles).For each location, one must also give its type (city, province, county, body of water, etc.).For the following example, the The Template Relations (TR) task involves identifying instances of three relations in the text: TR builds on TE in that TR reports binary relations between elements of TE.For the following example, the template relation in Figure 2 was to be generated: &quot;Donald M. Goldstein, a historian at the University of Pittsburgh who helped write...&quot;Almost all approaches to information extraction — even at the sentence level — are based on the divide-and-conquer strategy of reducing a complex problem to a set of simpler ones.Currently, the prevailing architecture for dividing sentential processing is a four-stage pipeline consisting of: Since we were interested in exploiting recent advances in parsing, replacing the syntactic analysis stage of the standard pipeline with a modern statistical parser was an obvious possibility.However, pipelined architectures suffer from a serious disadvantage: errors accumulate as they propagate through the pipeline.For example, an error made during part-of-speech-tagging may cause a future error in syntactic analysis, which may in turn cause a semantic interpretation failure.There is no opportunity for a later stage, such as parsing, to influence or correct an earlier stage such as part-of-speech tagging.An integrated model can limit the propagation of errors by making all decisions jointly.For this reason, we focused on designing an integrated model in which tagging, namefinding, parsing, and semantic interpretation decisions all have the opportunity to mutually influence each other.A second consideration influenced our decision toward an integrated model.We were already using a generative statistical model for part-of-speech tagging (Weischedel et al. 1993), and more recently, had begun using a generative statistical model for name finding (Bikel et al.1997).Finally, our newly constructed parser, like that of (Collins 1997), was based on a generative statistical model.Thus, each component of what would be the first three stages of our pipeline was based on the same general class of statistical model.Although each model differed in its detailed probability structure, we believed that the essential elements of all three models could be generalized in a single probability model.If the single generalized model could then be extended to semantic analysis, all necessary sentence level processing would be contained in that model.Because generative statistical models had already proven successful for each of the first three stages, we were optimistic that some of their properties — especially their ability to learn from large amounts of data, and their robustness when presented with unexpected inputs — would also benefit semantic analysis.Our integrated model represents syntax and semantics jointly using augmented parse trees.In these trees, the standard TREEBANK structures are augmented to convey semantic information, that is, entities and relations.An example of an augmented parse tree is shown in Figure 3.The five key facts in this example are: Here, each &quot;reportable&quot; name or description is identified by a &quot;-r&quot; suffix attached to its semantic label.For example, &quot;per-r&quot; identifies &quot;Nance&quot; as a named person, and &quot;per-desc-r&quot; identifies &quot;a paid consultant to ABC News&quot; as a person description.Other labels indicate relations among entities.For example, the coreference relation between &quot;Nance&quot; and &quot;a paid consultant to ABC News&quot; is indicated by &quot;per-desc-of.&quot; In this case, because the argument does not connect directly to the relation, the intervening nodes are labeled with semantics &quot;-ptr&quot; to indicate the connection.Further details are discussed in the section Tree Augmentation.To train our integrated model, we required a large corpus of augmented parse trees.Since it was known that the MUC-7 evaluation data would be drawn from a variety of newswire sources, and that the articles would focus on rocket launches, it was important that our training corpus be drawn from similar sources and that it cover similar events.Thus, we did not consider simply adding semantic labels to the existing Penn TREEBANK, which is drawn from a single source — the Wall Street Journal — and is impoverished in articles about rocket launches.Instead, we applied an information retrieval system to select a large number of articles from the desired sources, yielding a corpus rich in the desired types of events.The retrieved articles would then be annotated with augmented tree structures to serve as a training corpus.Initially, we tried to annotate the training corpus by hand marking, for each sentence, the entire augmented tree.It soon became painfully obvious that this task could not be performed in the available time.Our annotation staff found syntactic analysis particularly complex and slow going.By necessity, we adopted the strategy of hand marking only the semantics.Figure 4 shows an example of the semantic annotation, which was the only type of manual annotation we performed.To produce a corpus of augmented parse trees, we used the following multi-step training procedure which exploited the Penn TREEBANK Applying this procedure yielded a new version of the semantically annotated corpus, now annotated with complete augmented trees like that in Figure 3.In this section, we describe the algorithm that was used to automatically produce augmented trees, starting with a) human-generated semantic annotations and b) machinegenerated syntactic parse trees.For each sentence, combining these two sources involved five steps.These steps are given below:syntactic modifier of the other, the inserted node serves to indicate the relation as well as the argument.For example, in the phrase &quot;Lt. Cmdr.David Edwin Lewis,&quot; a node is inserted to indicate that &quot;Lt. Cmdr.&quot; is a descriptor for &quot;David Edwin Lewis.&quot; 5.Whenever a relation involves an entity that is not a direct descendant of that relation in the parse tree, semantic pointer labels are attached to all of the intermediate nodes.These labels serve to form a continuous chain between the relation and its argument.In our statistical model, trees are generated according to a process similar to that described in (Collins 1996, 1997).The detailed probability structure differs, however, in that it was designed to jointly perform part-of-speech tagging, name finding, syntactic parsing, and relation finding in a single process.For each constituent, the head is generated first, followed by the modifiers, which are generated from the head outward.Head words, along with their part-of-speech tags and features, are generated for each modifier as soon as the modifier is created.Word features are introduced primarily to help with unknown words, as in (Weischedel et al. 1993).We illustrate the generation process by walking through a few of the steps of the parse shown in Figure 3.At each step in the process, a choice is made from a statistical distribution, with the probability of each possible selection dependent on particular features of previously generated elements.We pick up the derivation just after the topmost S and its head word, said, have been produced.The next steps are to generate in order: In this case, there are none.8.Post-modifier constituents for the PER/NP.First a comma, then an SBAR structure, and then a second comma are each generated in turn.This generation process is continued until the entire tree has been produced.We now briefly summarize the probability structure of the model.The categories for head constituents, cl„ are predicted based solely on the category of the parent node, cp: Modifier constituent categories, cm, are predicted based on their parent node, cp, the head constituent of their parent node, chp, the previously generated modifier, c„,_1, and the head word of their parent, wp.Separate probabilities are maintained for left (pre) and right (post) modifiers: Part-of-speech tags, t,,, for modifiers are predicted based on the modifier, cm, the partof-speech tag of the head word, th, and the head word itself, wh: Head words, w„„ for modifiers are predicted based on the modifier, cm, the part-of-speech tag of the modifier word , t„„ the part-ofspeech tag of the head word , th, and the head word itself, wh: lAwmicm,tm,th,wh), e.g.Finally, word features, fm, for modifiers are predicted based on the modifier, cm, the partof-speech tag of the modifier word , t„„ the part-of-speech tag of the head word th, the head word itself, wh, and whether or not the modifier head word, w„„ is known or unknown.The probability of a complete tree is the product of the probabilities of generating each element in the tree.If we generalize the tree components (constituent labels, words, tags, etc.) and treat them all as simply elements, e, and treat all the conditioning factors as the history, h, we can write:Maximum likelihood estimates for the model probabilities can be obtained by observing frequencies in the training corpus.However, because these estimates are too sparse to be relied upon, we use interpolated estimates consisting of mixtures of successively lowerorder estimates (as in Placeway et al. 1993).For modifier constituents, the mixture components are: For part-of-speech tags, the mixture components are: Finally, for word features, the mixture components are:Given a sentence to be analyzed, the search program must find the most likely semantic and syntactic interpretation.More precisely, it must find the most likely augmented parse tree.Although mathematically the model predicts tree elements in a top-down fashion, we search the space bottom-up using a chartbased search.The search is kept tractable through a combination of CKY-style dynamic programming and pruning of low probability elements.Whenever two or more constituents are equivalent relative to all possible later parsing decisions, we apply dynamic programming, keeping only the most likely constituent in the chart.Two constituents are considered equivalent if: threshold of the highest scoring constituent are maintained; all others are pruned.For purposes of pruning, and only for purposes of pruning, the prior probability of each constituent category is multiplied by the generative probability of that constituent (Goodman, 1997).We can think of this prior probability as an estimate of the probability of generating a subtree with the constituent category, starting at the topmost node.Thus, the scores used in pruning can be considered as the product of: 1.The probability of generating a constituent of the specified category, starting at the topmost node.2.The probability of generating the structure beneath that constituent, having already generated a constituent of that category.Given a new sentence, the outcome of this search process is a tree structure that encodes both the syntactic and semantic structure of the sentence.The semantics — that is, the entities and relations — can then be directly extracted from these sentential trees.Our system for MUC-7 consisted of the sentential model described in this paper, coupled with a simple probability model for cross-sentence merging.The evaluation results are summarized in Table 1.In both Template Entity (TE) and Template Relation (TR), our system finished in second place among all entrants.Nearly all of the work was done by the sentential model; disabling the cross-sentence model entirely reduced our overall F-Score by only 2 points.Given multiple constituents that cover identical spans in the chart, only those constituents with probabilities within a While our focus throughout the project was on TE and TR, we became curious about how well the model did at part-of-speech tagging, syntactic parsing, and at name finding.We evaluated part-of-speech tagging and parsing accuracy on the Wall Street Journal using a now standard procedure (see Collins 97), and evaluated name finding accuracy on the MUC7 named entity test.The results are summarized in Table 2.While performance did not quite match the best previously reported results for any of these three tasks, we were pleased to observe that the scores were at or near state-of-the-art levels for all cases.We have demonstrated, at least for one problem, that a lexicalized, probabilistic context-free parser with head rules (LPCFGHR) can be used effectively for information extraction.A single model proved capable of performing all necessary sentential processing, both syntactic and semantic.We were able to use the Penn TREEBANK to estimate the syntactic parameters; no additional syntactic training was required.The semantic training corpus was produced by students according to a simple set of guidelines.This simple semantic annotation was the only source of task knowledge used to configure the model.The work reported here was supported in part by the Defense Advanced Research Projects Agency.Technical agents for part of this work were Fort Huachucha and AFRL under contract numbers DABT63-94-C-0062, F30602-97-C-0096, and 4132-BBN-001.The views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the United States Government.We thank Michael Collins of the University of Pennsylvania for his valuable suggestions.
An Annotation Scheme for Free Word Order LanguagesWe describe an annotation scheme and a tool developed for creating linguistically annotated corpora for non-configurational languages.Since the requirements for such a formalism differ from those posited for configurational languages, several features have been added, influencing the architecture of the scheme.The resulting scheme reflects a stratificational notion of language, and makes only minimal assumpabout the interrelation of the particu- •lar representational strata.The work reported in this paper aims at providing syntactically annotated corpora (treebanks') for stochastic grammar induction.In particular, we focus on several methodological issues concerning the annotation of non-configurational languages.In section 2, we examine the appropriateness of existing annotation schemes.On the basis of these considerations, we formulate several additional requirements.A formalism complying with these requirements is described in section 3.Section 4 deals with the treatment of selected phenomena.For a description of the annotation tool see section 5.Combining raw language data with linguistic information offers a promising basis for the development of new efficient and robust NLP methods.Realworld texts annotated with different strata of linguistic information can be used for grammar induction.The data-drivenness of this approach presents a clear advantage over the traditional, idealised notion of competence grammar.Corpora annotated with syntactic structures are commonly referred to as trctbank.5.Existing treebank annotation schemes exhibit a fairly uniform architecture, as they all have to meet the same basic requirements, namely: Descriptivity: Grammatical phenomena are to be described rather than explained.Theory-independence: Annotations should not be influenced by theory-specific considerations.Nevertheless, different theory-specific representations shall be recoverable from the annotation, cf.(Marcus et al., 1994).Multi-stratal representation: Clear separation of different description levels is desirable.Data-drivenness: The scheme must provide representational means for all phenomena occurring in texts.Disambiguation is based on human processing skills (cf.(Marcus et. al., 1994), (Sampson, 1995), (Black et. al., 1996)).The typical treebank architecture is as follows: Structures: A context-free backbone is augmented with trace-filler representations of non-local dependencies.The underlying argument SirlteilITC is not represented directly, but can be recovered from the tree and trace-filler annotations.Syntactic category is encoded in node labels.Grammatical functions constitute a complex label system (cf.(Bies et al., 1995), (Sampson, 1995)).Part-of-Speech is annotated at word level.Thus the context-free constituent backbone plays a pivotal role in the annotation scheme.Due to the substantial differences between existing models of constituent structure, the question arises of how the theory independencf requirement, can be satisfied.At, this point the importance of the underlying argument structure is emphasised (cf.(Lehmann et al., 1996), (Marcus et al., 1994), (Sampson, 1995)).Treebanks of the format, described in the above section have been designed for English.Therefore, the solutions they offer are not always optimal for other language types.As for free word order languages, the following features may cause problems: sition between the two poles.In light of these facts, serious difficulties can be expected arising from the structural component of the existing formalisms.Due to the frequency of discontinuous constituents in non-configurational languages, the filler-trace mechanism would be used very often, yielding syntactic trees fairly different from the underlying predicate-argument structures.Consider the German sentence (1) daran wird ihn Anna erkennen, &di er weint at-it will him Anna recognise that he cries 'Anna will recognise him at his cry' A sample constituent structure is given below: The fairly short sentence contains three non-local dependencies, marked by co-references between traces and the corresponding nodes.This hybrid representation makes the structure less transparent, and therefore more difficult to annotate.Apart from this rather technical problem, two further arguments speak against phrase structure as the structural pivot of the annotation scheme: Finally, the structural handling of free word order means stating well-formedness constraints on structures involving many trace-filler dependencies, which has proved tedious.Since most methods of handling discontinuous constituents make the formalism more powerful, the efficiency of processing deteriorates, too.An alternative solution is to make argument structure the main structural component of the formalism.This assumption underlies a growing number of recent syntactic theories which give up the context-free constituent backbone, cf.(McCawley, 1987), (Dowty, 1989), (Reape, 1993), (Kathol and Pollard, 1995).These approaches provide an adequate explanation for several issues problematic for phrase-structure grammars (clause union, extraposition, diverse second-position phenomena).Argument structure can be represented in terms of unordered trees (with crossing branches).In order to reduce their ambiguity potential, rather simple, 'flat' trees should be employed, while more information can be expressed by a rich system of function labels.Furthermore, the required theory-independence means that the form of syntactic trees should not reflect theory-specific assumptions, e.g. every syntactic structure has a unique head.Thus, notions such as head should be distinguished at the level of syntactic functions rather than structures.This requirement speaks against the traditional sort of dependency trees, in which heads a,re represented as non-terminal nodes, cf.(Hudson, 1984).A tree meeting these requirements is given below: Adv V NP NP V CPL NP V damn wird ihn Anna erkennen, dais er 'vein!Such a word order independent representation has the advantage of all structural information being encoded in a single data structure.A uniform representation of local and non-local dependencies makes the structure more transparent'.We distinguish the following levels of representation: 'A context-free constituent backbone can still be recovered from the surface string and argument structure by reattaching 'extracted' structures to a higher node.Argument structure, represented in terms of unordered trees.Grammatical functions, encoded in edge labels, e.g.SB (subject), MO (modifier), HD (head).Syntactic categories, expressed by category labels assigned to non-terminal nodes and by part-of-speech tags assigned to terminals.A structure for (2) is shown in fig.2.(2) schade, daB kein Arzt anwesend ist, der pity that no doctor present is who sich a.uskennt is competent 'Pity that no competent doctor is here' Note that the root node does not have a head descendant (HD) as the sentence is a predicative construction consisting of a subject (SB) and a predicate (PD) without a copula.The subject is itself a sentence in which the copula (zA) does occur and is assigned the tag HD'.The tree resembles traditional constituent structures.The difference is its word order independence: structural units (&quot;phrases&quot;) need not be contiguous substrings.For instance, the extraposed relative clause (RC) is still treated as part of the subject NP.As the annotation scheme does not distinguish different bar levels or any similar intermediate categories, only a small set of node labels is needed (currently 16 tags, S, NP, AP ...).Due to the rudimentary character of the argument structure representations, a great deal of information has to be expressed by grammatical functions.Their further classification must reflect different kinds of linguistic information: morphology (e.g., case, inflection), category, dependency type (complementation vs. modification), thematic role, etc.'However, there is a trade-off between the granularity of information encoded in the labels and the speed and accuracy of annotation.In order to avoid inconsistencies, the corpus is annotated in two stages: basic annotation and nfirtellte714.While in the first phase each annotator has to annotate structures as well as categories and functions, the refinement call be done separately for each representation level.During the first phase, the focus is on annotating correct structures and a coarse-grained classification of grammatical functions, which represent the following areas of information: Dependency type: complements are further classified according to features such as category and case: clausal complements (OC), accusative objects (OA), datives (DA), etc.Modifiers are assigned the label MO (further classification with respect to thematic roles is planned).Separate labels are defined for dependencies that do not fit the complement/modifier dichotomy, e.g., pre- (GL) and postnominal genitives (GR).Headed and non-headed structures are distinguished by the presence or absence of a branch labeled HD.Morphological information: Another set of labels represents morphological information.PM stands for morphological particle, a label for German infinitival Z7t and superlative am.Separable verb prefixes are labeled SVP.During the second annotation stage, the annotation is enriched with information about thematic roles, quantifier scope and anaphoric reference.As already mentioned, this is done separately for each of the three information areas.A phrase or a lexical item can perform multiple functions in a sentence.Consider (qui verbs where the subject of the infinitival VP is not realised syntactically, but co-referent with the subject or object. of the matrix equi verb: (3) er bat mich zu kommen he asked me to come (mich is the understood subject. of kommt,n).In such cases, an additional edge is drawn from the embedded VP node to the controller, thus changing the syntactic tree into a graph.We call such additional edges secondary links and represent them as dotted lines, see fig.4, showing the structure of (3).As theory-independence is one of our objectives, the annotation scheme incorporates a number of widely accepted linguistic analyses, especially in the area of verbal, adverbial and adjectival syntax.However, some other standard analysts turn out to be problematic, mainly due to the partial, idealised character of competence grammars, which often marginalise or ignore such important. phenomena. as 'deficient' (e.g. headless) constructions, appositions, temporal expressions, etc.In the following paragraphs, we give annotations for a number of such phenomena..Most linguistic theories treat NPs as structures headed by a unique lexical item (noun).However, this idealised model needs several additional assumptions in order to account for such important phenomena as complex nominal NP components (cf.(4)) or nominalised adjectives (cf.(5)).In (4), different theories make different headedness predictions.In (5), either a lexical nominalisation rule for the adjective Gliickliche is stipulated, or the existence of an empty nominal head.Moreover, the so-called DP analysis views the article der as the head of the phrase.Further differences concern the attachment of the degree modifier sehr.Because of the intended theory-independence of the scheme, we annotate only the common minimum.We distinguish an NP kernel consisting of determiners, adjective phrases and nouns.All components of this kernel are assigned the label NK and treated as sibling nodes.The difference between the particular NK's lies in the positional and part-of-speech information, which is also sufficient to recover theory-specific structures from our `underspecified' representations.For instance, the first, determiner among the NK's can be treated as the specifier of the phrase.The head of the phrase can be determined in a similar way according to theory-specific assumptions.In addition, a. number of clear-cut NP cornponents can be defined outside that, juxtapositional kernel: pre- and postnominal genitives (GL, GR), relative clauses (RC), clausal and sentential complements (OC).They are all treated as siblings of NK's regardless of their position (in situ or extraposed).Adjunct attachment often gives rise to structural ambiguities or structural uncertainty.However, full or partial disambiguation takes place in context, and the annotators do not consider unrealistic readings.In addition, we have adopted a simple convention for those cases in which context information is insufficient, for total disambiguation: the highest possible attachment, site is chosen.A similar convention ha.s been adopted for constructions in which scope ambiguities have syntactic effects but a one-to-one correspondence between scope and attachment. does not seem reasonable, cf. focus particles such as only or also.If the scope of such a word does not directly correspond to a tree node, the word is attached to the lowest node dominating all subconstituents appearing in its scope.A problem for the rudimentary argument. structure representations is the use of incomplete structures in natural language, i.e. phenomena such as coordination and ellipsis.Since a precise structural description of non-constituent coordination would require a. rich inventory of incomplete phrase types, we have agreed on a sort of unde.rspe.cified representations: the coordinated units are assigned structures in which missing lexical material is not represented at the level of primary links.Fig.3 shows the representation of the sentence: (6) sic wurde von preuBischen Truppen besetzt she was by Prussian troops occupied und 1887 dem preuliischen Staat angegliedert and 1887 to-the Prussian state incorporated 'it was occupied by Prussian troops and incorporated into Prussia in 1887' The category of the coordination is labeled CVP here, where C stands for coordination, and VP for the actual category.This extra marking makes it easy to distinguish between 'normal' and coordinated categories.Multiple coordination as well as enumerations are annotated in the same way.An explicit coordinating conjunction need not be present.Structure-sharing is expressed using secondary links.The development of linguistically interpreted corpora presents a laborious and time-consuming task.In order to make the annotation process more efficient, extra effort has been put. into the development of an annotation tool.The tool supports immediate graphical feedback and automatic error checking.Since our scheme permits crossing edges, visualisation as bracketing and indentation would be insufficient..Instead, the complete structure should be represented.The tool should also permit a convenient handling of node and edge labels.In particular, variable tagsets and label collections should be allowed.As the need for certain functionalities becomes obvious with growing annotation experience, we have decided to implement the tool in two stages.In the first phase, the main functionality for building and displaying unordered trees is supplied.In the second phase, secondary links and additional structural functions are supported.The implementation of the first phase as described in the following paragraphs is completed.As keyboard input, is more efficient than mouse input (cf.(Lehmann et al., 1996)) most effort, has been put in developing an efficient keyboard interface.Menus are supported as a useful way of getting help on commands and labels.In addition to pure annotation, we can attach comments to structures.Figure 1 shows a screen dump of the tool.The largest part of the window contains the graphical representation of the structure being annotated.The following commands are available: The three tagsets used by the annotation tool (for words, phrases, and edges) are variable and are stored together with the corpus.This allows easy modification if needed.The tool checks the appropriateness of the input.For the implementation, we used Tcl/Tk Version 4.1.The corpus is stored in a SQL database.The degree of automation increases with the amount of data available.Sentences annotated in previous steps are used as training material for further processing.We distinguish five degrees of automation: So far, about 1100 sentences of our corpus have been annotated.This amount of data suffices as training material to reliably assign the grammatical functions if the user determines the elements of a phrase and its type (step 1 of the list above).Grammatical functions are assigned using standard statistical part-of-speech tagging methods (cf. e.g.(Cutting et al., 1992) and (Feldweg, 1995)).For a phrase Q with children of type T„..., Ta and grammatical functions G„...,GA., we use the lexical probabilities and the contextual (trigram) probabilities The lexical and contextual probabilities are determined separately for each type of phrase.During annotation, the highest rated grammatical function labels Gi are calculated using the Viterbi algorithm and assigned to the structure, i.e., we calculate argma.x11 PQ (Ti 1Z-1, Ti.-2) PQ (Gi ITi).To keep the human annotator from missing errors made by the tagger, we additionally calculate the strongest competitor for each label G. If its probability is close to the winner (closeness is defined by a threshold on the quotient), the assignment is regarded as unreliable, and the annotator is asked to confirm the assignment.For evaluation, the already annotated sentences were divided into two disjoint sets, one for training (90% of the corpus), the other one for testing (10%).The procedure was repeated 10 times with different. partitionings.The tagger rates 90% of all assignments as reliable and carries them out fully automatically.Accuracy for these cases is 97%.Most errors are due to wrong identification of the subject and different kinds of objects in sentences and VPs.Accuracy of the unreliable 10% of assignments is 75%, i.e., the annotator has to alter the choice in 1 of 4 cases when asked for confirmation.Overall accuracy of the tagger is 95%.Owing to the partial automation, the average annotation efficiency improves by 25% (from around 4 minutes to 3 minutes per sentence).As the annotation scheme described in this paper focusses on annotating argument structure rather than constituent trees, it differs from existing treebanks in several aspects.These differences can be illustrated by a comparison with the Penn Treebank annotation scheme.The following features of our formalism are then of particular importance: The current tagset comprises only 16 node labels and 34 function tags, yet a. finely grinned classification will take place in the near future.We have argued that the selected approach is better suited for producing high quality interpreted corpora in languages exhibiting free constituent order.In general, the resulting interpreted data also are closer to semantic annotation and more neutral with respect to particular syntactic theories.As modern linguistics is also becoming more aware of the importance of larger sets of naturally occurring data., interpreted corpora. are a. valuable resource for theoretical and descriptive linguistic research.In addition the approach provides empirical material for psycholinguistic investigation, since preferences for the choice of certain syntactic constructions, linea.rizations, and attachments that have been observed in online experiments of language production and comprehension can now be put in relation with the frequency of these alternatives in larger amounts of texts.Syntactically annotated corpora of German have been missing until now.In the second phase of the project Verbmobil a. treebank for :30,000 German spoken sentences as well as for the same amount of English and Japanese sentences will be created.We will closely coordinate the further development of our corpus with the annotation work in Verbmobil and with other German efforts in corpus annotation.Since the combinatorics of syntactic constructions creates a. demand for very large corpora., efficiency of annotation is an important. criterion for the success of the developed methodology and tools.Our annotation tool supplies efficient manipulation and immediate visualization of argument structures.Partial automation included in the current version significantly reduces the manna.1 effort.Its extension is subject to further investigations.This work is part of the DFG Sonderforschungsbereich 378 Rcsource-Adaptim Cogniiivc Proccsses, We wish to thank Tania Avgustinova, Berthold Crysmann, Lars Konieczny, Stephan Oepen, Karel Oliva., Christian Weil3 and two anonymous reviewers for their helpful comments on the content of this paper.We also wish to thank Robert MacIntyre and Ann Taylor for valuable discussions on the Penn Treebank annotation.Special thanks go t,o Oliver Plaehn, who implemented the annotation tool, and to our fearless annotators Roland Hendriks, Kerstin Klockner, Thomas Schulz, and Bernd-Paul Simon.
Polylingual Topic ModelsTopic models are a useful tool for analyzing large text collections, but have previously been applied in only monolingual, or at most bilingual, contexts.Meanwhile, massive collections of interlinked documents in dozens of languages, such as Wikipedia, are now widely available, calling for tools that can characterize content in many languages.We introduce a polylingual topic model that discovers topics aligned across multiple languages.We explore the model’s characteristics using two large corpora, each with over ten different languages, and demonstrate its usefulness in supporting machine translation and tracking topic trends across languages.Statistical topic models have emerged as an increasingly useful analysis tool for large text collections.Topic models have been used for analyzing topic trends in research literature (Mann et al., 2006; Hall et al., 2008), inferring captions for images (Blei and Jordan, 2003), social network analysis in email (McCallum et al., 2005), and expanding queries with topically related words in information retrieval (Wei and Croft, 2006).Much of this work, however, has occurred in monolingual contexts.In an increasingly connected world, the ability to access documents in many languages has become both a strategic asset and a personally enriching experience.In this paper, we present the polylingual topic model (PLTM).We demonstrate its utility and explore its characteristics using two polylingual corpora: proceedings of the European parliament (in eleven languages) and a collection of Wikipedia articles (in twelve languages).There are many potential applications for polylingual topic models.Although research literature is typically written in English, bibliographic databases often contain substantial quantities of work in other languages.To perform topic-based bibliometric analysis on these collections, it is necessary to have topic models that are aligned across languages.Such analysis could be significant in tracking international research trends, where language barriers slow the transfer of ideas.Previous work on bilingual topic modeling has focused on machine translation applications, which rely on sentence-aligned parallel translations.However, the growth of the internet, and in particular Wikipedia, has made vast corpora of topically comparable texts—documents that are topically similar but are not direct translations of one another—considerably more abundant than ever before.We argue that topic modeling is both a useful and appropriate tool for leveraging correspondences between semantically comparable documents in multiple different languages.In this paper, we use two polylingual corpora to answer various critical questions related to polylingual topic models.We employ a set of direct translations, the EuroParl corpus, to evaluate whether PLTM can accurately infer topics when documents genuinely contain the same content.We also explore how the characteristics of different languages affect topic model performance.The second corpus, Wikipedia articles in twelve languages, contains sets of documents that are not translations of one another, but are very likely to be about similar concepts.We use this corpus to explore the ability of the model both to infer similarities between vocabularies in different languages, and to detect differences in topic emphasis between languages.The internet makes it possible for people all over the world to access documents from different cultures, but readers will not be fluent in this wide variety of languages.By linking topics across languages, polylingual topic models can increase cross-cultural understanding by providing readers with the ability to characterize the contents of collections in unfamiliar languages and identify trends in topic prevalence.Bilingual topic models for parallel texts with word-to-word alignments have been studied previously using the HM-bitam model (Zhao and Xing, 2007).Tam, Lane and Schultz (Tam et al., 2007) also show improvements in machine translation using bilingual topic models.Both of these translation-focused topic models infer word-to-word alignments as part of their inference procedures, which would become exponentially more complex if additional languages were added.We take a simpler approach that is more suitable for topically similar document tuples (where documents are not direct translations of one another) in more than two languages.A recent extended abstract, developed concurrently by Ni et al. (Ni et al., 2009), discusses a multilingual topic model similar to the one presented here.However, they evaluate their model on only two languages (English and Chinese), and do not use the model to detect differences between languages.They also provide little analysis of the differences between polylingual and single-language topic models.Outside of the field of topic modeling, Kawaba et al. (Kawaba et al., 2008) use a Wikipedia-based model to perform sentiment analysis of blog posts.They find, for example, that English blog posts about the Nintendo Wii often relate to a hack, which cannot be mentioned in Japanese posts due to Japanese intellectual property law.Similarly, posts about whaling often use (positive) nationalist language in Japanese and (negative) environmentalist language in English.The polylingual topic model (PLTM) is an extension of latent Dirichlet allocation (LDA) (Blei et al., 2003) for modeling polylingual document tuples.Each tuple is a set of documents that are loosely equivalent to each other, but written in different languages, e.g., corresponding Wikipedia articles in French, English and German.PLTM assumes that the documents in a tuple share the same tuple-specific distribution over topics.This is unlike LDA, in which each document is assumed to have its own document-specific distribution over topics.Additionally, PLTM assumes that each “topic” consists of a set of discrete distributions over words—one for each language l = 1, ... , L. In other words, rather than using a single set of topics Φ = {φ1, ... , φT}, as in LDA, there are L sets of language-specific topics, Φ1, ... , ΦL, each of which is drawn from a language-specific symmetric Dirichlet with concentration parameter βl.Anew document tuple w = (w1, ... , wL) is generated by first drawing a tuple-specific topic distribution from an asymmetric Dirichlet prior with concentration parameter α and base measure m: Then, for each language l, a latent topic assignment is drawn for each token in that language: Finally, the observed tokens are themselves drawn using the language-specific topic parameters: wl ∼ P(wl  |zl,Φl) = 11n φlwl |zl .(3) The graphical model is shown in figure 1.Given a corpus of training and test document tuples—W and W', respectively—two possible inference tasks of interest are: computing the probability of the test tuples given the training tuples and inferring latent topic assignments for test documents.These tasks can either be accomplished by averaging over samples of Φ1, ..., ΦL and αm from P(Φ1, ... , ΦL, αm  |W', β) or by evaluating a point estimate.We take the latter approach, and use the MAP estimate for αm and the predictive distributions over words for Φ1, ..., ΦL.The probability of held-out document tuples W' given training tuples W is then approximated by Topic assignments for a test document tuple sampling.Gibbs sampling involves sequentially resampling each zln from its conditional posterior: where z\l,n is the current set of topic assignments for all other tokens in the tuple, while (Nt)\l,n is the number of occurrences of topic t in the tuple, excluding zln, the variable being resampled.Our first set of experiments focuses on document tuples that are known to consist of direct translations.In this case, we can be confident that the topic distribution is genuinely shared across all languages.Although direct translations in multiple languages are relatively rare (in contrast with comparable documents), we use direct translations to explore the characteristics of the model.The EuroParl corpus consists of parallel texts in eleven western European languages: Danish, German, Greek, English, Spanish, Finnish, French, Italian, Dutch, Portuguese and Swedish.These texts consist of roughly a decade of proceedings of the European parliament.For our purposes we use alignments at the speech level rather than the sentence level, as in many translation tasks using this corpus.We also remove the twenty-five most frequent word types for efficiency reasons.The remaining collection consists of over 121 million words.Details by language are shown in Table 1.ES otros otras otro otra parte dem‡s FI muiden toisaalta muita muut muihin muun FR autres autre part cTMt6 ailleurs m6me IT altri altre altro altra dall parte NL andere anderzijds anderen ander als kant PT outros outras outro lado outra noutros SV andra sidan Œ annat ena annan The concentration parameter α for the prior over document-specific topic distributions is initialized to 0.01 T, while the base measure m is initialized to the uniform distribution.Hyperparameters αm are re-estimated every 10 Gibbs iterations.Figure 2 shows the most probable words in all languages for four example topics, from PLTM with 400 topics.The first topic contains words relating to the European Central Bank.This topic provides an illustration of the variation in technical terminology captured by PLTM, including the wide array of acronyms used by different languages.The second topic, concerning children, demonstrates the variability of everyday terminology: although the four Romance languages are closely related, they use etymologically unrelated words for children.(Interestingly, all languages except Greek and Finnish use closely related words for “youth” or “young” in a separate topic.)The third topic demonstrates differences in inflectional variation.English and the Romance languages use only singular and plural versions of “objective.” The other Germanic languages include compound words, while Greek and Finnish are dominated by inflected variants of the same lexical item.The final topic demonstrates that PLTM effectively clusters “syntactic” words, as well as more semantically specific nouns, adjectives and verbs.Although the topics in figure 2 seem highly focused, it is interesting to ask whether the model is genuinely learning mixtures of topics or simply assigning entire document tuples to single topics.To answer this question, we compute the posterior probability of each topic in each tuple under the trained model.If the model assigns all tokens in a tuple to a single topic, the maximum posterior topic probability for that tuple will be near to 1.0.If the model assigns topics uniformly, the maximum topic probability will be near 1/T.We compute histograms of these maximum topic probabilities for T ∈ {50,100, 200, 400, 800}.For clarity, rather than overlaying five histograms, figure 3 shows the histograms converted into smooth curves using a kernel density estimator.1 Although there is a small bump around 1.0 (for extremely short documents, e.g., “Applause”), values are generally closer to, but greater than, 1/T.Maximum topic probability in document Although the posterior distribution over topics for each tuple is not concentrated on one topic, it is worth checking that this is not simply because the model is assigning a single topic to the 1We use the R density function. tokens in each of the languages.Although the model does not distinguish between topic assignment variables within a given document tuple (so it is technically incorrect to speak of different posterior distributions over topics for different documents in a given tuple), we can nevertheless divide topic assignment variables between languages and use them to estimate a Dirichlet-multinomial posterior distribution for each language in each tuple.For each tuple we can then calculate the JensenShannon divergence (the average of the KL divergences between each distribution and a mean distribution) between these distributions.Figure 4 shows the density of these divergences for different numbers of topics.As with the previous figure, there are a small number of documents that contain only one topic in all languages, and thus have zero divergence.These tend to be very short, formulaic parliamentary responses, however.The vast majority of divergences are relatively low (1.0 indicates no overlap in topics between languages in a given document tuple) indicating that, for each tuple, the model is not simply assigning all tokens in a particular language to a single topic.As the number of topics increases, greater variability in topic distributions causes divergence to increase.Smoothed histograms of inter−language JS divergence A topic model specifies a probability distribution over documents, or in the case of PLTM, document tuples.Given a set of training document tuples, PLTM can be used to obtain posterior estimates of Φ', ... , ΦL and αm.The probability of previously unseen held-out document tuples given these estimates can then be computed.The higher the probability of the held-out document tuples, the better the generalization ability of the model.Analytically calculating the probability of a set of held-out document tuples given Φ1, ... , ΦL and αm is intractable, due to the summation over an exponential number of topic assignments for these held-out documents.However, recently developed methods provide efficient, accurate estimates of this probability.We use the “left-to-right” method of (Wallach et al., 2009).We perform five estimation runs for each document and then calculate standard errors using a bootstrap method.Table 2 shows the log probability of held-out data in nats per word for PLTM and LDA, both trained with 200 topics.There is substantial variation between languages.Additionally, the predictive ability of PLTM is consistently slightly worse than that of (monolingual) LDA.It is important to note, however, that these results do not imply that LDA should be preferred over PLTM—that choice depends upon the needs of the modeler.Rather, these results are intended as a quantitative analysis of the difference between the two models.As the number of topics is increased, the word counts per topic become very sparse in monolingual LDA models, proportional to the size of the vocabulary.Figure 5 shows the proportion of all tokens in English and Finnish assigned to each topic under LDA and PLTM with 800 topics.More than 350 topics in the Finnish LDA model have zero tokens assigned to them, and almost all tokens are assigned to the largest 200 topics.English has a larger tail, with non-zero counts in all but 16 topics.In contrast, PLTM assigns a significant number of tokens to almost all 800 topics, in very similar proportions in both languages.PLTM topics therefore have a higher granularity – i.e., they are more specific.This result is important: informally, we have found that increasing the granularity of topics correlates strongly with user perceptions of the utility of a topic model.An important application for polylingual topic modeling is to use small numbers of comparable document tuples to link topics in larger collections of distinct, non-comparable documents in multiple languages.For example, a journal might publish papers in English, French, German and Italian.No paper is exactly comparable to any other paper, but they are all roughly topically similar.If we wish to perform topic-based bibliometric analysis, it is vital to be able to track the same topics across all languages.One simple way to achieve this topic alignment is to add a small set of comparable document tuples that provide sufficient “glue” to bind the topics together.Continuing with the example above, one might extract a set of connected Wikipedia articles related to the focus of the journal and then train PLTM on a joint corpus consisting of journal papers and Wikipedia articles.In order to simulate this scenario we create a set of variations of the EuroParl corpus by treating some documents as if they have no parallel/comparable texts – i.e., we put each of these documents in a single-document tuple.To do this, we divide the corpus W into two sets of document tuples: a “glue” set G and a “separate” set S such that |G |/ |W |= p. In other words, the proportion of tuples in the corpus that are treated as “glue” (i.e., placed in G) is p. For every tuple in S, we assign each document in that tuple to a new singledocument tuple.By doing this, every document in S has its own distribution over topics, independent of any other documents.Ideally, the “glue” documents in g will be sufficient to align the topics across languages, and will cause comparable documents in S to have similar distributions over topics even though they are modeled independently.FR russie tch´etch´enie union avec russe r´egion IT ho presidente mi perch´e relazione votato lang Topics at P = 0.25 DE rußland russland russischen tschetschenien ukraine EN russia russian chechnya cooperation region belarus FR russie tch´etch´enie avec russe russes situation IT russia unione cooperazione cecenia regione russa We train PLTM with 100 topics on corpora with p E 10.01, 0.05, 0.1, 0.25, 0.5}.We use 1000 iterations of Gibbs sampling with Q = 0.01.Hyperparameters αm are re-estimated every 10 iterations.We calculate the Jensen-Shannon divergence between the topic distributions for each pair of individual documents in S that were originally part of the same tuple prior to separation.The lower the divergence, the more similar the distributions are to each other.From the results in figure 4, we know that leaving all document tuples intact should result in a mean JS divergence of less than 0.1.Table 3 shows mean JS divergences for each value of p. As expected, JS divergence is greater than that obtained when all tuples are left intact.Divergence drops significantly when the proportion of “glue” tuples increases from 0.01 to 0.25.Example topics for p = 0.01 and p = 0.25 are shown in table 4.At p = 0.01 (1% “glue” documents), German and French both include words relating to Russia, while the English and Italian word distributions appear locally consistent but unrelated to Russia.At p = 0.25, the top words for all four languages are related to Russia.These results demonstrate that PLTM is appropriate for aligning topics in corpora that have only a small subset of comparable documents.One area for future work is to explore whether initialization techniques or better representations of topic co-occurrence might result in alignment of topics with a smaller proportion of comparable texts.Although the PLTM is clearly not a substitute for a machine translation system—it has no way to represent syntax or even multi-word phrases—it is clear from the examples in figure 2 that the sets of high probability words in different languages for a given topic are likely to include translations.We therefore evaluate the ability of the PLTM to generate bilingual lexica, similar to other work in unsupervised translation modeling (Haghighi et al., 2008).In the early statistical translation model work at IBM, these representations were called “cepts,” short for concepts (Brown et al., 1993).We evaluate sets of high-probability words in each topic and multilingual “synsets” by comparing them to entries in human-constructed bilingual dictionaries, as done by Haghighi et al. (2008).Unlike previous work (Koehn and Knight, 2002), we evaluate all words, not just nouns.We collected bilingual lexica mapping English words to German, Greek, Spanish, French, Italian, Dutch and Swedish.Each lexicon is a set of pairs consisting of an English word and a translated word, 1we, wt}.We do not consider multi-word terms.We expect that simple analysis of topic assignments for sequential words would yield such collocations, but we leave this for future work.For every topic t we select a small number K of the most probable words in English (e) and in each “translation” language (E): Wte and Wtt, respectively.We then add the Cartesian product of these sets for every topic to a set of candidate translations C. We report the number of elements of C that appear in the reference lexica.Results for K = 1, that is, considering only the single most probable word for each language, are shown in figure 6.Precision at this level is relatively high, above 50% for Spanish, French and Italian with T = 400 and 800.Many of the candidate pairs that were not in the bilingual lexica were valid translations (e.g.EN “comitology” and IT lang Topics at P = 0.01 “comitalogia”) that simply were not in the lexica.We also do not count morphological variants: the model finds EN “rules” and DE “vorschriften,” but the lexicon contains only “rule” and “vorschrift.” Results remain strong as we increase K. With K = 3, T = 800, 1349 of the 7200 candidate pairs for Spanish appeared in the lexicon. topic in different languages translations of each other?The number of such pairs that appear in bilingual lexica is shown on the y-axis.For T = 800, the top English and Spanish words in 448 topics were exact translations of one another.In addition to enhancing lexicons by aligning topic-specific vocabulary, PLTM may also be useful for adapting machine translation systems to new domains by finding translations or near translations in an unstructured corpus.These aligned document pairs could then be fed into standard machine translation systems as training data.To evaluate this scenario, we train PLTM on a set of document tuples from EuroParl, infer topic distributions for a set of held-out documents, and then measure our ability to align documents in one language with their translations in another language.It is not necessarily clear that PLTM will be effective at identifying translations.In finding a lowdimensional semantic representation, topic models deliberately smooth over much of the variation present in language.We are therefore interested in determining whether the information in the document-specific topic distributions is sufficient to identify semantically identical documents.We begin by dividing the data into a training set of 69,550 document tuples and a test set of 17,435 document tuples.In order to make the task more difficult, we train a relatively coarse-grained PLTM with 50 topics on the training set.We then use this model to infer topic distributions for each of the 11 documents in each of the held-out document tuples using a method similar to that used to calculate held-out probabilities (Wallach et al., 2009).Finally, for each pair of languages (“query” and “target”) we calculate the difference between the topic distribution for each held-out document in the query language and the topic distribution for each held-out document in the target language.We use both Jensen-Shannon divergence and cosine distance.For each document in the query language we rank all documents in the target language and record the rank of the actual translation.Results averaged over all query/target language pairs are shown in figure 7 for Jensen-Shannon divergence.Cosine-based rankings are significantly worse.It is important to note that the length of documents matters.As noted before, many of the documents in the EuroParl collection consist of short, formulaic sentences.Restricting the query/target pairs to only those with query and target documents that are both longer than 50 words results in significant improvement and reduced variance: the average proportion of query documents for which the true translation is ranked highest goes from 53.9% to 72.7%.Performance continues to improve with longer documents, most likely due to better topic inference.Results vary by language.Table 5 shows results for all target languages with English as a query language.Again, English generally performs better with Romance languages than Germanic languages.Directly parallel translations are rare in many languages and can be extremely expensive to produce.However, the growth of the web, and in particular Wikipedia, has made comparable text corpora – documents that are topically similar but are not direct translations of one another – considerably more abundant than true parallel corpora.In this section, we explore two questions relating to comparable text corpora and polylingual topic modeling.First, we explore whether comparable document tuples support the alignment of fine-grained topics, as demonstrated earlier using parallel documents.This property is useful for building machine translation systems as well as for human readers who are either learning new languages or analyzing texts in languages they do not know.Second, because comparable texts may not use exactly the same topics, it becomes crucially important to be able to characterize differences in topic prevalence at the document level (do different languages have different perspectives on the same article?) and at the language-wide level (which topics do particular languages focus on?).We downloaded XML copies of all Wikipedia articles in twelve different languages: Welsh, German, Greek, English, Farsi, Finnish, French, Hebrew, Italian, Polish, Russian and Turkish.These versions of Wikipedia were selected to provide a diverse range of language families, geographic areas, and quantities of text.We preprocessed the data by removing tables, references, images and info-boxes.We dropped all articles in non-English languages that did not link to an English article.In the English version of Wikipedia we dropped all articles that were not linked to by any other language in our set.For efficiency, we truncated each article to the nearest word after 1000 characters and dropped the 50 most common word types in each language.Even with these restrictions, the size of the corpus is 148.5 million words.We present results for a PLTM with 400 topics.1000 Gibbs sampling iterations took roughly four days on one CPU with current hardware.As with EuroParl, we can calculate the JensenShannon divergence between pairs of documents within a comparable document tuple.We can then average over all such document-document divergences for each pair of languages to get an overall “disagreement” score between languages.Interestingly, we find that almost all languages in our corpus, including several pairs that have historically been in conflict, show average JS divergences of between approximately 0.08 and 0.12 for T = 400, consistent with our findings for EuroParl translations.Subtle differences of sentiment may be below the granularity of the model. sadwrn blaned gallair at lloeren mytholeg space nasa sojus flug mission διαστημικό sts nasa αγγλ small space mission launch satellite nasa spacecraft sojuz nasa apollo ensimmŠinen space lento spatiale mission orbite mars satellite spatial תינכות א רודכ לל ח ץר אה ללחה spaziale missione programma space sojuz stazione misja kosmicznej stacji misji space nasa космический союз космического спутник станции uzay soyuz ay uzaya salyut sovyetler sbaen madrid el la jos6 sbaeneg de spanischer spanischen spanien madrid la ισπανίας ισπανία de ισπανός ντε μαδρίτη de spanish spain la madrid y espanja de espanjan madrid la real espagnol espagne madrid espagnole juan y de spagna spagnolo spagnola madrid el de hiszpański hiszpanii la juan y де мадрид испании испания испанский de ispanya ispanyol madrid la kOba real bardd gerddi iaith beirdd fardd gymraeg dichter schriftsteller literatur gedichte gedicht werk ποιητής ποίηση ποιητή έργο ποιητές ποιήματα poet poetry literature literary poems poem runoilija kirjailija kirjallisuuden kirjoitti runo julkaisi poste 6crivain litt6rature po6sie litt6raire ses Overall, these scores indicate that although individual pages may show disagreement, Wikipedia is on average consistent between languages.Although we find that if Wikipedia contains an article on a particular subject in some language, the article will tend to be topically similar to the articles about that subject in other languages, we also find that across the whole collection different languages emphasize topics to different extents.To demonstrate the wide variation in topics, we calculated the proportion of tokens in each language assigned to each topic.Figure 8 represents the estimated probabilities of topics given a specific language.Competitive cross-country skiing (left) accounts for a significant proportion of the text in Finnish, but barely exists in Welsh and the languages in the Southeastern region.Meanwhile, interest in actors and actresses (center) is consistent across all languages.Finally, historical topics, such as the Byzantine and Ottoman empires (right) are strong in all languages, but show geographical variation: interest centers around the empires.We introduced a polylingual topic model (PLTM) that discovers topics aligned across multiple languages.We analyzed the characteristics of PLTM in comparison to monolingual LDA, and demonstrated that it is possible to discover aligned topics.We also demonstrated that relatively small numbers of topically comparable document tuples are sufficient to align topics between languages in non-comparable corpora.Additionally, PLTM can support the creation of bilingual lexica for low resource language pairs, providing candidate translations for more computationally intense alignment processes without the sentence-aligned translations typically used in such tasks.When applied to comparable document collections such as Wikipedia, PLTM supports data-driven analysis of differences and similarities across all languages for readers who understand any one language.The authors thank Limin Yao, who was involved in early stages of this project.This work was supported in part by the Center for Intelligent Information Retrieval, in part by The Central Intelligence Agency, the National Security Agency and National Science Foundation under NSF grant number IIS-0326249, and in part by Army prime contract number W911NF-07-1-0216 and University of Pennsylvania subaward number 103548106, and in part by National Science Foundation under NSF grant #CNS-0619337.Any opinions, findings and conclusions or recommendations expressed in this material are the authors’ and do not necessarily reflect those of the sponsor.
Discriminative Instance Weighting for Domain Adaptation in Statistical Machine TranslationWe describe a new approach to SMT adaptation that weights out-of-domain phrase pairs according to their relevance to the target domain, determined by both how similar to it they appear to be, and whether they belong to general language or not.This extends previous work on discriminative weighting by using a finer granularity, focusing on the properties of instances rather than corpus components, and using a simpler training procedure.We incorporate instance weighting into a mixture-model framework, and find that it yields consistent improvements over a wide range of baselines.Domain adaptation is a common concern when optimizing empirical NLP applications.Even when there is training data available in the domain of interest, there is often additional data from other domains that could in principle be used to improve performance.Realizing gains in practice can be challenging, however, particularly when the target domain is distant from the background data.For developers of Statistical Machine Translation (SMT) systems, an additional complication is the heterogeneous nature of SMT components (word-alignment model, language model, translation model, etc.), which precludes a single universal approach to adaptation.In this paper we study the problem of using a parallel corpus from a background domain (OUT) to improve performance on a target domain (IN) for which a smaller amount of parallel training material—though adequate for reasonable performance—is also available.This is a standard adaptation problem for SMT.It is difficult when IN and OUT are dissimilar, as they are in the cases we study.For simplicity, we assume that OUT is homogeneous.The techniques we develop can be extended in a relatively straightforward manner to the more general case when OUT consists of multiple sub-domains.There is a fairly large body of work on SMT adaptation.We introduce several new ideas.First, we aim to explicitly characterize examples from OUT as belonging to general language or not.Previous approaches have tried to find examples that are similar to the target domain.This is less effective in our setting, where IN and OUT are disparate.The idea of distinguishing between general and domain-specific examples is due to Daum´e and Marcu (2006), who used a maximum-entropy model with latent variables to capture the degree of specificity.Daum´e (2007) applies a related idea in a simpler way, by splitting features into general and domain-specific versions.This highly effective approach is not directly applicable to the multinomial models used for core SMT components, which have no natural method for combining split features, so we rely on an instance-weighting approach (Jiang and Zhai, 2007) to downweight domain-specific examples in OUT.Within this framework, we use features intended to capture degree of generality, including the output from an SVM classifier that uses the intersection between IN and OUT as positive examples.Our second contribution is to apply instance weighting at the level of phrase pairs.Sentence pairs are the natural instances for SMT, but sentences often contain a mix of domain-specific and general language.For instance, the sentence Similar improvements in haemoglobin levels were reported in the scientific literature for other epoetins would likely be considered domain-specific despite the presence of general phrases like were reported in.Phrase-level granularity distinguishes our work from previous work by Matsoukas et al (2009), who weight sentences according to sub-corpus and genre membership.Finally, we make some improvements to baseline approaches.We train linear mixture models for conditional phrase pair probabilities over IN and OUT so as to maximize the likelihood of an empirical joint phrase-pair distribution extracted from a development set.This is a simple and effective alternative to setting weights discriminatively to maximize a metric such as BLEU.A similar maximumlikelihood approach was used by Foster and Kuhn (2007), but for language models only.For comparison to information-retrieval inspired baselines, eg (L¨u et al., 2007), we select sentences from OUT using language model perplexities from IN.This is a straightforward technique that is arguably better suited to the adaptation task than the standard method of treating representative IN sentences as queries, then pooling the match results.The paper is structured as follows.Section 2 describes our baseline techniques for SMT adaptation, and section 3 describes the instance-weighting approach.Experiments are presented in section 4.Section 5 covers relevant previous work on SMT adaptation, and section 6 concludes.Standard SMT systems have a hierarchical parameter structure: top-level log-linear weights are used to combine a small set of complex features, interpreted as log probabilities, many of which have their own internal parameters and objectives.The toplevel weights are trained to maximize a metric such as BLEU on a small development set of approximately 1000 sentence pairs.Thus, provided at least this amount of IN data is available—as it is in our setting—adapting these weights is straightforward.We focus here instead on adapting the two most important features: the language model (LM), which estimates the probability p(wIh) of a target word w following an ngram h; and the translation models (TM) p(slt) and p(t1s), which give the probability of source phrase s translating to target phrase t, and vice versa.We do not adapt the alignment procedure for generating the phrase table from which the TM distributions are derived.The natural baseline approach is to concatenate data from IN and OUT.Its success depends on the two domains being relatively close, and on the OUT corpus not being so large as to overwhelm the contribution of IN.When OUT is large and distinct, its contribution can be controlled by training separate IN and OUT models, and weighting their combination.An easy way to achieve this is to put the domain-specific LMs and TMs into the top-level log-linear model and learn optimal weights with MERT (Och, 2003).This has the potential drawback of increasing the number of features, which can make MERT less stable (Foster and Kuhn, 2009).Apart from MERT difficulties, a conceptual problem with log-linear combination is that it multiplies feature probabilities, essentially forcing different features to agree on high-scoring candidates.This is appropriate in cases where it is sanctioned by Bayes’ law, such as multiplying LM and TM probabilities, but for adaptation a more suitable framework is often a mixture model in which each event may be generated from some domain.This leads to a linear combination of domain-specific probabilities, with weights in [0, 1], normalized to sum to 1.Linear weights are difficult to incorporate into the standard MERT procedure because they are “hidden” within a top-level probability that represents the linear combination.1 Following previous work (Foster and Kuhn, 2007), we circumvent this problem by choosing weights to optimize corpus loglikelihood, which is roughly speaking the training criterion used by the LM and TM themselves.For the LM, adaptive weights are set as follows: where α is a weight vector containing an element αi for each domain (just IN and OUT in our case), pi are the corresponding domain-specific models, and ˜p(w, h) is an empirical distribution from a targetlanguage training corpus—we used the IN dev set for this.It is not immediately obvious how to formulate an equivalent to equation (1) for an adapted TM, because there is no well-defined objective for learning TMs from parallel corpora.This has led previous workers to adopt ad hoc linear weighting schemes (Finch and Sumita, 2008; Foster and Kuhn, 2007; L¨u et al., 2007).However, we note that the final conditional estimates p(s|t) from a given phrase table maximize the likelihood of joint empirical phrase pair counts over a word-aligned corpus.This suggests a direct parallel to (1): where ˜p(s, t) is a joint empirical distribution extracted from the IN dev set using the standard procedure.2 An alternative form of linear combination is a maximum a posteriori (MAP) combination (Bacchiani et al., 2004).For the TM, this is: where cI(s, t) is the count in the IN phrase table of pair (s, t), po(s|t) is its probability under the OUT TM, and cI(t) = &quot;s, cI(s', t).This is motivated by taking β po(s|t) to be the parameters of a Dirichlet prior on phrase probabilities, then maximizing posterior estimates p(s|t) given the IN corpus.Intuitively, it places more weight on OUT when less evidence from IN is available.To set β, we used the same criterion as for α, over a dev corpus: The MAP combination was used for TM probabilities only, in part due to a technical difficulty in formulating coherent counts when using standard LM smoothing techniques (Kneser and Ney, 1995).3 Motivated by information retrieval, a number of approaches choose “relevant” sentence pairs from OUT by matching individual source sentences from IN (Hildebrand et al., 2005; L¨u et al., 2007), or individual target hypotheses (Zhao et al., 2004).The matching sentence pairs are then added to the IN corpus, and the system is re-trained.Although matching is done at the sentence level, this information is subsequently discarded when all matches are pooled.To approximate these baselines, we implemented a very simple sentence selection algorithm in which parallel sentence pairs from OUT are ranked by the perplexity of their target half according to the IN language model.The number of top-ranked pairs to retain is chosen to optimize dev-set BLEU score.The sentence-selection approach is crude in that it imposes a binary distinction between useful and non-useful parts of OUT.Matsoukas et al (2009) generalize it by learning weights on sentence pairs that are used when estimating relative-frequency phrase-pair probabilities.The weight on each sentence is a value in [0, 1] computed by a perceptron with Boolean features that indicate collection and genre membership.We extend the Matsoukas et al approach in several ways.First, we learn weights on individual phrase pairs rather than sentences.Intuitively, as suggested by the example in the introduction, this is the right granularity to capture domain effects.Second, rather than relying on a division of the corpus into manually-assigned portions, we use features intended to capture the usefulness of each phrase pair.Finally, we incorporate the instance-weighting model into a general linear combination, and learn weights and mixing parameters simultaneously. where cλ(s, t) is a modified count for pair (s, t) in OUT, u(s|t) is a prior distribution, and y is a prior weight.The original OUT counts co(s, t) are weighted by a logistic function wλ(s, t): To motivate weighting joint OUT counts as in (6), we begin with the “ideal” objective for setting multinomial phrase probabilities 0 = {p(s|t), dst}, which is the likelihood with respect to the true IN distribution pi(s, t).Jiang and Zhai (2007) suggest the following derivation, making use of the true OUT distribution po(s, t): where each fi(s, t) is a feature intended to charac- !0ˆ = argmax pf(s, t) log pθ(s|t) (8) terize the usefulness of (s, t), weighted by Ai. θ s,t pf(s, t)po(s, t) log pθ(s|t) The mixing parameters and feature weights (col- != argmax po (s, t) lectively 0) are optimized simultaneously using dev- θ s,t pf(s, t)co(s, t) log pθ(s|t), set maximum likelihood as before: !�argmax po (s, t) ! θ s,t �ˆ = argmax ˜p(s, t) log p(s|t; 0).(7) φ s,t This is a somewhat less direct objective than used by Matsoukas et al, who make an iterative approximation to expected TER.However, it is robust, efficient, and easy to implement.4 To perform the maximization in (7), we used the popular L-BFGS algorithm (Liu and Nocedal, 1989), which requires gradient information.Dropping the conditioning on 0 for brevity, and letting ¯cλ(s, t) = cλ(s, t) + yu(s|t), and ¯cλ(t) = 4Note that the probabilities in (7) need only be evaluated over the support of ˜p(s, t), which is quite small when this distribution is derived from a dev set.Maximizing (7) is thus much faster than a typical MERT run. where co(s, t) are the counts from OUT, as in (6).This has solutions: where pI(s|t) is derived from the IN corpus using relative-frequency estimates, and po(s|t) is an instance-weighted model derived from the OUT corpus.This combination generalizes (2) and (3): we use either at = a to obtain a fixed-weight linear combination, or at = cI(t)/(cI(t) + 0) to obtain a MAP combination.We model po(s|t) using a MAP criterion over weighted phrase-pair counts: and from the similarity to (5), assuming y = 0, we see that wλ(s, t) can be interpreted as approximating pf(s, t)/po(s, t).The logistic function, whose outputs are in [0, 1], forces pp(s, t) <_ po(s, t).This is not unreasonable given the application to phrase pairs from OUT, but it suggests that an interesting alternative might be to use a plain log-linear weighting function exp(Ei Aifi(s, t)), with outputs in [0, oo].We have not yet tried this.An alternate approximation to (8) would be to let w,\(s, t) directly approximate pˆI(s, t).With the additional assumption that (s, t) can be restricted to the support of co(s, t), this is equivalent to a “flat” alternative to (6) in which each non-zero co(s, t) is set to one.This variant is tested in the experiments below.A final alternate approach would be to combine weighted joint frequencies rather than conditional estimates, ie: cI(s, t) + w,\(s, t)co(, s, t), suitably normalized.5 Such an approach could be simulated by a MAP-style combination in which separate 0(t) values were maintained for each t. This would make the model more powerful, but at the cost of having to learn to downweight OUT separately for each t, which we suspect would require more training data for reliable performance.We have not explored this strategy.We used 22 features for the logistic weighting model, divided into two groups: one intended to reflect the degree to which a phrase pair belongs to general language, and one intended to capture similarity to the IN domain.The 14 general-language features embody straightforward cues: frequency, “centrality” as reflected in model scores, and lack of burstiness.They are: 5We are grateful to an anonymous reviewer for pointing this out.6One of our experimental settings lacks document boundaries, and we used this approximation in both settings for consistency.The 8 similarity-to-IN features are based on word frequencies and scores from various models trained on the IN corpus: To avoid numerical problems, each feature was normalized by subtracting its mean and dividing by its standard deviation.In addition to using the simple features directly, we also trained an SVM classifier with these features to distinguish between IN and OUT phrase pairs.Phrase tables were extracted from the IN and OUT training corpora (not the dev as was used for instance weighting models), and phrase pairs in the intersection of the IN and OUT phrase tables were used as positive examples, with two alternate definitions of negative examples: The classifier trained using the 2nd definition had higher accuracy on a development set.We used it to score all phrase pairs in the OUT table, in order to provide a feature for the instance-weighting model.We carried out translation experiments in two different settings.The first setting uses the European Medicines Agency (EMEA) corpus (Tiedemann, 2009) as IN, and the Europarl (EP) corpus (www.statmt.org/europarl) as OUT, for English/French translation in both directions.The dev and test sets were randomly chosen from the EMEA corpus.Figure 1 shows sample sentences from these domains, which are widely divergent.The second setting uses the news-related subcorpora for the NIST09 MT Chinese to English evaluation8 as IN, and the remaining NIST parallel Chinese/English corpora (UN, Hong Kong Laws, and Hong Kong Hansard) as OUT.The dev corpus was taken from the NIST05 evaluation set, augmented with some randomly-selected material reserved from the training set.The NIST06 and NIST08 evaluation sets were used for testing.(Thus the domain of the dev and test corpora matches IN.)Compared to the EMEA/EP setting, the two domains in the NIST setting are less homogeneous and more similar to each other; there is also considerably more IN text available.The corpora for both settings are summarized in table 1.The reference medicine for Silapo is EPREX/ERYPO, which contains epoetin alfa.Le m´edicament de r´ef´erence de Silapo est EPREX/ERYPO, qui contient de l’´epo´etine alfa.— I would also like to point out to commissioner Liikanen that it is not easy to take a matter to a national court.Je voudrais pr´eciser, a` l’adresse du commissaire Liikanen, qu’il n’est pas ais´e de recourir aux tribunaux nationaux.We used a standard one-pass phrase-based system (Koehn et al., 2003), with the following features: relative-frequency TM probabilities in both directions; a 4-gram LM with Kneser-Ney smoothing; word-displacement distortion model; and word count.Feature weights were set using Och’s MERT algorithm (Och, 2003).The corpus was wordaligned using both HMM and IBM2 models, and the phrase table was the union of phrases extracted from these separate alignments, with a length limit of 7.It was filtered to retain the top 30 translations for each source phrase using the TM part of the current log-linear model.Table 2 shows results for both settings and all methods described in sections 2 and 3.The 1st block contains the simple baselines from section 2.1.The natural baseline (baseline) outperforms the pure IN system only for EMEA/EP fren.Log-linear combination (loglin) improves on this in all cases, and also beats the pure IN system.The 2nd block contains the IR system, which was tuned by selecting text in multiples of the size of the EMEA training corpus, according to dev set performance.This significantly underperforms log-linear combination.The 3rd block contains the mixture baselines.The linear LM (lin lm), TM (lin tm) and MAP TM (map tm) used with non-adapted counterparts perform in all cases slightly worse than the log-linear combination, which adapts both LM and TM components.However, when the linear LM is combined with a linear TM (lm+lin tm) or MAP TM (lm+map TM), the results are much better than a log-linear combination for the EMEA setting, and on a par for NIST.This is consistent with the nature of these two settings: log-linear combination, which effectively takes the intersection of IN and OUT, does relatively better on NIST, where the domains are broader and closer together.Somewhat surprisingly, there do not appear to be large systematic differences between linear and MAP combinations.The 4th block contains instance-weighting models trained on all features, used within a MAP TM combination, and with a linear LM mixture.The iw all map variant uses a non-0 y weight on a uniform prior in p,,(s t), and outperforms a version with y = 0 (iw all) and the “flattened” variant described in section 3.2.Clearly, retaining the original frequencies is important for good performance, and globally smoothing the final weighted frequencies is crucial.This best instance-weighting model beats the equivalant model without instance weights by between 0.6 BLEU and 1.8 BLEU, and beats the log-linear baseline by a large margin.The final block in table 2 shows models trained on feature subsets and on the SVM feature described in 3.4.The general-language features have a slight advantage over the similarity features, and both are better than the SVM feature.We have already mentioned the closely related work by Matsoukas et al (2009) on discriminative corpus weighting, and Jiang and Zhai (2007) on (nondiscriminative) instance weighting.It is difficult to directly compare the Matsoukas et al results with ours, since our out-of-domain corpus is homogeneous; given heterogeneous training data, however, it would be trivial to include Matsoukas-style identity features in our instance-weighting model.Although these authors report better gains than ours, they are with respect to a non-adapted baseline.Finally, we note that Jiang’s instance-weighting framework is broader than we have presented above, encompassing among other possibilities the use of unlabelled IN data, which is applicable to SMT settings where source-only IN corpora are available.It is also worth pointing out a connection with Daum´e’s (2007) work that splits each feature into domain-specific and general copies.At first glance, this seems only peripherally related to our work, since the specific/general distinction is made for features rather than instances.However, for multinomial models like our LMs and TMs, there is a one to one correspondence between instances and features, eg the correspondence between a phrase pair (s, t) and its conditional multinomial probability p(s1t).As mentioned above, it is not obvious how to apply Daum´e’s approach to multinomials, which do not have a mechanism for combining split features.Recent work by Finkel and Manning (2009) which re-casts Daum´e’s approach in a hierarchical MAP framework may be applicable to this problem.Moving beyond directly related work, major themes in SMT adaptation include the IR (Hildebrand et al., 2005; L¨u et al., 2007; Zhao et al., 2004) and mixture (Finch and Sumita, 2008; Foster and Kuhn, 2007; Koehn and Schroeder, 2007; L¨u et al., 2007) approaches for LMs and TMs described above, as well as methods for exploiting monolingual in-domain text, typically by translating it automatically and then performing self training (Bertoldi and Federico, 2009; Ueffing et al., 2007; Schwenk and Senellart, 2009).There has also been some work on adapting the word alignment model prior to phrase extraction (Civera and Juan, 2007; Wu et al., 2005), and on dynamically choosing a dev set (Xu et al., 2007).Other work includes transferring latent topic distributions from source to target language for LM adaptation, (Tam et al., 2007) and adapting features at the sentence level to different categories of sentence (Finch and Sumita, 2008).In this paper we have proposed an approach for instance-weighting phrase pairs in an out-of-domain corpus in order to improve in-domain performance.Each out-of-domain phrase pair is characterized by a set of simple features intended to reflect how useful it will be.The features are weighted within a logistic model to give an overall weight that is applied to the phrase pair’s frequency prior to making MAP-smoothed relative-frequency estimates (different weights are learned for each conditioning direction).These estimates are in turn combined linearly with relative-frequency estimates from an in-domain phrase table.Mixing, smoothing, and instance-feature weights are learned at the same time using an efficient maximum-likelihood procedure that relies on only a small in-domain development corpus.We obtained positive results using a very simple phrase-based system in two different adaptation settings: using English/French Europarl to improve a performance on a small, specialized medical domain; and using non-news portions of the NIST09 training material to improve performance on the news-related corpora.In both cases, the instanceweighting approach improved over a wide range of baselines, giving gains of over 2 BLEU points over the best non-adapted baseline, and gains of between 0.6 and 1.8 over an equivalent mixture model (with an identical training procedure but without instance weighting).In future work we plan to try this approach with more competitive SMT systems, and to extend instance weighting to other standard SMT components such as the LM, lexical phrase weights, and lexicalized distortion.We will also directly compare with a baseline similar to the Matsoukas et al approach in order to measure the benefit from weighting phrase pairs (or ngrams) rather than full sentences.Finally, we intend to explore more sophisticated instanceweighting features for capturing the degree of generality of phrase pairs.
An Efficient Implementation of a New DOP ModelTwo apparently opposing DOP models exist in the literature: one which computes the parse tree involving the most frequent subtrees from a treebank and one which computes the parse tree involving the fewest subtrees from a treebank.This paper proposes an integration of the two models which outperforms each of them separately.Together with a PCFGreduction of DOP we obtain improved accuracy and efficiency on the Wall Street Journal treebank Our results show an 11% relative reduction in error rate over previous models, and an average processing time of 3.6 seconds per WSJ sentence.The distinctive feature of the DOP approach when it was proposed in 1992 was to model sentence structures on the basis of previously observed frequencies of sentence structure fragments, without imposing any constraints on the size of these fragments.Fragments include, for instance, subtrees of depth 1 (corresponding to context-free rules) as well as entire trees.To appreciate these innovations, it should be noted that the model was radically different from all other statistical parsing models at the time.Other models started off with a predefined grammar and used a corpus only for estimating the rule probabilities (as e.g.in Fujisaki et al. 1989; Black et al.1992, 1993; Briscoe and I Thanks to Ivan Sag for this pun.Waegner 1992; Pereira and Schabes 1992).The DOP model, on the other hand, was the first model (to the best of our knowledge) that proposed not to train a predefined grammar on a corpus, but to directly use corpus fragments as a grammar.This approach has now gained wide usage, as exemplified by the work of Collins (1996, 1999), Charniak (1996, 1997), Johnson (1998), Chiang (2000), and many others.The other innovation of DOP was to take (in principle) all corpus fragments, of any size, rather than a small subset.This innovation has not become generally adopted yet: many approaches still work either with local trees, i.e. single level rules with limited means of information percolation, or with restricted fragments, as in Stochastic Tree-Adjoining Grammar (Schabes 1992; Chiang 2000) that do not include nonlexicalized fragments.However, during the last few years we can observe a shift towards using more and larger corpus fragments with fewer restrictions.While the models of Collins (1996) and Eisner (1996) restricted the fragments to the locality of head-words, later models showed the importance of including context from higher nodes in the tree (Charniak 1997; Johnson 1998a).The importance of including nonheadwords has become uncontroversial (e.g.Collins 1999; Charniak 2000; Goodman 1998).And Collins (2000) argues for &quot;keeping track of counts of arbitrary fragments within parse trees&quot;, which has indeed been carried out in Collins and Duffy (2002) who use exactly the same set of (all) tree fragments as proposed in Bod (1992).Thus the major innovations of DOP are: 2. the use of arbitrarily large fragments rather than restricted ones Both have gained or are gaining wide usage, and are also becoming relevant for theoretical linguistics (see Bod et al. 2003a).One instantiation of DOP which has received considerable interest is the model known as DOP12 (Bod 1992).DOP1 combines subtrees from a treebank by means of node-substitution and computes the probability of a tree from the normalized frequencies of the subtrees (see Section 2 for a full definition).Bod (1993) showed how standard parsing techniques can be applied to DOP1 by converting subtrees into rules.However, the problem of computing the most probable parse turns out to be NP-hard (Sima'an 1996), mainly because the same parse tree can be generated by exponentially many derivations.Many implementations of DOP1 therefore estimate the most probable parse by Monte Carlo techniques (Bod 1998; Chappelier & Rajman 2000), or by Viterbi n-best search (Bod 2001), or by restricting the set of subtrees (Sima'an 1999; Chappelier et al. 2002).Sima'an (1995) gave an efficient algorithm for computing the parse tree generated by the most probable derivation, which in some cases is a reasonable approximation of the most probable parse.Goodman (1996, 1998) developed a polynomial time PCFG-reduction of DOP1 whose size is linear in the size of the training set, thus converting the exponential number of subtrees to a compact grammar.While Goodman's method does still not allow for an efficient computation of the most probable parse in DOP1, it does efficiently compute the &quot;maximum constituents parse&quot;, i.e. the parse tree which is most likely to have the largest number of correct constituents.Johnson (1998b, 2002) showed that DOP1's subtree estimation method is statistically biased and inconsistent.Bod (2000a) solved this problem by training the subtree probabilities by a maximum likelihood procedure based on Expectation-Maximization.This resulted in a statistically consistent model dubbed ML-DOP.However, ML-DOP suffers from overlearning if the subtrees are trained on the same treebank trees as they are derived from.Cross-validation is needed to avoid this problem.But even with cross-validation, ML-DOP is outperformed by the much simpler DOP1 model on both the ATIS and OVIS treebanks (Bod 2000b).Bonnema et al. (1999) observed that another problem with DOP1's subtree-estimation method is that it provides more probability to nodes with more subtrees, and therefore more probability to larger subtrees.As an alternative, Bonnema et al. (1999) propose a subtree estimator which reduces the probability of a tree by a factor of two for each non-root non-terminal it contains.Bod (2001) used an alternative technique which samples a fixed number of subtrees of each depth and which has the effect of assigning roughly equal weight to each node in the training data.Although Bod's method obtains very competitive results on the Wall Street Journal (WSJ) task, the parsing time was reported to be over 200 seconds per sentence (Bod 2003).Collins & Duffy (2002) showed how the perceptron algorithm can be used to efficiently compute the best parse with DOP1's subtrees, reporting a 5.1% relative reduction in error rate over the model in Collins (1999) on the WSJ.Goodman (2002) furthermore showed how Bonnema et al. 's (1999) and Bod's (2001) estimators can be incorporated in his PCFGreduction, but did not report any experiments with these reductions.This paper presents the first published results with Goodman's PCFG-reductions of both Bonnema et al. 's (1999) and Bod's (2001) estimators on the WSJ.We show that these PCFG-reductions result in a 60 times speedup in processing time w.r.t.Bod (2001, 2003).But while Bod's estimator obtains state-of-the-art results on the WSJ, comparable to Charniak (2000) and Collins (2000), Bonnema et al. 's estimator performs worse and is comparable to Collins (1996).In the second part of this paper, we extend our experiments with a new notion of the best parse tree.Most previous notions of best parse tree in DOP1 were based on a probabilistic metric, with Bod (2000b) as a notable exception, who used a simplicity metric based on the shortest derivation.We show that a combination of a probabilistic and a simplicity metric, which chooses the simplest parse from the n likeliest parses, outperforms the use of these metrics alone.Compared to Bod (2001), our results show an 11% improvement in terms of relative error reduction and a speedup which reduces the processing time from 220 to 3.6 seconds per WSJ sentence.DOP1 parses new input by combining treebanksubtrees by means of a leftmost node-subsitution operation, indicated as 0.The probability of a parse tree is computed from the occurrencefrequencies of the subtrees in the treebank.That is, the probability of a subtree t is taken as the number of occurrences of t in the training set, I t I, divided by the total number of occurrences of all subtrees t' with the same root label as t. Let r(t) return the root label of t: The probability of a derivation ti0...0tn is computed by the product of the probabilities of its subtrees ti: = HP (t1) An important feature of DOP1 is that there may be several derivations that generate the same parse tree.The probability of a parse tree T is the sum of the probabilities of its distinct derivations.Let tid be the i-th subtree in the derivation d that produces tree T, then the probability of T is given by Thus DOP1 considers counts of subtrees of a wide range of sizes in computing the probability of a tree: everything from counts of single-level rules to counts of entire trees.A disadvantage of this model is that an extremely large number of subtrees (and derivations) must be taken into account.Fortunately, there exists a compact PCFG-reduction of DOP1 that generates the same trees with the same probabilities, as shown by Goodman (1996, 2002).Here we will only sketch this PCFG-reduction, which is heavily based on Goodman (2002).Goodman assigns every node in every tree a unique number which is called its address.The notation A@k denotes the node at address k where A is the nonterminal labeling that node.A new nonterminal is created for each node in the training data.This nonterminal is called A k. Nonterminals of this form are called &quot;interior&quot; nonterminals, while the original nonterminals in the parse trees are called &quot;exterior&quot; nontermimals.Let aj represent the number of subtrees headed by the node A@j.Let a represent the number of subtrees headed by nodes with nonterminal A, that is a =Ej aj.Goodman (1996, 2002) further illustrates this by a node A @j of the following form: To see how many subtrees it has, Goodman first considers the possibilities of the left branch.There are bk non-trivial subtrees headed by B@k, and there is also the trivial case where the left node is simply B.Thus there are bk + 1 different possibilities on the left branch.Similarly, there are ci + 1 possibilities on the right branch.We can create a subtree by choosing any possible left subtree and any possible right subtree.Thus, there are aj= (bk+ 1)(ci + 1) possible subtrees headed by A @j. Goodman then gives a simple small PCFG with the following property: for every subtree in the training corpus headed by A, the grammar will generate an isomorphic subderivation with probability 1/a.Thus, rather than using the large, explicit DOP1 model, one can also use this small PCFG that generates isomorphic derivations, with identical probabilities.Goodman's construction is as follows.For the node in figure 1, the following eight PCFG rules are generated, where the number in parentheses following a rule is its probability.Goodman then shows by simple induction that subderivations headed by A with external nonterminals at the roots and leaves, internal nonterminals elsewhere have probability 1/a.And subderivations headed by A1 with external nonterminals only at the leaves, internal nonterminals elsewhere, have probability 1/a1 (Goodman 1996).Goodman's main theorem is that this construction produces PCFG derivations isomorphic to DOP derivations with equal probability.This means that summing up over derivations of a tree in DOP yields the same probability as summing over all the isomorphic derivations in the PCFG.Note that Goodman's reduction method does still not allow for an efficient computation of the most probable parse tree of a sentence: there may still be exponentially many derivations generating the same tree.But Goodman shows that with his PCFG-reduction he can efficiently compute the aforementioned maximum constituents parse.Moreover, Goodman's PCFG reduction may also be used to estimate the most probable parse by Viterbi n-best search which computes the n most likely derivations and then sums up the probabilities of the derivations producing the same tree.While Bod (2001) needed to use a very large sample from the WSJ subtrees to do this, Goodman's method can do the same job with a more compact grammar.DOP1 has a serious bias: its subtree estimator provides more probability to nodes with more subtrees (Bonnema et al. 1999).The amount of probability given to two different training nodes depends on how many subtrees they have, and, given that the number of subtrees is an exponential function, this means that some training nodes could easily get hundreds or thousands of times the weight of others, even if both occur exactly once.Bonnema et al. (1999) show that as a consequence too much weight is given to larger subtrees, and that the parse accuracy of DOP1 deteriorates if (very) large subtrees are included.Although this property may not be very harmful for small corpora with relatively small trees, such as the ATIS, Bonnema et al. give evidence that it leads to severe biases for larger corpora such as the WSJ.There are several ways to fix this problem.For example, Bod (2001) samples a fixed number of subtrees of each depth, which has the effect of assigning roughly equal weight to each node in the training data, and roughly exponentially less probability for larger trees (see Goodman 2002: 12).Bod reports state-of-the-art results with this method, and observes no decrease in parse accuracy when larger subtrees are included (using subtrees up to depth 14).Yet, his grammar contains more than 5 million subtrees and processing times of over 200 seconds per WSJ sentence are reported (Bod 2003).In this paper, we will test a simple extension of Goodman's compact PCFG-reduction of DOP which has the same property as the normalization proposed in Bod (2001) in that it assigns roughly equal weight to each node in the training data.Let a be the number of times nonterminals of type A occur in the training data.Then we slightly modify the PCFG-reduction in figure 2 as follows: We will also test the proposal by Bonnema et al. (1999) which reduces the probability of a subtree by a factor of two for each non-root nonterminal it contains.It easy to see that this is equivalent to reducing the probability of a tree by a factor of four for each pair of nonterminals it contains, resulting in the PCFG reduction in figure 4.Tested on the OVIS corpus, Bonnema et al. 's proposal obtains results that are comparable to Sima'an (1999) -- see Bonnema et al.(1999).This paper presents the first published results with this estimator on the WSJ.By using these PCFG-reductions we can thus parse with all subtrees in polynomial time.However, as mentioned above, efficient parsing does not necessarily mean efficient disambiguation: the exact computation of the most probable parse remains exponential.In this paper, we will estimate the most probable parse by computing the 10,000 most probable derivations by means of Viterbi n-best, from which the most likely parse is estimated by summing up the probabilities of the derivations that generate the same parse.Most DOP models, such as in Bod (1993), Goodman (1996), Bonnema et al. (1997), Sima'an (2000) and Collins & Duffy (2002), use a likelihood criterion in defining the best parse tree: they take (some notion of) the most likely (i.e. most probable) tree as a candidate for the best tree of a sentence.We will refer to these models as Likelihood-DOP models, but in this paper we will specifically mean by &quot;Likelihood-DOP&quot; the PCFG-reduction of Bod (2001) given in Section 2.2.In Bod (2000b), an alternative notion for the best parse tree was proposed based on a simplicity criterion: instead of producing the most probable tree, this model produced the tree generated by the shortest derivation with the fewest training subtrees.We will refer to this model as Simplicity-DOP.In case the shortest derivation is not unique, Bod (2000b) proposes to back off to a frequency ordering of the subtrees.That is, all subtrees of each root label are assigned a rank according to their frequency in the treebank: the most frequent subtree (or subtrees) of each root label gets rank 1, the second most frequent subtree gets rank 2, etc.Next, the rank of each (shortest) derivation is computed as the sum of the ranks of the subtrees involved.The derivation with the smallest sum, or highest rank, is taken as the final best derivation producing the best parse tree in Simplicity-DOP.3 Although Bod (2000b) reports that Simplicity DOP is outperformed by Likelihood-DOP, its results are still rather impressive for such a simple model.What is more important, is, that the best parse trees predicted by Simplicity-DOP are quite different from the best parse trees predicted by Likelihood-DOP.This suggests that a model which combines these two notions of best parse may boost the accuracy.The underlying idea of combining LikelihoodDOP and Simplicity-DOP is that the parser selects the simplest tree from among the n most probable trees, where n is a free parameter.A straightforward alternative would be to select the most probable tree from among the n simplest trees.We will refer to the first combination (which selects the simplest among the n likeliest trees) as Simplicity-Likelihood-DOP or SL-DOP, and to the second combination (which selects the likeliest among the n simplest trees) as Likelihood-Simplicity-DOP or LS-DOP.Note that for n=1, SL-DOP is equal to Likelihood-DOP, since there is only one most probable tree to select from, and LS-DOP is equal to Simplicity-DOP, since there is only one simplest tree to select from.Moreover, if n gets large, SL-DOP converges to Simplicity-DOP while LS-DOP converges to Likelihood-DOP.By varying the parameter n, we will be able to compare Likelihood-DOP, Simplicity-DOP and several instantiations of SL-DOP and LS-DOP.Note that Goodman's PCFG-reduction method summarized in Section 2 applies not only to Likelihood-DOP but also to Simplicity-DOP.The only thing that needs to be changed for Simplicity-DOP is that all subtrees should be assigned equal probabilities.Then the shortest derivation is equal to the most probable derivation and can be computed by standard Viterbi optimization, which can be seen as follows: if each subtree has a probability p then the probability of a derivation involving n subtrees is equal to pn, and since 0<p<1, the derivation with the fewest subtrees has the greatest probability.For SL-DOP and LS-DOP, we first compute either n likeliest or n simplest trees by means of Viterbi optimization.Next, we either select the simplest tree among the n likeliest ones (for SL DOP) or the likeliest tree among the n simplest ones (for LS-DOP).In our experiments, n will never be larger than 1,000.For our experiments we used the standard division of the WSJ (Marcus et al. 1993), with sections 2 through 21 for training (approx.40,000 sentences) and section 23 for testing (2416 sentences 100 words); section 22 was used as development set.As usual, all trees were stripped off their semantic tags, co-reference information and quotation marks.Without loss of generality, all trees were converted to binary branching (and were reconverted to n-ary trees after parsing).We employed the same unknown (category) word model as in Bod (2001), based on statistics on word-endings, hyphenation and capitalization in combination with Good-Turing (Bod 1998: 85 87).We used &quot;evalb&quot;4 to compute the standard PARSEVAL scores for our results (Manning & Schiitze 1999).We focused on the Labeled Precision (LP) and Labeled Recall (LR) scores, as these are commonly used to rank parsing systems.Our first experimental goal was to compare the two PCFG-reductions in Section 2.2, which we will refer to resp. as Bod01 and Bon99.Table 1 gives the results of these experiments and compares them with some other statistical parsers (resp.Collins 1996, Charniak 1997, Collins 1999 and Charniak 2000).While the PCFG reduction of Bod (2001) obtains state-of-the-art results on the WSJ, comparable to Charniak (2000), Bonnema et al. 's estimator performs worse and is comparable to Collins (1996).As to the processing time, the PCFG reduction parses each sentence 100 words) in 3.6 seconds average, while the parser in Bod (2001, 2003), which uses over 5 million subtrees, is reported to take about 220 seconds per sentence.This corresponds to a speedup of over 60 times.It should be mentioned that the best precision and recall scores reported in Bod (2001) are slightly better than the ones reported here (the difference is only 0.2% for sentences 100 words).This may be explained by the fact our best results in Bod (2001) were obtained by testing various subtree restrictions until the highest accuracy was obtained, while in the current experiment we used all subtrees as given by the PCFG-reduction.In the following section first results of SL-DOP and LS-DOP with a compact PCFG-reduction. we will see that our new definition of best parse tree also outperforms the best results obtained in Bod (2001).As our second experimental goal, we compared the models SL-DOP and LS-DOP explained in Section 3.2.Recall that for n=1, SL-DOP is equal to the PCFG-reduction of Bod (2001) (which we also called Likelihood-DOP) while LS-DOP is equal to Simplicity-DOP.Table 2 shows the results for sentences 100 words for various values of n. Note that there is an increase in accuracy for both SL-DOP and LS-DOP if the value of n increases from 1 to 12.But while the accuracy of SL-DOP decreases after n=14 and converges to Simplicity DOP, the accuracy of LS-DOP continues to increase and converges to Likelihood-DOP.The highest accuracy is obtained by SL-DOP at 12 n 14: an LP of 90.8% and an LR of 90.7%.This is roughly an 11% relative reduction in error rate over Charniak (2000) and Bods PCFG-reduction reported in Table 1.Compared to the reranking technique in Collins (2000), who obtained an LP of 89.9% and an LR of 89.6%, our results show a 9% relative error rate reduction.While SL-DOP and LS-DOP have been compared before in Bod (2002), especially in the context of musical parsing, this paper presents the The DOP approach is based on two distinctive features: (1) the use of corpus fragments rather than grammar rules, and (2) the use of arbitrarily large fragments rather than restricted ones.While the first feature has been generally adopted in statistical NLP, the second feature has for a long time been a serious bottleneck, as it results in exponential processing time when the most probable parse tree is computed.This paper showed that a PCFG-reduction of DOP in combination with a new notion of the best parse tree results in fast processing times and very competitive accuracy on the Wall Street Journal treebank.This paper also re-affirmed that the coarsegrained approach of using all subtrees from a treebank outperforms the fine-grained approach of specifically modeling lexical-syntactic depen dencies (as e.g. in Collins 1999 and Charniak 2000).
Probabilistic Top-Down Parsing and Language ModelingThis paper describes the functioning of a broad-coverage probabilistic top-down parser, and its application to the problem of language modeling for speech recognition.The paper first introduces key notions in language modeling and probabilistic parsing, and briefly reviews some previous approaches to using syntactic structure for language modeling.A lexicalized probabilistic topdown parser is then presented, which performs very well, in terms of both the accuracy of returned parses and the efficiency with which they are found, relative to the best broad-coverage statistical parsers.A new language model that utilizes probabilistic top-down parsing is then outlined, and empirical results show that it improves upon previous work in test corpus perplexity.Interpolation with a trigram model yields an exceptional improvement relative to the improvement observed by other models, demonstrating the degree to which the information captured by our parsing model is orthogonal to that captured by a trigram model.A small recognition experiment also demonstrates the utility of the model.This paper describes the functioning of a broad-coverage probabilistic top-down parser, and its application to the problem of language modeling for speech recognition.The paper first introduces key notions in language modeling and probabilistic parsing, and briefly reviews some previous approaches to using syntactic structure for language modeling.A lexicalized probabilistic topdown parser is then presented, which performs very well, in terms of both the accuracy of returned parses and the efficiency with which they are found, relative to the best broad-coverage statistical parsers.A new language model that utilizes probabilistic top-down parsing is then outlined, and empirical results show that it improves upon previous work in test corpus perplexity.Interpolation with a trigram model yields an exceptional improvement relative to the improvement observed by other models, demonstrating the degree to which the information captured by our parsing model is orthogonal to that captured by a trigram model.A small recognition experiment also demonstrates the utility of the model.With certain exceptions, computational linguists have in the past generally formed a separate research community from speech recognition researchers, despite some obvious overlap of interest.Perhaps one reason for this is that, until relatively recently, few methods have come out of the natural language processing community that were shown to improve upon the very simple language models still standardly in use in speech recognition systems.In the past few years, however, some improvements have been made over these language models through the use of statistical methods of natural language processing, and the development of innovative, linguistically well-motivated techniques for improving language models for speech recognition is generating more interest among computational linguists.While language models built around shallow local dependencies are still the standard in state-of-the-art speech recognition systems, there is reason to hope that better language models can and will be developed by computational linguists for this task.This paper will examine language modeling for speech recognition from a natural language processing point of view.Some of the recent literature investigating approaches that use syntactic structure in an attempt to capture long-distance dependencies for language modeling will be reviewed.A new language model, based on probabilistic top-down parsing, will be outlined and compared with the previous literature, and extensive empirical results will be presented which demonstrate its utility.Two features of our top-down parsing approach will emerge as key to its success.First, the top-down parsing algorithm builds a set of rooted candidate parse trees from left to right over the string, which allows it to calculate a generative probability for each prefix string from the probabilistic grammar, and hence a conditional probability for each word given the previous words and the probabilistic grammar.A left-toright parser whose derivations are not rooted, i.e., with derivations that can consist of disconnected tree fragments, such as an LR or shift-reduce parser, cannot incrementally calculate the probability of each prefix string being generated by the probabilistic grammar, because their derivations include probability mass from unrooted structures.Only at the point when their derivations become rooted (at the end of the string) can generative string probabilities be calculated from the grammar.These parsers can calculate word probabilities based upon the parser state—as in Chelba and Jelinek (1998a)—but such a distribution is not generative from the probabilistic grammar.A parser that is not left to right, but which has rooted derivations, e.g., a headfirst parser, will be able to calculate generative joint probabilities for entire strings; however, it will not be able to calculate probabilities for each word conditioned on previously generated words, unless each derivation generates the words in the string in exactly the same order.For example, suppose that there are two possible verbs that could be the head of a sentence.For a head-first parser, some derivations will have the first verb as the head of the sentence, and the second verb will be generated after the first; hence the second verb's probability will be conditioned on the first verb.Other derivations will have the second verb as the head of the sentence, and the first verb's probability will be conditioned on the second verb.In such a scenario, there is no way to decompose the joint probability calculated from the set of derivations into the product of conditional probabilities using the chain rule.Of course, the joint probability can be used as a language model, but it cannot be interpolated on a word-by-word basis with, say, a trigram model, which we will demonstrate is a useful thing to do.Thus, our top-down parser allows for the incremental calculation of generative conditional word probabilities, a property it shares with other left-to-right parsers with rooted derivations such as Earley parsers (Earley 1970) or left-corner parsers (Rosenkrantz and Lewis 11 1970).A second key feature of our approach is that top-down guidance improves the efficiency of the search as more and more conditioning events are extracted from the derivation for use in the probabilistic model.Because the rooted partial derivation is fully connected, all of the conditioning information that might be extracted from the top-down left context has already been specified, and a conditional probability model built on this information will not impose any additional burden on the search.In contrast, an Earley or left-corner parser will underspecify certain connections between constituents in the left context, and if some of the underspecified information is used in the conditional probability model, it will have to become specified.Of course, this can be done, but at the expense of search efficiency; the more that this is done, the less benefit there is from the underspecification.A top-down parser will, in contrast, derive an efficiency benefit from precisely the information that is underspecified in these other approaches.Thus, our top-down parser makes it very easy to condition the probabilistic grammar on an arbitrary number of values extracted from the rooted, fully specified derivation.This has lead us to a formulation of the conditional probability model in terms of values returned from tree-walking functions that themselves are contextually sensitive.The top-down guidance that is provided makes this approach quite efficient in practice.The following section will provide some background in probabilistic context-free grammars and language modeling for speech recognition.There will also be a brief review of previous work using syntactic information for language modeling, before we introduce our model in Section 4.Three parse trees: (a) a complete parse tree; (b) a complete parse tree with an explicit stop symbol; and (c) a partial parse tree.This section will introduce probabilistic (or stochastic) context-free grammars (PCFGs), as well as such notions as complete and partial parse trees, which will be important in defining our language model later in the paper.'In addition, we will explain some simple grammar transformations that will be used.Finally, we will explain the notion of c-command, which will be used extensively later as well.PCFGs model the syntactic combinatorics of a language by extending conventional context-free grammars (CFGs).A CFG G = (V,T,P, St), consists of a set of nonterminal symbols V, a set of terminal symbols T, a start symbol St E V, and a set of rule productions P of the form: A a, where a E (VU T)*.These context-free rules can be interpreted as saying that a nonterminal symbol A expands into one or more either nonterminal or terminal symbols, a X0 ... Xk.2 A sequence of context-free rule expansions can be represented in a tree, with parents expanding into one or more children below them in the tree.Each of the individual local expansions in the tree is a rule in the CFG.Nodes in the tree with no children are called leaves.A tree whose leaves consist entirely of terminal symbols is complete.Consider, for example, the parse tree shown in (a) in Figure 1: the start symbol is St, which expands into an S. The S node expands into an NP followed by a VP.These nonterminal nodes each in turn expand, and this process of expansion continues until the tree generates the terminal string, &quot;Spot chased the ball&quot;, as leaves.A CFG G defines a language LG, which is a subset of the set of strings of terminal symbols, including only those that are leaves of complete trees rooted at St, built with rules from the grammar G. We will denote strings either as w or as wowi .• • wn, where wn is understood to be the last terminal symbol in the string.For simplicity in displaying equations, from this point forward let w/ be the substring wj.Let Twg be the set of all complete trees rooted at the start symbol, with the string of terminals zug as leaves.We call Tzq the set of complete parses of wg.A PCFG is a CFG with a probability assigned to each rule; specifically, each righthand side has a probability given the left-hand side of the rule.The probability of a parse tree is the product of the probabilities of each rule in the tree.Provided a PCFG is consistent (or tight), which it always will be in the approach we will be advocating, this defines a proper probability distribution over completed trees.'A PCFG also defines a probability distribution over strings of words (terminals) in the following way: The intuition behind Equation 1 is that, if a string is generated by the PCFG, then it will be produced if and only if one of the trees in the set Tzq generated it.Thus the probability of the string is the probability of the set Twg, i.e., the sum of its members' probabilities.Up to this point, we have been discussing strings of words without specifying whether they are &quot;complete&quot; strings or not.We will adopt the convention that an explicit beginning of string symbol, (s), and an explicit end symbol, (/s), are part of the vocabulary, and a string wg is a complete string if and only if Tao is (s) and tv, is (/s).Since the beginning of string symbol is not predicted by language models, but rather is axiomatic in the same way that St is for a parser, we can safely omit it from the current discussion, and simply assume that it is there.See Figure 1(b) for the explicit representation.While a complete string of words must contain the end symbol as its final word, a string prefix does not have this restriction.For example, &quot;Spot chased the ball (/s)&quot; is a complete string, and the following is the set of prefix strings of this complete string: &quot;Spot&quot;; &quot;Spot chased&quot;; &quot;Spot chased the&quot;; &quot;Spot chased the ball&quot;; and &quot;Spot chased the ball Us}&quot;.A PCFG also defines a probability distribution over string prefixes, and we will present this in terms of partial derivations.A partial derivation (or parse) d is defined with respect to a prefix string w as follows: it is the leftmost derivation of the string, with wj on the right-hand side of the last expansion in the derivation.'Let Dw, be the set of all partial derivations for a prefix string 4.Then We left-factor the PCFG, so that all productions are binary, except those with a single terminal on the right-hand side and epsilon productions.'We do this because it delays predictions about what nonterminals we expect later in the string until we have seen more of the string.In effect, this is an underspecification of some of the predictions that our top-down parser is making about the rest of the string.The leftfactorization transform that we use is identical to what is called right binarization in Roark and Johnson (1999).See that paper for more discussion of the benefits of Two parse trees: (a) a complete left-factored parse tree with epsilon productions and an explicit stop symbol; and (b) a partial left-factored parse tree. factorization for top-down and left-corner parsing.For a grammar G, we define a factored grammar Gf as follows: We can see the effect of this transform on our example parse trees in Figure 2.This underspecification of the nonterminal predictions (e.g., VP-VBD in the example in Figure 2, as opposed to NP), allows lexical items to become part of the left context, and so be used to condition production probabilities, even the production probabilities of constituents that dominate them in the unfactored tree.It also brings words further downstream into the look-ahead at the point of specification.Note that partial trees are defined in exactly the same way (Figure 2b), but that the nonterminal yields are made up exclusively of the composite nonterminals introduced by the grammar transform.This transform has a couple of very nice properties.First, it is easily reversible, i.e., every parse tree built with Gf corresponds to a unique parse tree built with G. Second, if we use the relative frequency estimator for our production probabilities, the probability of a tree built with Gf is identical to the probability of the corresponding tree built with G. Finally, let us introduce the term c-command.We will use this notion in our conditional probability model, and it is also useful for understanding some of the previous work in this area.The simple definition of c-command that we will be using in this paper is the following: a node A c-commands a node B if and only if (i) A does not dominate B; and (ii) the lowest branching node (i.e., non-unary node) that dominates A also dominates B.'Thus in Figure 1(a), the subject NP and the VP each c-command the other, because neither dominates the other and the lowest branching node above both (the S) dominates the other.Notice that the subject NP c-commands the object NP, but not vice versa, since the lowest branching node that dominates the object NP is the VP, which does not dominate the subject NP.This section will briefly introduce language modeling for statistical speech recognition.'In language modeling, we assign probabilities to strings of words.To assign a probability, the chain rule is generally invoked.The chain rule states, for a string of k+1 words: A Markov language model of order n truncates the conditioning information in the chain rule to include only the previous n words.These models are commonly called n-gram models.'The standard language model used in many speech recognition systems is the trigram model, i.e., a Markov model of order 2, which can be characterized by the following equation: To smooth the trigram models that are used in this paper, we interpolate the probability estimates of higher-order Markov models with lower-order Markov models (Jelinek and Mercer 1980).The idea behind interpolation is simple, and it has been shown to be very effective.For an interpolated (n + 1)-gram: Here P is the empirically observed relative frequency, and An is a function from Vn to [0, 1].This interpolation is recursively applied to the smaller-order n-grams until the bigram is finally interpolated with the unigram, i.e., Ao = 1.There have been attempts to jump over adjacent words to words farther back in the left context, without the use of dependency links or syntactic structure, for example Saul and Pereira (1997) and Rosenfeld (1996, 1997).We will focus our very brief review, however, on those that use grammars or parsing for their language models.These can be divided into two rough groups: those that use the grammar as a language model, and those that use a parser to uncover phrasal heads standing in an important relation (c-command) to the current word.The approach that we will subsequently present uses the probabilistic grammar as its language model, but only includes probability mass from those parses that are found, that is, it uses the parser to find a subset of the total set of parses (hopefully most of the high-probability parses) and uses the sum of their probabilities as an estimate of the true probability given the grammar.As mentioned in Section 2.1, a PCFG defines a probability distribution over strings of words.One approach to syntactic language modeling is to use this distribution directly as a language model.There are efficient algorithms in the literature (Jelinek and Lafferty 1991; Stolcke 1995) for calculating exact string prefix probabilities given a PCFG.The algorithms both utilize a left-corner matrix, which can be calculated in closed form through matrix inversion.They are limited, therefore, to grammars where the nonterminal set is small enough to permit inversion.String prefix probabilities can be straightforwardly used to compute conditional word probabilities by definition: Stolcke and Segal (1994) and Jurafsky et al. (1995) used these basic ideas to estimate bigram probabilities from hand-written PCFGs, which were then used in language models.Interpolating the observed bigram probabilities with these calculated bigrams led, in both cases, to improvements in word error rate over using the observed bigrams alone, demonstrating that there is some benefit to using these syntactic language models to generalize beyond observed n-grams.Another approach that uses syntactic structure for language modeling has been to use a shift-reduce parser to &quot;surface&quot; c-commanding phrasal headwords or part-of-speech (POS) tags from arbitrarily far back in the prefix string, for use in a trigram-like model.A shift-reduce parser operates from left to right using a stack and a pointer to the next word in the input string.9 Each stack entry consists minimally of a nonterminal label.The parser performs two basic operations: (i) shifting, which involves pushing the POS label of the next word onto the stack and moving the pointer to the following word in the input string; and (ii) reducing, which takes the top k stack entries and replaces them with a single new entry, the nonterminal label of which is the left-hand side of a rule in the grammar that has the k top stack entry labels on the right-hand side.For example, if there is a rule NP --> DT NN, and the top two stack entries are NN and DT, then those two entries can be popped off of the stack and an entry with the label NP pushed onto the stack.Goddeau (1992) used a robust deterministic shift-reduce parser to condition word probabilities by extracting a specified number of stack entries from the top of the current state, and conditioning on those entries in a way similar to an n-gram.In empirical trials, Goddeau used the top two stack entries to condition the word probability.He was able to reduce both sentence and word error rates on the ATIS corpus using this method.The structured language model (SLM) used in Chelba and Jelinek (1998a, 1998b, 1999), Jelinek and Chelba (1999), and Chelba (2000) is similar to that of Goddeau, except that (i) their shift-reduce parser follows a nondeterministic beam search, and (ii) each stack entry contains, in addition to the nonterminal node label, the headword of the constituent.The SLM is like a trigram, except that the conditioning words are taken from the tops of the stacks of candidate parses in the beam, rather than from the linear order of the string.Their parser functions in three stages.The first stage assigns a probability to the word given the left context (represented by the stack state).The second stage predicts the POS given the word and the left context.The last stage performs all possible parser operations (reducing stack entries and shifting the new word).When there is no more parser work to be done (or, in their case, when the beam is full), the following word is predicted.And so on until the end of the string.Each different POS assignment or parser operation is a step in a derivation.Each distinct derivation path within the beam has a probability and a stack state associated with it.Every stack entry has a nonterminal node label and a designated headword of the constituent.When all of the parser operations have finished at a particular point in the string, the next word is predicted as follows: For each derivation in the beam, the headwords of the two topmost stack entries form a trigram with the conditioned word.This interpolated trigram probability is then multiplied by the normalized probability of the derivation, to provide that derivation's contribution to the probability of the word.More precisely, for a beam of derivations D, where hod and hid are the lexical heads of the top two entries on the stack of d. Figure 3 gives a partial tree representation of a potential derivation state for the string &quot;the dog chased the cat with spots&quot;, at the point when the word &quot;with&quot; is to be predicted.The shift-reduce parser will have, perhaps, built the structure shown, and the stack state will have an NP entry with the head &quot;cat&quot; at the top of the stack, and a VBD entry with the head &quot;chased&quot; second on the stack.In the Chelba and Jelinek model, the probability of &quot;with&quot; is conditioned on these two headwords, for this derivation.Since the specific results of the SLM will be compared in detail with our model when the empirical results are presented, at this point we will simply state that they have achieved a reduction in both perplexity and word error rate over a standard trigram using this model.The rest of this paper will present our parsing model, its application to language modeling for speech recognition, and empirical results.Statistically based heuristic best-first or beam-search strategies (Caraballo and Charniak 1998; Charniak, Goldwater, and Johnson 1998; Goodman 1997) have yielded an enormous improvement in the quality and speed of parsers, even without any guarantee that the parse returned is, in fact, that with the maximum likelihood for the probability model.The parsers with the highest published broad-coverage parsing accuracy, which include Charniak (1997, 2000), Collins (1997, 1999), and Ratnaparkhi (1997), all utilize simple and straightforward statistically based search heuristics, pruning the search-space quite dramatically!'Such methods are nearly always used in conjunction with some form of dynamic programming (henceforth DP).That is, search efficiency for these parsers is improved by both statistical search heuristics and DP.Here we will present a parser that uses simple search heuristics of this sort without DP.Our approach is found to yield very accurate parses efficiently, and, in addition, to lend itself straightforwardly to estimating word probabilities on-line, that is, in a single pass from left to right.This on-line characteristic allows our language model to be interpolated on a word-by-word basis with other models, such as the trigram, yielding further improvements.Next we will outline our conditional probability model over rules in the PCFG, followed by a presentation of the top-down parsing algorithm.We will then present empirical results in two domains: one to compare with previous work in the parsing literature, and the other to compare with previous work using parsing for language modeling for speech recognition, in particular with the Chelba and Jelinek results mentioned above.A simple PCFG conditions rule probabilities on the left-hand side of the rule.It has been shown repeatedly—e.g., Briscoe and Carroll (1993), Charniak (1997), Collins (1997), Inui et al. (1997), Johnson (1998)—that conditioning the probabilities of structures on the context within which they appear, for example on the lexical head of a constituent (Charniak 1997; Collins 1997), on the label of its parent nonterminal (Johnson 1998), or, ideally, on both and many other things besides, leads to a much better parsing model and results in higher parsing accuracies.One way of thinking about conditioning the probabilities of productions on contextual information (e.g., the label of the parent of a constituent or the lexical heads of constituents), is as annotating the extra conditioning information onto the labels in the context-free rules.Examples of this are bilexical grammars—such as Eisner and Satta (1999), Charniak (1997), Collins (1997)—where the lexical heads of each constituent are annotated on both the right- and left-hand sides of the context-free rules, under the constraint that every constituent inherits the lexical head from exactly one of its children, and the lexical head of a POS is its terminal item.Thus the rule S NP VP becomes, for instance, S [barks] NP [dog] VP[barks].One way to estimate the probabilities of these rules is to annotate the heads onto the constituent labels in the training corpus and simply count the number of times particular productions occur (relative frequency estimation).This procedure yields conditional probability distributions of constituents on the right-hand side with their lexical heads, given the left-hand side constituent and its lexical head.The same procedure works if we annotate parent information onto constituents.This is how Johnson (1998) conditioned the probabilities of productions: the left-hand side is no longer, for example, S, but rather SI SBAR, i.e., an S with SBAR as parent.Notice, however, that in this case the annotations on the righthand side are predictable from the annotation on the left-hand side (unlike, for example, bilexical grammars), so that the relative frequency estimator yields conditional probability distributions of the original rules, given the parent of the left-hand side.All of the conditioning information that we will be considering will be of this latter sort: the only novel predictions being made by rule expansions are the node labels of the constituents on the right-hand side.Everything else is already specified by the left context.We use the relative frequency estimator, and smooth our production probabilities by interpolating the relative frequency estimates with those obtained by &quot;annotating&quot; less contextual information.This perspective on conditioning production probabilities makes it easy to see that, in essence, by conditioning these probabilities, we are growing the state space.That is, the number of distinct nonterminals grows to include the composite labels; so does the number of distinct productions in the grammar.In a top-down parser, each rule expansion is made for a particular candidate parse, which carries with it the entire rooted derivation to that point; in a sense, the left-hand side of the rule is annotated with the entire left context, and the rule probabilities can be conditioned on any aspect of this derivation.We do not use the entire left context to condition the rule probabilities, but rather &quot;pick-and-choose&quot; which events in the left context we would like to condition on.One can think of the conditioning events as functions, which take the partial tree structure as an argument and return a value, upon which the rule probability can be conditioned.Each of these functions is an algorithm for walking the provided tree and returning a value.For example, suppose that we want to condition the probability of the rule A —> a.We might write a function that takes the partial tree, finds the parent of the left-hand side of the rule and returns its node label.If the left-hand side has no parent (i.e., it is at the root of the tree), the function returns the null value (NULL).We might write another function that returns the nonterminal label of the closest sibling to the left of A, and NULL if no such node exists.We can then condition the probability of the production on the values that were returned by the set of functions.Recall that we are working with a factored grammar, so some of the nodes in the factored tree have nonterminal labels that were created by the factorization, and may not be precisely what we want for conditioning purposes.In order to avoid any confusions in identifying the nonterminal label of a particular rule production in either its factored or rionfactored version, we introduce the function constituent (A) for every nonterminal in the factored grammar Gf, which is simply the label of the constituent whose factorization results in A.For example, in Figure 2, constituent (NP-DT-NN) is simply NP.Note that a function can return different values depending upon the location in the tree of the nonterminal that is being expanded.For example, suppose that we have a function that returns the label of the closest sibling to the left of constituent (A) or NULL if no such node exists.Then a subsequent function could be defined as follows: return the parent of the parent (the grandparent) of constituent (A) only if constituent (A) has no sibling to the left—in other words, if the previous function returns NULL; otherwise return the second closest sibling to the left of constituent (A), or, as always, NULL if no such node exists.If the function returns, for example, NP, this could either mean that the grandparent is NP or the second closest sibling is Conditional probability model represented as a decision tree, identifying the location in the partial parse tree of the conditioning information.NP; yet there is no ambiguity in the meaning of the function, since the result of the previous function disambiguates between the two possibilities.The functions that were used for the present study to condition the probability of the rule, A a, are presented in Figure 4, in a tree structure.This is a sort of decision tree for a tree-walking algorithm to decide what value to return, for a given partial tree and a given depth.For example, if the algorithm is asked for the value at level 0, it will return A, the left-hand side of the rule being expanded.&quot; Suppose the algorithm is asked for the value at level 4.After level 2 there is a branch in the decision tree.If the left-hand side of the rule is a POS, and there is no sibling to the left of constituent (A) in the derivation, then the algorithm takes the right branch of the decision tree to decide what value to return; otherwise the left branch.Suppose it takes the left branch.Then after level 3, there is another branch in the decision tree.If the left-hand side of the production is a POS, then the algorithm takes the right branch of the decision tree, and returns (at level 4) the POS of the closest c-commanding lexical head to A, which it finds by walking the parse tree; if the left-hand side of the rule is not a POS, then the algorithm returns (at level 4) the closest sibling to the left of the parent of constituent (A).The functions that we have chosen for this paper follow from the intuition (and experience) that what helps parsing is different depending on the constituent that is being expanded.POS nodes have lexical items on the right-hand side, and hence can bring into the model some of the head-head dependencies that have been shown to be so effective.If the POS is leftmost within its constituent, then very often the lexical item is sensitive to the governing category to which it is attaching.For example, if the POS is a preposition, then its probability of expanding to a particular word is very different if it is attaching to a noun phrase than if it is attaching to a verb phrase, and perhaps quite different depending on the head of the constituent to which it is attaching.Subsequent POSs within a constituent are likely to be open-class words, and less dependent on these sorts of attachment preferences.Conditioning on parents and siblings of the left-hand side has proven to be very useful.To understand why this is the case, one need merely to think of VP expansions.If the parent of a VP is another VP (i.e., if an auxiliary or modal verb is used), then the distribution over productions is different than if the parent is an S. Conditioning on head information, both POS of the head and the lexical item itself, has proven useful as well, although given our parser's left-to-right orientation, in many cases the head has not been encountered within the particular constituent.In such a case, the head of the last child within the constituent is used as a proxy for the constituent head.All of our conditioning functions, with one exception, return either parent or sibling node labels at some specific distance from the left-hand side, or head information from ccommanding constituents.The exception is the function at level 5 along the left branch of the tree in Figure 4.Suppose that the node being expanded is being conjoined with another node, which we can tell by the presence or absence of a CC node.In that case, we want to condition the expansion on how the conjoining constituent expanded.In other words, this attempts to capture a certain amount of parallelism between the expansions of conjoined categories.In presenting the parsing results, we will systematically vary the amount of conditioning information, so as to get an idea of the behavior of the parser.We will refer to the amount of conditioning by specifying the deepest level from which a value is returned for each branching path in the decision tree, from left to right in Figure 4: the first number is for left contexts where the left branch of the decision tree is always followed (non-POS nonterminals on the left-hand side); the second number is for a left branch followed by a right branch (POS nodes that are leftmost within their constituent); and the third number is for the contexts where the right branch is always followed (POS nodes that are not leftmost within their constituent).For example, (4,3,2) would represent a conditional probability model that (i) returns NULL for all functions below level 4 in all contexts; (ii) returns NULL for all functions below level 3 if the left-hand side is a POS; and (iii) returns NULL for all functions below level 2 for nonleftmost POS expansions.Table 1 gives a breakdown of the different levels of conditioning information used in the empirical trials, with a mnemonic label that will be used when presenting results.These different levels were chosen as somewhat natural points at which to observe how much of an effect increasing the conditioning information has.We first include structural information from the context, namely, node labels from constituents in the left context.Then we add lexical information, first for non-POS expansions, then for leftmost POS expansions, then for all expansions.All of the conditional probabilities are linearly interpolated.For example, the probability of a rule conditioned on six events is the linear interpolation of two probabilities: (i) the empirically observed relative frequency of the rule when the six events co-occur; and (ii) the probability of the rule conditioned on the first five events (which is in turn interpolated).The interpolation coefficients are a function of the frequency of the set of conditioning events, and are estimated by iteratively adjusting the coefficients so as to maximize the likelihood of a held-out corpus.This was an outline of the conditional probability model that we used for the PCFG.The model allows us to assign probabilities to derivations, which can be used by the parsing algorithm to decide heuristically which candidates are promising and should be expanded, and which are less promising and should be pruned.We now outline the top-down parsing algorithm.This parser is essentially a stochastic version of the top-down parser described in Aho, Sethi, and Ullman (1986).It uses a PCFG with a conditional probability model of the sort defined in the previous section.We will first define candidate analysis (i.e., a partial parse), and then a derives relation between candidate analyses.We will then present the algorithm in terms of this relation.The parser takes an input string 4, a PCFG G, and a priority queue of candidate analyses.A candidate analysis C = (D, 8, PD, F, wn consists of a derivation D, a stack S. a derivation probability PD, a figure of merit F, and a string w7 remaining to be parsed.The first word in the string remaining to be parsed, w1, we will call the look-ahead word.The derivation D consists of a sequence of rules used from G. The stack S contains a sequence of nonterminal symbols, and an end-of-stack marker $ at the bottom.The probability PD is the product of the probabilities of all rules in the derivation D. F is the product of PD and a look-ahead probability, LAP(S,w,), which is a measure of the likelihood of the stack S rewriting with w, at its left corner.We can define a derives relation, denoted between two candidate analyses as follows.(D, S, PD, F, w'n = (D' , S' , Pp, F' w) if and only if12 The parse begins with a single candidate analysis on the priority queue: ), st$, 1, 1, 4).Next, the top ranked candidate analysis, C = (D, 5, PD, F, wr,l), is popped from the priority queue.If S = $ and w, = Vs), then the analysis is complete.Otherwise, all C' such that C C' are pushed onto the priority queue.We implement this as a beam search.For each word position i, we have a separate priority queue H, of analyses with look-ahead w,.When there are &quot;enough&quot; analyses by some criteria (which we will discuss below) on priority queue H,+1, all candidate analyses remaining on H, are discarded.Since w„ = ( /s), all parses that are pushed onto 1-4+1 are complete.The parse on H,i+i with the highest probability is returned for evaluation.In the case that no complete parse is found, a partial parse is returned and evaluated.The LAP is the probability of a particular terminal being the next left-corner of a particular analysis.The terminal may be the left corner of the topmost nonterminal on the stack of the analysis or it might be the left corner of the nth nonterminal, after the top n - 1 nonterminals have rewritten to E. Of course, we cannot expect to have adequate statistics for each nonterminal/word pair that we encounter, so we smooth to the POS.Since we do not know the POS for the word, we must sum the LAP for all POS For a PCFG G, a stack S = Ao An$ (which we will write AN and a look-ahead terminal item wi, we define the look-ahead probability as follows: We recursively estimate this with two empirically observed conditional probabilities for every nonterminal A,: 13(A, w,a) and P(A, c).The same empirical probability, P(A, Xoe), is collected for every preterminal X as well.The LAP approximation for a given stack state and look-ahead terminal is: where PG(Aj Wia) AAjP(Ai Wice) + (1 - AA,) E Po; xcoti(x wi) (11) XEV The lambdas are a function of the frequency of the nonterminal A1, in the standard way (Jelinek and Mercer 1980).The beam threshold at word w, is a function of the probability of the top-ranked candidate analysis on priority queue kiwi, and the number of candidates on H1+1.The basic idea is that we want the beam to be very wide if there are few analyses that have been advanced, but relatively narrow if many analyses have been advanced.If p is the probability of the highest-ranked analysis on H1±1, then another analysis is discarded if its probability falls below pf(-y, IH,+11), where -y is an initial parameter, which we call the base beam factor.For the current study, ,y was 10-11, unless otherwise noted, and f ('-y,1H,+11) = -y11-11+113.Thus, if 100 analyses have already been pushed onto then a candidate analysis must have a probability above 10-5/3 to avoid being pruned.After 1,000 candidates, the beam has narrowed to 10-2p.There is also a maximum number of allowed analyses on H„ in case the parse fails to advance an analysis to H1±1.This was typically 10,000.As mentioned in Section 2.1, we left-factor the grammar, so that all productions are binary, except those with a single terminal on the right-hand side and epsilon productions.The only c-productions are those introduced by left-factorization.Our factored grammar was produced by factoring the trees in the training corpus before grammar induction, which proceeded in the standard way, by counting rule frequencies.The empirical results will be presented in three stages: (i) trials to examine the accuracy and efficiency of the parser; (ii) trials to examine its effect on test corpus perplexity and recognition performance; and (iii) trials to examine the effect of beam variation on these performance measures.Before presenting the results, we will introduce the methods of evaluation.Perplexity is a standard measure within the speech recognition community for comparing language models.In principle, if two models are tested on the same test corpus, the model that assigns the lower perplexity to the test corpus is the model closest to the true distribution of the language, and thus better as a prior model for speech recognition.Perplexity is the exponential of the cross entropy, which we will define next.Given a random variable X with distribution p and a probability model q, the cross entropy, H(p, q) is defined as follows: Let p be the true distribution of the language.Then, under certain assumptions, given a large enough sample, the sample mean of the negative log probability of a model will converge to its cross entropy with the true mode1.14 That is where w'ol is a string of the language L. In practice, one takes a large sample of the language, and calculates the negative log probability of the sample, normalized by its size.15 The lower the cross entropy (i.e., the higher the probability the model assigns to the sample), the better the model.Usually this is reported in terms of perplexity, which we will do as well.'Some of the trials discussed below will report results in terms of word and/or sentence error rate, which are obtained when the language model is embedded in a speech recognition system.Word error rate is the number of deletion, insertion, or substitution errors per 100 words.Sentence error rate is the number of sentences with one or more errors per 100 sentences.Statistical parsers are typically evaluated for accuracy at the constituent level, rather than simply whether or not the parse that the parser found is completely correct or not.A constituent for evaluation purposes consists of a label (e.g., NP) and a span (beginning and ending word positions).For example, in Figure 1(a), there is a VP that spans the words &quot;chased the ball&quot;.Evaluation is carried out on a hand-parsed test corpus, and the manual parses are treated as correct.We will call the manual parse GOLD and the parse that the parser returns TEST.Precision is the number of common constituents in GOLD and TEST divided by the number of constituents in TEST.Recall is the number of common constituents in GOLD and TEST divided by the number of constituents in GOLD.Following standard practice, we will be reporting scores only for non-part-of-speech constituents, which are called labeled recall (LR) and labeled precision (LP).Sometimes in figures we will plot their average, and also what can be termed the parse error, which is one minus their average.LR and LP are part of the standard set of PARSEVAL measures of parser quality (Black et al. 1991).From this set of measures, we will also include the crossing bracket scores: average crossing brackets (CB), percentage of sentences with no crossing brackets (0 CB), and the percentage of sentences with two crossing brackets or fewer (< 2 CB).In addition, we show the average number of rule expansions considered per word, that is, the number of rule expansions for which a probability was calculated (see Roark and Charniak [2000]), and the average number of analyses advanced to the next priority queue per word.This is an incremental parser with a pruning strategy and no backtracking.In such a model, it is possible to commit to a set of partial analyses at a particular point that cannot be completed given the rest of the input string (i.e., the parser can &quot;garden path&quot;).In such a case, the parser fails to return a complete parse.In the event that no complete parse is found, the highest initially ranked parse on the last nonempty priority queue is returned.All unattached words are then attached at the highest level in the tree.In such a way we predict no new constituents and all incomplete constituents are closed.This structure is evaluated for precision and recall, which is entirely appropriate for these incomplete as well as complete parses.If we fail to identify nodes later in the parse, recall will suffer, and if our early predictions were bad, both precision and recall will suffer.Of course, the percentage of these failures are reported as well.The first set of results looks at the performance of the parser on the standard corpora for statistical parsing trials: Sections 2-21 (989,860 words, 39,832 sentences) of the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993) served as the training data, Section 24 (34,199 words, 1,346 sentences) as the held-out data for parameter estimation, and Section 23 (59,100 words, 2,416 sentences) as the test data.Section 22 (41,817 words, 1,700 sentences) served as the development corpus, on which the parser was tested until stable versions were ready to run on the test data, to avoid developing the parser to fit the specific test data.Table 2 shows trials with increasing amounts of conditioning information from the left context.There are a couple of things to notice from these results.First, and least surprising, is that the accuracy of the parses improved as we conditioned on more and more information.Like the nonlexicalized parser in Roark and Johnson (1999), we found that the search efficiency, in terms of number of rule expansions considered or number of analyses advanced, also improved as we increased the amount of conditioning.Unlike the Roark and Johnson parser, however, our coverage did not substantially drop as the amount of conditioning information increased, and in some cases, coverage improved slightly.They did not smooth their conditional probability estimates, and blamed sparse data for their decrease in coverage as they increased the conditioning information.These results appear to support this, since our smoothed model showed no such tendency.Figure 5 shows the reduction in parser error, 1 LR---LP , and the reduction in rule expansions considered as the conditioning information increased.The bulk of the improvement comes from simply conditioning on the labels of the parent and the closest sibling to the node being expanded.Interestingly, conditioning all POS expansions on two c-commanding heads made no difference in accuracy compared to conditioning only leftmost POS expansions on a single c-commanding head; but it did improve the efficiency.These results, achieved using very straightforward conditioning events and considering only the left context, are within one to four points of the best published Observed running time on Section 23 of the Penn Treebank, with the full conditional probability model and beam of 10-11, using one 300 MHz UltraSPARC processor and 256MB of RAM of a Sun Enterprise 450. accuracies cited above.'Of the 2,416 sentences in the section, 728 had the totally correct parse, 30.1 percent tree accuracy.Also, the parser returns a set of candidate parses, from which we have been choosing the top ranked; if we use an oracle to choose the parse with the highest accuracy from among the candidates (which averaged 70.0 in number per sentence), we find an average labeled precision/recall of 94.1, for sentences of length < 100.The parser, thus, could be used as a front end to some other model, with the hopes of selecting a more accurate parse from among the final candidates.While we have shown that the conditioning information improves the efficiency in terms of rule expansions considered and analyses advanced, what does the efficiency of such a parser look like in practice?Figure 6 shows the observed time at our standard base beam of 10-11 with the full conditioning regimen, alongside an approximation of the reported observed (linear) time in Ratnaparkhi (1997).Our observed times look polynomial, which is to be expected given our pruning strategy: the denser the competitors within a narrow probability range of the best analysis, the more time will be spent working on these competitors; and the farther along in the sentence, the more chance for ambiguities that can lead to such a situation.While our observed times are not linear, and are clearly slower than his times (even with a faster machine), they are quite respectably fast.The differences between a k-best and a beam-search parser (not to mention the use of dynamic programming) make a running time difference unsurprising.What is perhaps surprising is that the difference is not greater.Furthermore, this is quite a large beam (see discussion below), so that very large improvements in efficiency can be had at the expense of the number of analyses that are retained.The next set of results will highlight what recommends this approach most: the ease with which one can estimate string probabilities in a single pass from left to right across the string.By definition, a PCFG's estimate of a string's probability is the sum of the probabilities of all trees that produce the string as terminal leaves (see Equation 1).In the beam search approach outlined above, we can estimate the string's probability in the same manner, by summing the probabilities of the parses that the algorithm finds.Since this is not an exhaustive search, the parses that are returned will be a subset of the total set of trees that would be used in the exact PCFG estimate; hence the estimate thus arrived at will be bounded above by the probability that would be generated from an exhaustive search.The hope is that a large amount of the probability mass will be accounted for by the parses in the beam.The method cannot overestimate the probability of the string.Recall the discussion of the grammar models above, and our definition of the set of partial derivations Dw, with respect to a prefix string wil) (see Equations 2 and 7).By definition, Note that the numerator at word wj is the denominator at word w1+1, so that the product of all of the word probabilities is the numerator at the final word, namely, the string prefix probability.We can make a consistent estimate of the string probability by similarly summing over all of the trees within our beam.Let Ht be the priority queue H, before any processing has begun with word w, in the look-ahead.This is a subset of the possible leftmost partial derivations with respect to the prefix string W. Since RV is produced by expanding only analyses on priority queue H;', the set of complete trees consistent with the partial derivations on priority queue Ht is a subset of the set of complete trees consistent with the partial derivations on priority queue HT'', that is, the total probability mass represented by the priority queues is monotonically decreasing.Thus conditional word probabilities defined in a way consistent with Equation 14 will always be between zero and one.Our conditional word probabilities are calculated as follows: As mentioned above, the model cannot overestimate the probability of a string, because the string probability is simply the sum over the beam, which is a subset of the possible derivations.By utilizing a figure of merit to identify promising analyses, we are simply focusing our attention on those parses that are likely to have a high probability, and thus we are increasing the amount of probability mass that we do capture, of the total possible.It is not part of the probability model itself.Since each word is (almost certainly, because of our pruning strategy) losing some probability mass, the probability model is not &quot;proper &quot;—the sum of the probabilities over the vocabulary is less than one.In order to have a proper probability distribution, we would need to renormalize by dividing by some factor.Note, however, that this renormalization factor is necessarily less than one, and thus would uniformly increase each word's probability under the model, that is, any perplexity results reported below will be higher than the &quot;true&quot; perplexity that would be assigned with a properly normalized distribution.In other words, renormalizing would make our perplexity measure lower still.The hope, however, is that the improved parsing model provided by our conditional probability model will cause the distribution over structures to be more peaked, thus enabling us to capture more of the total probability mass, and making this a fairly snug upper bound on the perplexity.One final note on assigning probabilities to strings: because this parser does garden path on a small percentage of sentences, this must be interpolated with another estimate, to ensure that every word receives a probability estimate.In our trials, we used the unigram, with a very small mixing coefficient: following words since the denominator is zero.Thus, Chelba and Jelinek (1998a, 1998b) also used a parser to help assign word probabilities, via the structured language model outlined in Section 3.2.They trained and tested the SLM on a modified, more &quot;speech-like&quot; version of the Penn Treebank.Their modifications included: (i) removing orthographic cues to structure (e.g., punctuation); (ii) replacing all numbers with the single token N; and (iii) closing the vocabulary at 10,000, replacing all other words with the UNK token.They used Sections 00-20 (929,564 words) as the development set, Sections 21-22 (73,760 words) as the check set (for interpolation coefficient estimation), and tested on Sections 23-24 (82,430 words).We obtained the training and testing corpora from them (which we will denote C&J corpus), and also created intermediate corpora, upon which only the first two modifications were carried out (which we will denote no punct).Differences in performance will give an indication of the impact on parser performance of the different modifications to the corpora.All trials in this section used Sections 00-20 for counts, held out 21-22, and tested on 23-24.Table 3 shows several things.First, it shows relative performance for unmodified, no punct, and C&J corpora with the full set of conditioning information.We can see that removing the punctuation causes (unsurprisingly) a dramatic drop in the accuracy and efficiency of the parser.Interestingly, it also causes coverage to become nearly total, with failure on just two sentences per thousand on average.We see the familiar pattern, in the C&J corpus results, of improving performance as the amount of conditioning information grows.In this case we have perplexity results as well, and Figure 7 shows the reduction in parser error, rule expansions, and perplexity as the amount of conditioning information grows.While all three seem to be similarly improved by the addition of structural context (e.g., parents and siblings), the addition of c-commanding heads has only a moderate effect on the parser accuracy, but a very large effect on the perplexity.The fact that the efficiency was improved more than the accuracy in this case (as was also seen in Figure 5), seems to indicate that this additional information is causing the distribution to become more peaked, so that fewer analyses are making it into the beam.Reduction in average precision/recall error, number of rule expansions, and perplexity as conditioning increases.Table 4 compares the perplexity of our model with Chelba and Jelinek (1998a, 1998b) on the same training and testing corpora.We built an interpolated trigram model to serve as a baseline (as they did), and also interpolated our model's perplexity with the trigram, using the same mixing coefficient as they did in their trials (taking 36 percent of the estimate from the trigram).'The trigram model was also trained on Sections 00-20 of the C&J corpus.Trigrams and bigrams were binned by the total count of the conditioning words in the training corpus, and maximum likelihood mixing coefficients were calculated for each bin, to mix the trigram with bigram and unigram estimates.Our trigram model performs at almost exactly the same level as theirs does, which is what we would expect.Our parsing model's perplexity improves upon their first result fairly substantially, but is only slightly better than their second result.'However, when we interpolate with the trigram, we see that the additional improvement is greater than the one they experienced.This is not surprising, since our conditioning information is in many ways orthogonal to that of the trigram, insofar as it includes the probability mass of the derivations; in contrast, their model in some instances is very close to the trigram, by conditioning on two words in the prefix string, which may happen to be the two adjacent words.These results are particularly remarkable, given that we did not build our model as a language model per se, but rather as a parsing model.The perplexity improvement was achieved by simply taking the existing parsing model and applying it, with no extra training beyond that done for parsing.The hope was expressed above that our reported perplexity would be fairly close to the &quot;true&quot; perplexity that we would achieve if the model were properly normalized, i.e., that the amount of probability mass that we lose by pruning is small.One way to test this is the following: at each point in the sentence, calculate the conditional probability of each word in the vocabulary given the previous words, and sum them.'If there is little loss of probability mass, the sum should be close to one.We did this for the first 10 sentences in the test corpus, a total of 213 words (including the end-of-sentence markers).One of the sentences was a failure, so that 12 of the word probabilities (all of the words after the point of the failure) were not estimated by our model.Of the remaining 201 words, the average sum of the probabilities over the 10,000-word vocabulary was 0.9821, with a minimum of 0.7960 and a maximum of 0.9997.Interestingly, at the word where the failure occurred, the sum of the probabilities was 0.9301.In order to get a sense of whether these perplexity reduction results can translate to improvement in a speech recognition task, we performed a very small preliminary experiment on n-best lists.The DARPA '93 HUB1 test setup consists of 213 utterances read from the Wall Street Journal, a total of 3,446 words.The corpus comes with a baseline trigram model, using a 20,000-word open vocabulary, and trained on approximately 40 million words.We used Ciprian Chelba's A* decoder to find the 50 best hypotheses from each lattice, along with the acoustic and trigram scores.'Given the idealized circumstances of the production (text read in a lab), the lattices are relatively sparse, and in many cases 50 distinct string hypotheses were not found in a lattice.We reranked an average of 22.9 hypotheses with our language model per utterance.One complicating issue has to do with the tokenization in the Penn Treebank versus that in the HUB1 lattices.In particular, contractions (e.g., he are split in the Penn Treebank (he 's) but not in the HUB1 lattices.Splitting of the contractions is critical for parsing, since the two parts oftentimes (as in the previous example) fall in different constituents.We follow Chelba (2000) in dealing with this problem: for parsing purposes, we use the Penn Treebank tokenization; for interpolation with the provided trigram model, and for evaluation, the lattice tokenization is used.If we are to interpolate our model with the lattice trigram, we must wait until we have our model's estimate for the probability of both parts of the contraction; their product can then be interpolated with the trigram estimate.In fact, interpolation in these trials made no improvement over the better of the uninterpolated models, but simply resulted in performance somewhere between the better and the worse of the two models, so we will not present interpolated trials here.Table 5 reports the word and sentence error rates for five different models: (i) the trigram model that comes with the lattices, trained on approximately 40M words, with a vocabulary of 20,000; (ii) the best-performing model from Chelba (2000), which was interpolated with the lattice trigram at A -= 0.4; (iii) our parsing model, with the same training and vocabulary as the perplexity trials above; (iv) a trigram model with the same training and vocabulary as the parsing model; and (v) no language model at all.This last model shows the performance from the acoustic model alone, without the influence of the language model.The log of the language model score is multiplied by the language model (LM) weight when summing the logs of the language and acoustic scores, as a way of increasing the relative contribution of the language model to the composite score.We followed Chelba (2000) in using an LM weight of 16 for the lattice trigram.For our model and the Treebank trigram model, the LM weight that resulted in the lowest error rates is given.The small size of our training data, as well as the fact that we are rescoring n-best lists, rather than working directly on lattices, makes comparison with the other models not particularly informative.What is more informative is the difference between our model and the trigram trained on the same amount of data.We achieved an 8.5 percent relative improvement in word error rate, and an 8.3 percent relative improvement in sentence error rate over the Treebank trigram.Interestingly, as mentioned above, interpolating two models together gave no improvement over the better of the two, whether our model was interpolated with the lattice or the Treebank trigram.This contrasts with our perplexity results reported above, as well as with the recognition experiments in Chelba (2000), where the best results resulted from interpolated models.The point of this small experiment was to see if our parsing model could provide useful information even in the case that recognition errors occur, as opposed to the (generally) fully grammatical strings upon which the perplexity results were obtained.As one reviewer pointed out, given that our model relies so heavily on context, it may have difficulty recovering from even one recognition error, perhaps more difficulty than a more locally oriented trigram.While the improvements over the trigram model in these trials are modest, they do indicate that our model is robust enough to provide good information even in the face of noisy input.Future work will include more substantial word recognition experiments.The last set of results that we will present addresses the question of how wide the beam must be for adequate results.The base beam factor that we have used to this point is 10', which is quite wide.It was selected with the goal of high parser accuracy; but in this new domain, parser accuracy is a secondary measure of performance.To determine the effect on perplexity, we varied the base beam factor in trials on the Chelba and Jelinek corpora, keeping the level of conditioning information constant, and Table 6 shows the results across a variety of factors.The parser error, parser coverage, and the uninterpolated model perplexity (A = 1) all suffered substantially from a narrower search, but the interpolated perplexity remained quite good even at the extremes.Figure 8 plots the percentage increase in parser error, model perplexity, interpolated perplexity, and efficiency (i.e., decrease in rule expansions per word) as the base beam factor decreased.Note that the model perplexity and parser accuracy are quite similarly affected, but that the interpolated perplexity remained far below the trigram baseline, even with extremely narrow beams.The empirical results presented above are quite encouraging, and the potential of this kind of approach both for parsing and language modeling seems very promising.Increase in average precision/recall error, model perplexity, interpolated perplexity, and efficiency (i.e., decrease in rule expansions per word) as base beam factor decreases.With a simple conditional probability model, and simple statistical search heuristics, we were able to find very accurate parses efficiently, and, as a side effect, were able to assign word probabilities that yield a perplexity improvement over previous results.These perplexity improvements are particularly promising, because the parser is providing information that is, in some sense, orthogonal to the information provided by a trigram model, as evidenced by the robust improvements to the baseline trigram when the two models are interpolated.There are several important future directions that will be taken in this area.First, there is reason to believe that some of the conditioning information is not uniformly useful, and we would benefit from finer distinctions.For example, the probability of a preposition is presumably more dependent on a c-commanding head than the probability of a determiner is.Yet in the current model they are both conditioned on that head, as leftmost constituents of their respective phrases.Second, there are advantages to top-down parsing that have not been examined to date, e.g., empty categories.A top-down parser, in contrast to a standard bottom-up chart parser, has enough information to predict empty categories only where they are likely to occur.By including these nodes (which are in the original annotation of the Penn Treebank), we may be able to bring certain long-distance dependencies into a local focus.In addition, as mentioned above, we would like to further test our language model in speech recognition tasks, to see if the perplexity improvement that we have seen can lead to significant reductions in word error rate.Other parsing approaches might also be used in the way that we have used a topdown parser.Earley and left-corner parsers, as mentioned in the introduction, also have rooted derivations that can be used to calculated generative string prefix probabilities incrementally.In fact, left-corner parsing can be simulated by a top-down parser by transforming the grammar, as was done in Roark and Johnson (1999), and so an approach very similar to the one outlined here could be used in that case.Perhaps some compromise between the fully connected structures and extreme underspecification will yield an efficiency improvement.Also, the advantages of head-driven parsers may outweigh their inability to interpolate with a trigram, and lead to better off-line language models than those that we have presented here.Does a parsing model capture exactly what we need for informed language modeling?The answer to that is no.Some information is simply not structural in nature (e.g., topic), and we might expect other kinds of models to be able to better handle nonstructural dependencies.The improvement that we derived from interpolating the different models above indicates that using multiple models may be the most fruitful path in the future.In any case, a parsing model of the sort that we have presented here should be viewed as an important potential source of key information for speech recognition.Future research will show if this early promise can be fully realized.The author wishes to thank Mark Johnson for invaluable discussion, guidance, and moral support over the course of this project.Many thanks also to Eugene Charniak for the use of certain grammar training routines, and for an enthusiastic interest in the project.Thanks also to four anonymous reviewers for valuable and insightful comments, and to Ciprian Chelba, Sanjeev Khudanpur, and Frederick Jelinek for comments and suggestions.Finally, the author would like to express his appreciation to the participants of discussions during meetings of the Brown
Finding Predominant Word Senses in Untagged Textword sense disambiguation the heuristic of choosing the most common sense is extremely powerful because the distribution of the senses of a word is often skewed.The problem with using the predominant, or first sense heuristic, aside from the fact that it does not take surrounding context into account, is that it assumes some quantity of handtagged data.Whilst there are a few hand-tagged corpora available for some languages, one would expect the frequency distribution of the senses of words, particularly topical words, to depend on the genre and domain of the text under consideration.We present work on the use of a thesaurus acquired from raw textual corpora and the WordNet similarity package to find predominant noun senses automatically.The acquired predominant senses give a of 64% on the nouns of the 2 English all-words task.This is a very promising result given that our method does not require any hand-tagged text, such as SemCor.Furthermore, we demonstrate that our method discovers appropriate predominant senses for words from two domainspecific corpora.The first sense heuristic which is often used as a baseline for supervised WSD systems outperforms many of these systems which take surrounding context into account.This is shown by the results of the English all-words task in SENSEVAL-2 (Cotton et al., 1998) in figure 1 below, where the first sense is that listed in WordNet for the PoS given by the Penn TreeBank (Palmer et al., 2001).The senses in WordNet are ordered according to the frequency data in the manually tagged resource SemCor (Miller et al., 1993).Senses that have not occurred in SemCor are ordered arbitrarily and after those senses of the word that have occurred.The figure distinguishes systems which make use of hand-tagged data (using HTD) such as SemCor, from those that do not (without HTD).The high performance of the first sense baseline is due to the skewed frequency distribution of word senses.Even systems which show superior performance to this heuristic often make use of the heuristic where evidence from the context is not sufficient (Hoste et al., 2001).Whilst a first sense heuristic based on a sense-tagged corpus such as SemCor is clearly useful, there is a strong case for obtaining a first, or predominant, sense from untagged corpus data so that a WSD system can be tuned to the genre or domain at hand.SemCor comprises a relatively small sample of 250,000 words.There are words where the first sense in WordNet is counter-intuitive, because of the size of the corpus, and because where the frequency data does not indicate a first sense, the ordering is arbitrary.For example the first sense of tiger in WordNet is audacious person whereas one might expect that carnivorous animal is a more common usage.There are only a couple of instances of tiger within SemCor.Another example is embryo, which does not occur at all in SemCor and the first sense is listed as rudimentary plant rather than the anticipated fertilised egg meaning.We believe that an automatic means of finding a predominant sense would be useful for systems that use it as a means of backing-off (Wilks and Stevenson, 1998; Hoste et al., 2001) and for systems that use it in lexical acquisition (McCarthy, 1997; Merlo and Leybold, 2001; Korhonen, 2002) because of the limited size of hand-tagged resources.More importantly, when working within a specific domain one would wish to tune the first sense heuristic to the domain at hand.The first sense of star in SemCor is celestial body, however, if one were disambiguating popular news celebrity would be preferred.Assuming that one had an accurate WSD system then one could obtain frequency counts for senses and rank them with these counts.However, the most accurate WSD systems are those which require manually sense tagged data in the first place, and their accuracy depends on the quantity of training examples (Yarowsky and Florian, 2002) available.We the WordNet hierarchy.We use WordNet as our sense inventory for this work.The paper is structured as follows.We discuss our method in the following section.Sections 3 and 4 concern experiments using predominant senses from the BNC evaluated against the data in SemCor and the SENSEVAL-2 English all-words task respectively.In section 5 we present results of the method on two domain specific sections of the Reuters corpus for a sample of words.We describe some related work in section 6 and conclude in section 7. are therefore investigating a method of automatically ranking WordNet senses from raw text.Many researchers are developing thesauruses from automatically parsed data.In these each target word is entered with an ordered list of “nearest neighbours”.The neighbours are words ordered in terms of the “distributional similarity” that they have with the target.Distributional similarity is a measure indicating the degree that two words, a word and its neighbour, occur in similar contexts.From inspection, one can see that the ordered neighbours of such a thesaurus relate to the different senses of the target word.For example, the neighbours of star in a dependency-based thesaurus provided by Lin 1 has the ordered list of neighbours: superstar, player, teammate, actor early in the list, but one can also see words that are related to another sense of star e.g. galaxy, sun, world and planet further down the list.We expect that the quantity and similarity of the neighbours pertaining to different senses will reflect the dominance of the sense to which they pertain.This is because there will be more relational data for the more prevalent senses compared to the less frequent senses.In this paper we describe and evaluate a method for ranking senses of nouns to obtain the predominant sense of a word using the neighbours from automatically acquired thesauruses.The neighbours for a word in a thesaurus are words themselves, rather than senses.In order to associate the neighbours with senses we make use of another notion of similarity, “semantic similarity”, which exists between senses, rather than words.We experiment with several WordNet Similarity measures (Patwardhan and Pedersen, 2003) which aim to capture semantic relatedness withinIn order to find the predominant sense of a target word we use a thesaurus acquired from automatically parsed text based on the method of Lin (1998).This provides the nearest neighbours to each target word, along with the distributional similarity score between the target word and its neighbour.We then use the WordNet similarity package (Patwardhan and Pedersen, 2003) to give us a semantic similarity measure (hereafter referred to as the WordNet similarity measure) to weight the contribution that each neighbour makes to the various senses of the target word.To find the first sense of a word ( ) we take each sense in turn and obtain a score reflecting the prevalence which is used for ranking.Let be the ordered set of the top scoring neighbours of from the thesaurus with associated distributional similarity scores The thesaurus was acquired using the method described by Lin (1998).For input we used grammatical relation data extracted using an automatic where: .Let be the set of senses of .For each sense of ( ) we obtain a ranking score by summing over the of each neighbour ( ) multiplied by a weight.This weight is the WordNet similarity score ( ) between the target sense ( ) and the sense of ( ) that maximises this score, divided by the sum of all such WordNet similarity scores for and .Thus we rank each sense using: parser (Briscoe and Carroll, 2002).For the experiments in sections 3 and 4 we used the 90 million words of written English from the BNC.For each noun we considered the co-occurring verbs in the direct object and subject relation, the modifying nouns in noun-noun relations and the modifying adjectives in adjective-noun relations.We could easily extend the set of relations in the future.A noun, , is thus described by a set of co-occurrence triples and associated frequencies, where is a grammatical relation and is a possible cooccurrence with in that relation.For every pair of nouns, where each noun had a total frequency in the triple data of 10 or more, we computed their distributional similarity using the measure given by Lin (1998).If is the set of co-occurrence types such that is positive then the similarity between two nouns, and , can be computed as: where: A thesaurus entry of size for a target noun is then defined as the most similar nouns to .We use the WordNet Similarity Package 0.05 and WordNet version 1.6.2 The WordNet Similarity package supports a range of WordNet similarity scores.We experimented using six of these to provide the in equation 1 above and obtained results well over our baseline, but because of space limitations give results for the two which perform the best.We briefly summarise the two measures here; for a more detailed summary see (Patwardhan et al., 2003).The measures provide a similarity score between two WordNet senses ( and ), these being synsets within WordNet. lesk (Banerjee and Pedersen, 2002) This score maximises the number of overlapping words in the gloss, or definition, of the senses.It uses the glosses of semantically related (according to WordNet) senses too. jcn (Jiang and Conrath, 1997) This score uses corpus data to populate classes (synsets) in the WordNet hierarchy with frequency counts.Each 2We use this version of WordNet since it allows us to map information to WordNets of other languages more accurately.We are of course able to apply the method to other versions of WordNet. synset, is incremented with the frequency counts from the corpus of all words belonging to that synset, directly or via the hyponymy relation.The frequency data is used to calculate the “information content” (IC) of a class .Jiang and Conrath specify a distance measure: , where the third class ( ) is the most informative, or most specific, superordinate synset of the two senses and .This is transformed from a distance measure in the WN-Similarity package by taking the reciprocal:In order to evaluate our method we use the data in SemCor as a gold-standard.This is not ideal since we expect that the sense frequency distributions within SemCor will differ from those in the BNC, from which we obtain our thesaurus.Nevertheless, since many systems performed well on the English all-words task for SENSEVAL-2 by using the frequency information in SemCor this is a reasonable approach for evaluation.We generated a thesaurus entry for all polysemous nouns which occurred in SemCor with a frequency 2, and in the BNC with a frequency 10 in the grammatical relations listed in section 2.1 above.The jcn measure uses corpus data for the calculation of IC.We experimented with counts obtained from the BNC and the Brown corpus.The variation in counts had negligible affect on the results.3 The experimental results reported here are obtained using IC counts from the BNC corpus.All the results shown here are those with the size of thesaurus entries ( ) set to 50.4 We calculate the accuracy of finding the predominant sense, when there is indeed one sense with a higher frequency than the others for this word in SemCor ( ).We also calculate the WSD accuracy that would be obtained on SemCor, when using our first sense in all contexts ( ).The results in table 1 show the accuracy of the ranking with respect to SemCor over the entire set of 2595 polysemous nouns in SemCor with the jcn and lesk WordNet similarity measures.The random baseline for choosing the predominant sense over all these words ( ) is 32%.Both WordNet similarity measures beat this baseline.The random baseline for ( ) is 24%.Again, the automatic ranking outperforms this by a large margin.The first sense in SemCor provides an upperbound for this task of 67%.Since both measures gave comparable results we restricted our remaining experiments to jcn because this gave good results for finding the predominant sense, and is much more efficient than lesk, given the precompilation of the IC files.From manual analysis, there are cases where the acquired first sense disagrees with SemCor, yet is intuitively plausible.This is to be expected regardless of any inherent shortcomings of the ranking technique since the senses within SemCor will differ compared to those of the BNC.For example, in WordNet the first listed sense ofpipe is tobacco pipe, and this is ranked joint first according to the Brown files in SemCor with the second sense tube made of metal or plastic used to carry water, oil or gas etc....The automatic ranking from the BNC data lists the latter tube sense first.This seems quite reasonable given the nearest neighbours: tube, cable, wire, tank, hole, cylinder, fitting, tap, cistern, plate....Since SemCor is derived from the Brown corpus, which predates the BNC by up to 30 years 5 and contains a higher proportion of fiction 6, the high ranking for the tobacco pipe sense according to SemCor seems plausible.Another example where the ranking is intuitive, is soil.The first ranked sense according to SemCor is the filth, stain: state of being unclean sense whereas the automatic ranking lists dirt, ground, earth as the first sense, which is the second ranked sense according to SemCor.This seems intuitive given our expected relative usage of these senses in modern British English.Even given the difference in text type between SemCor and the BNC the results are encouraging, especially given that our results are for polysemous nouns.In the English all-words SENSEVAL-2, 25% of the noun data was monosemous.Thus, if we used the sense ranking as a heuristic for an “all nouns” task we would expect to get precision in the region of 60%.We test this below on the SENSEVAL-2 English all-words data.In order to see how well the automatically acquired predominant sense performs on a WSD task from which the WordNet sense ordering has not been taken, we use the SENSEVAL-2 all-words data (Palmer et al., 2001).7 This is a hand-tagged test suite of 5,000 words of running text from three articles from the Penn Treebank II.We use an allwords task because the predominant senses will reflect the sense distributions of all nouns within the documents, rather than a lexical sample task, where the target words are manually determined and the results will depend on the skew of the words in the sample.We do not assume that the predominant sense is a method of WSD in itself.To disambiguate senses a system should take context into account.However, it is important to know the performance of this heuristic for any systems that use it.We generated a thesaurus entry for all polysemous nouns in WordNet as described in section 2.1 above.We obtained the predominant sense for each of these words and used these to label the instances in the noun data within the SENSEVAL-2 English allwords task.We give the results for this WSD task in table 2.We compare results using the first sense listed in SemCor, and the first sense according to the SENSEVAL-2 English all-words test data itself.For the latter, we only take a first-sense where there is more than one occurrence of the noun in the test data and one sense has occurred more times than any of the others.We trivially labelled all monosemous items.Our automatically acquired predominant sense performs nearly as well as the first sense provided by SemCor, which is very encouraging given that our method only uses raw text, with no manual labelling.The performance of the predominant sense provided in the SENSEVAL-2 test data provides an upper bound for this task.The items that were not covered by our method were those with insufficient grammatical relations for the tuples employed.Two such words, today and one, each occurred 5 times in the test data.Extending the grammatical relations used for building the thesaurus should improve the coverage.There were a similar number of words that were not covered by a predominant sense in SemCor.For these one would need to obtain more sense-tagged text in order to use this heuristic.Our automatic ranking gave 67% precision on these items.This demonstrates that our method of providing a first sense from raw text will help when sense-tagged data is not available.A major motivation for our work is to try to capture changes in ranking of senses for documents from different domains.In order to test this we applied our method to two specific sections of the Reuters corpus.We demonstrate that choosing texts from a particular domain has a significant influence on the sense ranking.We chose the domains of SPORTS and FINANCE since there is sufficient material for these domains in this publically available corpus.The Reuters corpus (Rose et al., 2002) is a collection of about 810,000 Reuters, English Language News stories.Many of the articles are economy related, but several other topics are included too.We selected documents from the SPORTS domain (topic code: GSPO) and a limited number of documents from the FINANCE domain (topic codes: ECAT and MCAT).The SPORTS corpus consists of 35317 documents (about 9.1 million words).The FINANCE corpus consists of 117734 documents (about 32.5 million words).We acquired thesauruses for these corpora using the procedure described in section 2.1.There is no existing sense-tagged data for these domains that we could use for evaluation.We therefore decided to select a limited number of words and to evaluate these words qualitatively.The words included in this experiment are not a random sample, since we anticipated different predominant senses in the SPORTS and FINANCE domains for these words.Additionally, we evaluated our method quantitatively using the Subject Field Codes (SFC) resource (Magnini and Cavagli`a, 2000) which annotates WordNet synsets with domain labels.The SFC contains an economy label and a sports label.For this domain label experiment we selected all the words in WordNet that have at least one synset labelled economy and at least one synset labelled sports.The resulting set consisted of 38 words.We contrast the distribution of domain labels for these words in the 2 domain specific corpora.The results for 10 of the words from the qualitative experiment are summarized in table 3 with the WordNet sense number for each word supplied alongside synonyms or hypernyms from WordNet for readability.The results are promising.Most words show the change in predominant sense (PS) that we anticipated.It is not always intuitively clear which of the senses to expect as predominant sense for either a particular domain or for the BNC, but the first senses of words like division and goal shift towards the more specific senses (league and score respectively).Moreover, the chosen senses of the word tie proved to be a textbook example of the behaviour we expected.The word share is among the words whose predominant sense remained the same for all three corpora.We anticipated that the stock certificate sense would be chosen for the FINANCE domain, but this did not happen.However, that particular sense ended up higher in the ranking for the FINANCE domain.Figure 2 displays the results of the second experiment with the domain specific corpora.This figure shows the domain labels assigned to the predominant senses for the set of 38 words after ranking the words using the SPORTS and the FINANCE corpora.We see that both domains have a similarly high percentage of factotum (domain independent) labels, but as we would expect, the other peaks correspond to the economy label for the FINANCE corpus, and the sports label for the SPORTS corpus. inant senses for 38 polysemous words ranked using the SPORTS and FINANCE corpus.Most research in WSD concentrates on using contextual features, typically neighbouring words, to help determine the correct sense of a target word.In contrast, our work is aimed at discovering the predominant senses from raw text because the first sense heuristic is such a useful one, and because handtagged data is not always available.A major benefit of our work, rather than reliance on hand-tagged training data such as SemCor, is that this method permits us to produce predominant senses for the domain and text type required.Buitelaar and Sacaleanu (2001) have previously explored ranking and selection of synsets in GermaNet for specific domains using the words in a given synset, and those related by hyponymy, and a term relevance measure taken from information retrieval.Buitelaar and Sacaleanu have evaluated their method on identifying domain specific concepts using human judgements on 100 items.We have evaluated our method using publically available resources, both for balanced and domain specific text.Magnini and Cavagli`a (2000) have identified WordNet word senses with particular domains, and this has proven useful for high precision WSD (Magnini et al., 2001); indeed in section 5 we used these domain labels for evaluation.Identification of these domain labels for word senses was semiautomatic and required a considerable amount of hand-labelling.Our approach is complementary to this.It only requires raw text from the given domain and because of this it can easily be applied to a new domain, or sense inventory, given sufficient text.Lapata and Brew (2004) have recently also highlighted the importance of a good prior in WSD.They used syntactic evidence to find a prior distribution for verb classes, based on (Levin, 1993), and incorporate this in a WSD system.Lapata and Brew obtain their priors for verb classes directly from subcategorisation evidence in a parsed corpus, whereas we use parsed data to find distributionally similar words (nearest neighbours) to the target word which reflect the different senses of the word and have associated distributional similarity scores which can be used for ranking the senses according to prevalence.There has been some related work on using automatic thesauruses for discovering word senses from corpora Pantel and Lin (2002).In this work the lists of neighbours are themselves clustered to bring out the various senses of the word.They evaluate using the lin measure described above in section 2.2 to determine the precision and recall of these discovered classes with respect to WordNet synsets.This method obtains precision of 61% and recall 51%.If WordNet sense distinctions are not ultimately required then discovering the senses directly from the neighbours list is useful because sense distinctions discovered are relevant to the corpus data and new senses can be found.In contrast, we use the neighbours lists and WordNet similarity measures to impose a prevalence ranking on the WordNet senses.We believe automatic ranking techniques such as ours will be useful for systems that rely on WordNet, for example those that use it for lexical acquisition or WSD.It would be useful however to combine our method of finding predominant senses with one which can automatically find new senses within text and relate these to WordNet synsets, as Ciaramita and Johnson (2003) do with unknown nouns.We have restricted ourselves to nouns in this work, since this PoS is perhaps most affected by domain.We are currently investigating the performance of the first sense heuristic, and this method, for other PoS on SENSEVAL-3 data (McCarthy et al., 2004), although not yet with rankings from domain specific corpora.The lesk measure can be used when ranking adjectives, and adverbs as well as nouns and verbs (which can also be ranked using jcn).Another major advantage that lesk has is that it is applicable to lexical resources which do not have the hierarchical structure that WordNet does, but do have definitions associated with word senses.We have devised a method that uses raw corpus data to automatically find a predominant sense for nouns in WordNet.We use an automatically acquired thesaurus and a WordNet Similarity measure.The automatically acquired predominant senses were evaluated against the hand-tagged resources SemCor and the SENSEVAL-2 English all-words task giving us a WSD precision of 64% on an all-nouns task.This is just 5% lower than results using the first sense in the manually labelled SemCor, and we obtain 67% precision on polysemous nouns that are not in SemCor.In many cases the sense ranking provided in SemCor differs to that obtained automatically because we used the BNC to produce our thesaurus.Indeed, the merit of our technique is the very possibility of obtaining predominant senses from the data at hand.We have demonstrated the possibility of finding predominant senses in domain specific corpora on a sample of nouns.In the future, we will perform a large scale evaluation on domain specific corpora.In particular, we will use balanced and domain specific corpora to isolate words having very different neighbours, and therefore rankings, in the different corpora and to detect and target words for which there is a highly skewed sense distribution in these corpora.There is plenty of scope for further work.We want to investigate the effect of frequency and choice of distributional similarity measure (Weeds et al., 2004).Additionally, we need to determine whether senses which do not occur in a wide variety of grammatical contexts fare badly using distributional measures of similarity, and what can be done to combat this problem using relation specific thesauruses.Whilst we have used WordNet as our sense inventory, it would be possible to use this method with another inventory given a measure of semantic relatedness between the neighbours and the senses.The lesk measure for example, can be used with definitions in any standard machine readable dictionary.We would like to thank Siddharth Patwardhan and Ted Pedersen for making the WN Similarity package publically available.This work was funded by EU-2001-34460 project MEANING: Developing Multilingual Web-scale Language Technologies, UK EPSRC project Robust Accurate Statistical Parsing (RASP) and a UK EPSRC studentship.
Pseudo-Projective Dependency ParsingIn order to realize the full potential of dependency-based syntactic parsing, it is desirable to allow non-projective dependency structures.We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.Experiments using data from the Prague Dependency Treebank show that the combined system can handle nonprojective constructions with a precision sufficient to yield a significant improvement in overall parsing accuracy.This leads to the best reported performance for robust non-projective parsing of Czech.It is sometimes claimed that one of the advantages of dependency grammar over approaches based on constituency is that it allows a more adequate treatment of languages with variable word order, where discontinuous syntactic constructions are more common than in languages like English (Mel’ˇcuk, 1988; Covington, 1990).However, this argument is only plausible if the formal framework allows non-projective dependency structures, i.e. structures where a head and its dependents may correspond to a discontinuous constituent.From the point of view of computational implementation this can be problematic, since the inclusion of non-projective structures makes the parsing problem more complex and therefore compromises efficiency and in practice also accuracy and robustness.Thus, most broad-coverage parsers based on dependency grammar have been restricted to projective structures.This is true of the widely used link grammar parser for English (Sleator and Temperley, 1993), which uses a dependency grammar of sorts, the probabilistic dependency parser of Eisner (1996), and more recently proposed deterministic dependency parsers (Yamada and Matsumoto, 2003; Nivre et al., 2004).It is also true of the adaptation of the Collins parser for Czech (Collins et al., 1999) and the finite-state dependency parser for Turkish by Oflazer (2003).This is in contrast to dependency treebanks, e.g.Prague Dependency Treebank (Hajiˇc et al., 2001b), Danish Dependency Treebank (Kromann, 2003), and the METU Treebank of Turkish (Oflazer et al., 2003), which generally allow annotations with nonprojective dependency structures.The fact that projective dependency parsers can never exactly reproduce the analyses found in non-projective treebanks is often neglected because of the relative scarcity of problematic constructions.While the proportion of sentences containing non-projective dependencies is often 15–25%, the total proportion of non-projective arcs is normally only 1–2%.As long as the main evaluation metric is dependency accuracy per word, with state-of-the-art accuracy mostly below 90%, the penalty for not handling non-projective constructions is almost negligible.Still, from a theoretical point of view, projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.There exist a few robust broad-coverage parsers that produce non-projective dependency structures, notably Tapanainen and J¨arvinen (1997) and Wang and Harper (2004) for English, Foth et al. (2004) for German, and Holan (2004) for Czech.In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).Finally, since non-projective constructions often involve long-distance dependencies, the problem is closely related to the recovery of empty categories and non-local dependencies in constituency-based parsing (Johnson, 2002; Dienes and Dubey, 2003; Jijkoun and de Rijke, 2004; Cahill et al., 2004; Levy and Manning, 2004; Campbell, 2004).In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.First, the training data for the parser is projectivized by applying a minimal number of lifting operations (Kahane et al., 1998) and encoding information about these lifts in arc labels.When the parser is trained on the transformed data, it will ideally learn not only to construct projective dependency structures but also to assign arc labels that encode information about lifts.By applying an inverse transformation to the output of the parser, arcs with non-standard labels can be lowered to their proper place in the dependency graph, giving rise 1The dependency graph has been modified to make the final period a dependent of the main verb instead of being a dependent of a special root node for the sentence. to non-projective structures.We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).The rest of the paper is structured as follows.In section 2 we introduce the graph transformation techniques used to projectivize and deprojectivize dependency graphs, and in section 3 we describe the data-driven dependency parser that is the core of our system.We then evaluate the approach in two steps.First, in section 4, we evaluate the graph transformation techniques in themselves, with data from the Prague Dependency Treebank and the Danish Dependency Treebank.In section 5, we then evaluate the entire parsing system by training and evaluating on data from the Prague Dependency Treebank.We assume that the goal in dependency parsing is to construct a labeled dependency graph of the kind depicted in Figure 1.Formally, we define dependency graphs as follows: 3.A graph D = (W, A) is well-formed iff it is acyclic and connected.If (wi, r, wj) E A, we say that wi is the head of wj and wj a dependent of wi.In the following, we use the notation wi wj to mean that (wi, r, wj) E A; r we also use wi wj to denote an arc with unspecified label and wi —*∗ wj for the reflexive and transitive closure of the (unlabeled) arc relation.The dependency graph in Figure 1 satisfies all the defining conditions above, but it fails to satisfy the condition ofprojectivity (Kahane et al., 1998): The arc connecting the head jedna (one) to the dependent Z (out-of) spans the token je (is), which is not dominated by jedna.As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.Here we use a slightly different notion of lift, applying to individual arcs and moving their head upwards one step at a time: Intuitively, lifting an arc makes the word wk dependent on the head wi of its original head wj (which is unique in a well-formed dependency graph), unless wj is a root in which case the operation is undefined (but then wj —* wk is necessarily projective if the dependency graph is well-formed).Projectivizing a dependency graph by lifting nonprojective arcs is a nondeterministic operation in the general case.However, since we want to preserve as much of the original structure as possible, we are interested in finding a transformation that involves a minimal number of lifts.Even this may be nondeterministic, in case the graph contains several non-projective arcs whose lifts interact, but we use the following algorithm to construct a minimal projective transformation D0 = (W, A0) of a (nonprojective) dependency graph D = (W, A): The function SMALLEST-NONP-ARC returns the non-projective arc with the shortest distance from head to dependent (breaking ties from left to right).Applying the function PROJECTIVIZE to the graph in Figure 1 yields the graph in Figure 2, where the problematic arc pointing to Z has been lifted from the original head jedna to the ancestor je.Using the terminology of Kahane et al. (1998), we say that jedna is the syntactic head of Z, while je is its linear head in the projectivized representation.Unlike Kahane et al. (1998), we do not regard a projectivized representation as the final target of the parsing process.Instead, we want to apply an inverse transformation to recover the underlying (nonprojective) dependency graph.In order to facilitate this task, we extend the set of arc labels to encode information about lifting operations.In principle, it would be possible to encode the exact position of the syntactic head in the label of the arc from the linear head, but this would give a potentially infinite set of arc labels and would make the training of the parser very hard.In practice, we can therefore expect a trade-off such that increasing the amount of information encoded in arc labels will cause an increase in the accuracy of the inverse transformation but a decrease in the accuracy with which the parser can construct the labeled representations.To explore this tradeoff, we have performed experiments with three different encoding schemes (plus a baseline), which are described schematically in Table 1.The baseline simply retains the original labels for all arcs, regardless of whether they have been lifted or not, and the number of distinct labels is therefore simply the number n of distinct dependency types.2 In the first encoding scheme, called Head, we use a new label d↑h for each lifted arc, where d is the dependency relation between the syntactic head and the dependent in the non-projective representation, and h is the dependency relation that the syntactic head has to its own head in the underlying structure.Using this encoding scheme, the arc from je to Z in Figure 2 would be assigned the label AuxP↑Sb (signifying an AuxP that has been lifted from a Sb).In the second scheme, Head+Path, we in addition modify the label of every arc along the lifting path from the syntactic to the linear head so that if the original label is p the new label is p↓.Thus, the arc from je to jedna will be labeled 5b↓ (to indicate that there is a syntactic head below it).In the third and final scheme, denoted Path, we keep the extra infor2Note that this is a baseline for the parsing experiment only (Experiment 2).For Experiment 1 it is meaningless as a baseline, since it would result in 0% accuracy. mation on path labels but drop the information about the syntactic head of the lifted arc, using the label d↑ instead of d↑h (AuxP↑ instead of AuxP↑Sb).As can be seen from the last column in Table 1, both Head and Head+Path may theoretically lead to a quadratic increase in the number of distinct arc labels (Head+Path being worse than Head only by a constant factor), while the increase is only linear in the case of Path.On the other hand, we can expect Head+Path to be the most useful representation for reconstructing the underlying non-projective dependency graph.In approaching this problem, a variety of different methods are conceivable, including a more or less sophisticated use of machine learning.In the present study, we limit ourselves to an algorithmic approach, using a deterministic breadthfirst search.The details of the transformation procedure are slightly different depending on the encoding schemes: d↑h let the linear head be the syntactic head). target arc must have the form wl −→ wm; if no target arc is found, Head is used as backoff. must have the form wl −→ wm and no outgoing arcs of the form wm p'↓ −→ wo; no backoff.In section 4 we evaluate these transformations with respect to projectivized dependency treebanks, and in section 5 they are applied to parser output.Before we turn to the evaluation, however, we need to introduce the data-driven dependency parser used in the latter experiments.In the experiments below, we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs,3 previously tested on Swedish (Nivre et al., 2004) and English (Nivre and Scholz, 2004).The parser builds dependency graphs by traversing the input from left to right, using a stack to store tokens that are not yet complete with respect to their dependents.At each point during the derivation, the parser has a choice between pushing the next input token onto the stack – with or without adding an arc from the token on top of the stack to the token pushed – and popping a token from the stack – with or without adding an arc from the next input token to the token popped.More details on the parsing algorithm can be found in Nivre (2003).The choice between different actions is in general nondeterministic, and the parser relies on a memorybased classifier, trained on treebank data, to predict the next action based on features of the current parser configuration.Table 2 shows the features used in the current version of the parser.At each point during the derivation, the prediction is based on six word tokens, the two topmost tokens on the stack, and the next four input tokens.For each token, three types of features may be taken into account: the word form; the part-of-speech assigned by an automatic tagger; and labels on previously assigned dependency arcs involving the token – the arc from its head and the arcs to its leftmost and rightmost dependent, respectively.Except for the left3The graphs satisfy all the well-formedness conditions given in section 2 except (possibly) connectedness.For robustness reasons, the parser may output a set of dependency trees instead of a single tree. most dependent of the next input token, dependency type features are limited to tokens on the stack.The prediction based on these features is a knearest neighbor classification, using the IB1 algorithm and k = 5, the modified value difference metric (MVDM) and class voting with inverse distance weighting, as implemented in the TiMBL software package (Daelemans et al., 2003).More details on the memory-based prediction can be found in Nivre et al. (2004) and Nivre and Scholz (2004).The first experiment uses data from two dependency treebanks.The Prague Dependency Treebank (PDT) consists of more than 1M words of newspaper text, annotated on three levels, the morphological, analytical and tectogrammatical levels (Hajiˇc, 1998).Our experiments all concern the analytical annotation, and the first experiment is based only on the training part.The Danish Dependency Treebank (DDT) comprises about 100K words of text selected from the Danish PAROLE corpus, with annotation of primary and secondary dependencies (Kromann, 2003).The entire treebank is used in the experiment, but only primary dependencies are considered.4 In all experiments, punctuation tokens are included in the data but omitted in evaluation scores.In the first part of the experiment, dependency graphs from the treebanks were projectivized using the algorithm described in section 2.As shown in Table 3, the proportion of sentences containing some non-projective dependency ranges from about 15% in DDT to almost 25% in PDT.However, the overall percentage of non-projective arcs is less than 2% in PDT and less than 1% in DDT.The last four columns in Table 3 show the distribution of nonprojective arcs with respect to the number of lifts required.It is worth noting that, although nonprojective constructions are less frequent in DDT than in PDT, they seem to be more deeply nested, since only about 80% can be projectivized with a single lift, while almost 95% of the non-projective arcs in PDT only require a single lift.In the second part of the experiment, we applied the inverse transformation based on breadth-first search under the three different encoding schemes.The results are given in Table 4.As expected, the most informative encoding, Head+Path, gives the highest accuracy with over 99% of all non-projective arcs being recovered correctly in both data sets.However, it can be noted that the results for the least informative encoding, Path, are almost comparable, while the third encoding, Head, gives substantially worse results for both data sets.We also see that the increase in the size of the label sets for Head and Head+Path is far below the theoretical upper bounds given in Table 1.The increase is generally higher for PDT than for DDT, which indicates a greater diversity in non-projective constructions.The second experiment is limited to data from PDT.5 The training part of the treebank was projectivized under different encoding schemes and used to train memory-based dependency parsers, which were run on the test part of the treebank, consisting of 7,507 sentences and 125,713 tokens.6 The inverse transformation was applied to the output of the parsers and the result compared to the gold standard test set.Table 5 shows the overall parsing accuracy attained with the three different encoding schemes, compared to the baseline (no special arc labels) and to training directly on non-projective dependency graphs.Evaluation metrics used are Attachment Score (AS), i.e. the proportion of tokens that are attached to the correct head, and Exact Match (EM), i.e. the proportion of sentences for which the dependency graph exactly matches the gold standard.In the labeled version of these metrics (L) both heads and arc labels must be correct, while the unlabeled version (U) only considers heads.The first thing to note is that projectivizing helps in itself, even if no encoding is used, as seen from the fact that the projective baseline outperforms the non-projective training condition by more than half a percentage point on attachment score, although the gain is much smaller with respect to exact match.The second main result is that the pseudo-projective approach to parsing (using special arc labels to guide an inverse transformation) gives a further improvement of about one percentage point on attachment score.With respect to exact match, the improvement is even more noticeable, which shows quite clearly that even if non-projective dependencies are rare on the token level, they are nevertheless important for getting the global syntactic structure correct.All improvements over the baseline are statistically significant beyond the 0.01 level (McNemar’s test).By contrast, when we turn to a comparison of the three encoding schemes it is hard to find any significant differences, and the overall impression is that it makes little or no difference which encoding scheme is used, as long as there is some indication of which words are assigned their linear head instead of their syntactic head by the projective parser.This may seem surprising, given the experiments reported in section 4, but the explanation is probably that the non-projective dependencies that can be recovered at all are of the simple kind that only requires a single lift, where the encoding of path information is often redundant.It is likely that the more complex cases, where path information could make a difference, are beyond the reach of the parser in most cases.However, if we consider precision, recall and Fmeasure on non-projective dependencies only, as shown in Table 6, some differences begin to emerge.The most informative scheme, Head+Path, gives the highest scores, although with respect to Head the difference is not statistically significant, while the least informative scheme, Path – with almost the same performance on treebank transformation – is significantly lower (p < 0.01).On the other hand, given that all schemes have similar parsing accuracy overall, this means that the Path scheme is the least likely to introduce errors on projective arcs.The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.Although the best published results for the Collins parser is 80% UAS (Collins, 1999), this parser reaches 82% when trained on the entire training data set, and an adapted version of Charniak’s parser (Charniak, 2000) performs at 84% (Jan Hajiˇc, pers. comm.).However, the accuracy is considerably higher than previously reported results for robust non-projective parsing of Czech, with a best performance of 73% UAS (Holan, 2004).Compared to related work on the recovery of long-distance dependencies in constituency-based parsing, our approach is similar to that of Dienes and Dubey (2003) in that the processing of non-local dependencies is partly integrated in the parsing process, via an extension of the set of syntactic categories, whereas most other approaches rely on postprocessing only.However, while Dienes and Dubey recognize empty categories in a pre-processing step and only let the parser find their antecedents, we use the parser both to detect dislocated dependents and to predict either the type or the location of their syntactic head (or both) and use post-processing only to transform the graph in accordance with the parser’s analysis.We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.The main result is that the combined system can recover non-projective dependencies with a precision sufficient to give a significant improvement in overall parsing accuracy, especially with respect to the exact match criterion, leading to the best reported performance for robust non-projective parsing of Czech.This work was supported in part by the Swedish Research Council (621-2002-4207).Memory-based classifiers for the experiments were created using TiMBL (Daelemans et al., 2003).Special thanks to Jan Hajiˇc and Matthias Trautner Kromann for assistance with the Czech and Danish data, respectively, and to Jan Hajiˇc, Tom´aˇs Holan, Dan Zeman and three anonymous reviewers for valuable comments on a preliminary version of the paper.
Vector-based Models of Semantic CompositionThis paper proposes a framework for representing the meaning of phrases and sentences in vector space.Central to our approach is vector composition which we operationalize in terms of additive and multiplicative functions.Under this framework, we introduce a wide range of composition models which we evaluate empirically on a sentence similarity task.Experimental results demonstrate that the multiplicative models are superior to the additive alternatives when compared against human judgments.Vector-based models of word meaning (Lund and Burgess, 1996; Landauer and Dumais, 1997) have become increasingly popular in natural language processing (NLP) and cognitive science.The appeal of these models lies in their ability to represent meaning simply by using distributional information under the assumption that words occurring within similar contexts are semantically similar (Harris, 1968).A variety of NLP tasks have made good use of vector-based models.Examples include automatic thesaurus extraction (Grefenstette, 1994), word sense discrimination (Sch¨utze, 1998) and disambiguation (McCarthy et al., 2004), collocation extraction (Schone and Jurafsky, 2001), text segmentation (Choi et al., 2001) , and notably information retrieval (Salton et al., 1975).In cognitive science vector-based models have been successful in simulating semantic priming (Lund and Burgess, 1996; Landauer and Dumais, 1997) and text comprehension (Landauer and Dumais, 1997; Foltz et al., 1998).Moreover, the vector similarities within such semantic spaces have been shown to substantially correlate with human similarity judgments (McDonald, 2000) and word association norms (Denhire and Lemaire, 2004).Despite their widespread use, vector-based models are typically directed at representing words in isolation and methods for constructing representations for phrases or sentences have received little attention in the literature.In fact, the commonest method for combining the vectors is to average them.Vector averaging is unfortunately insensitive to word order, and more generally syntactic structure, giving the same representation to any constructions that happen to share the same vocabulary.This is illustrated in the example below taken from Landauer et al. (1997).Sentences (1-a) and (1-b) contain exactly the same set of words but their meaning is entirely different.(1) a.It was not the sales manager who hit the bottle that day, but the office worker with the serious drinking problem. b.That day the office manager, who was drinking, hit the problem sales worker with a bottle, but it was not serious.While vector addition has been effective in some applications such as essay grading (Landauer and Dumais, 1997) and coherence assessment (Foltz et al., 1998), there is ample empirical evidence that syntactic relations across and within sentences are crucial for sentence and discourse processing (Neville et al., 1991; West and Stanovich, 1986) and modulate cognitive behavior in sentence priming (Till et al., 1988) and inference tasks (Heit and Rubinstein, 1994).Computational models of semantics which use symbolic logic representations (Montague, 1974) can account naturally for the meaning of phrases or sentences.Central in these models is the notion of compositionality — the meaning of complex expressions is determined by the meanings of their constituent expressions and the rules used to combine them.Here, semantic analysis is guided by syntactic structure, and therefore sentences (1-a) and (1-b) receive distinct representations.The downside of this approach is that differences in meaning are qualitative rather than quantitative, and degrees of similarity cannot be expressed easily.In this paper we examine models of semantic composition that are empirically grounded and can represent similarity relations.We present a general framework for vector-based composition which allows us to consider different classes of models.Specifically, we present both additive and multiplicative models of vector combination and assess their performance on a sentence similarity rating experiment.Our results show that the multiplicative models are superior and correlate significantly with behavioral data.The problem of vector composition has received some attention in the connectionist literature, particularly in response to criticisms of the ability of connectionist representations to handle complex structures (Fodor and Pylyshyn, 1988).While neural networks can readily represent single distinct objects, in the case of multiple objects there are fundamental difficulties in keeping track of which features are bound to which objects.For the hierarchical structure of natural language this binding problem becomes particularly acute.For example, simplistic approaches to handling sentences such as John loves Mary and Mary loves John typically fail to make valid representations in one of two ways.Either there is a failure to distinguish between these two structures, because the network fails to keep track of the fact that John is subject in one and object in the other, or there is a failure to recognize that both structures involve the same participants, because John as a subject has a distinct representation from John as an object.In contrast, symbolic representations can naturally handle the binding of constituents to their roles, in a systematic manner that avoids both these problems.Smolensky (1990) proposed the use of tensor products as a means of binding one vector to another.The tensor product u ® v is a matrix whose components are all the possible products uivj of the components of vectors u and v. A major difficulty with tensor products is their dimensionality which is higher than the dimensionality of the original vectors (precisely, the tensor product has dimensionality m x n).To overcome this problem, other techniques have been proposed in which the binding of two vectors results in a vector which has the same dimensionality as its components.Holographic reduced representations (Plate, 1991) are one implementation of this idea where the tensor product is projected back onto the space of its components.The projection is defined in terms of circular convolution a mathematical function that compresses the tensor product of two vectors.The compression is achieved by summing along the transdiagonal elements of the tensor product.Noisy versions of the original vectors can be recovered by means of circular correlation which is the approximate inverse of circular convolution.The success of circular correlation crucially depends on the components of the n-dimensional vectors u and v being randomly distributed with mean 0 and variance 1n.This poses problems for modeling linguistic data which is typically represented by vectors with non-random structure.Vector addition is by far the most common method for representing the meaning of linguistic sequences.For example, assuming that individual words are represented by vectors, we can compute the meaning of a sentence by taking their mean (Foltz et al., 1998; Landauer and Dumais, 1997).Vector addition does not increase the dimensionality of the resulting vector.However, since it is order independent, it cannot capture meaning differences that are modulated by differences in syntactic structure.Kintsch (2001) proposes a variation on the vector addition theme in an attempt to model how the meaning of a predicate (e.g., run) varies depending on the arguments it operates upon (e.g, the horse ran vs. the color ran).The idea is to add not only the vectors representing the predicate and its argument but also the neighbors associated with both of them.The neighbors, Kintsch argues, can ‘strengthen features of the predicate that are appropriate for the argument of the predication’. animal stable village gallop jokey horse 0 6 2 10 4 run 1 8 4 4 0 Unfortunately, comparisons across vector composition models have been few and far between in the literature.The merits of different approaches are illustrated with a few hand picked examples and parameter values and large scale evaluations are uniformly absent (see Frank et al. (2007) for a criticism of Kintsch’s (2001) evaluation standards).Our work proposes a framework for vector composition which allows the derivation of different types of models and licenses two fundamental composition operations, multiplication and addition (and their combination).Under this framework, we introduce novel composition models which we compare empirically against previous work using a rigorous evaluation methodology.We formulate semantic composition as a function of two vectors, u and v. We assume that individual words are represented by vectors acquired from a corpus following any of the parametrisations that have been suggested in the literature.1 We briefly note here that a word’s vector typically represents its co-occurrence with neighboring words.The construction of the semantic space depends on the definition of linguistic context (e.g., neighbouring words can be documents or collocations), the number of components used (e.g., the k most frequent words in a corpus), and their values (e.g., as raw co-occurrence frequencies or ratios of probabilities).A hypothetical semantic space is illustrated in Figure 1.Here, the space has only five dimensions, and the matrix cells denote the co-occurrence of the target words (horse and run) with the context words animal, stable, and so on.Let p denote the composition of two vectors u and v, representing a pair of constituents which stand in some syntactic relation R. Let K stand for any additional knowledge or information which is needed to construct the semantics of their composition.We define a general class of models for this process of composition as: The expression above allows us to derive models for which p is constructed in a distinct space from u and v, as is the case for tensor products.It also allows us to derive models in which composition makes use of background knowledge K and models in which composition has a dependence, via the argument R, on syntax.To derive specific models from this general framework requires the identification of appropriate constraints to narrow the space of functions being considered.One particularly useful constraint is to hold R fixed by focusing on a single well defined linguistic structure, for example the verb-subject relation.Another simplification concerns K which can be ignored so as to explore what can be achieved in the absence of additional knowledge.This reduces the class of models to: However, this still leaves the particular form of the function f unspecified.Now, if we assume that p lies in the same space as u and v, avoiding the issues of dimensionality associated with tensor products, and that f is a linear function, for simplicity, of the cartesian product of u and v, then we generate a class of additive models: where A and B are matrices which determine the contributions made by u and v to the product p. In contrast, if we assume that f is a linear function of the tensor product of u and v, then we obtain multiplicative models: where C is a tensor of rank 3, which projects the tensor product of u and v onto the space of p. Further constraints can be introduced to reduce the free parameters in these models.So, if we assume that only the ith components of u and v contribute to the ith component of p, that these components are not dependent on i, and that the function is symmetric with regard to the interchange of u and v, we obtain a simpler instantiation of an additive model: Analogously, under the same assumptions, we obtain the following simpler multiplicative model: only the ith components of u and v contribute to the ith component of p. Another class of models can be derived by relaxing this constraint.To give a concrete example, circular convolution is an instance of the general multiplicative model which breaks this constraint by allowing uj to contribute to pi: For example, according to (5), the addition of the two vectors representing horse and run in Figure 1 would yield horse + run = [1 14 6 14 4].Whereas their product, as given by (6), is horse · run = [0 48 8 40 0].Although the composition model in (5) is commonly used in the literature, from a linguistic perspective, the model in (6) is more appealing.Simply adding the vectors u and v lumps their contents together rather than allowing the content of one vector to pick out the relevant content of the other.Instead, it could be argued that the contribution of the ith component of u should be scaled according to its relevance to v, and vice versa.In effect, this is what model (6) achieves.As a result of the assumption of symmetry, both these models are ‘bag of words’ models and word order insensitive.Relaxing the assumption of symmetry in the case of the simple additive model produces a model which weighs the contribution of the two components differently: This allows additive models to become more syntax aware, since semantically important constituents can participate more actively in the composition.As an example if we set α to 0.4 and β to 0.6, then horse= [0 2.4 0.8 4 1.6] and run = [0.6 4.8 2.4 2.4 0], and their sum horse + run = [0.6 5.6 3.2 6.4 1.6].An extreme form of this differential in the contribution of constituents is where one of the vectors, say u, contributes nothing at all to the combination: Admittedly the model in (8) is impoverished and rather simplistic, however it can serve as a simple baseline against which to compare more sophisticated models.The models considered so far assume that components do not ‘interfere’ with each other, i.e., that It is also possible to re-introduce the dependence on K into the model of vector composition.For additive models, a natural way to achieve this is to include further vectors into the summation.These vectors are not arbitrary and ideally they must exhibit some relation to the words of the construction under consideration.When modeling predicate-argument structures, Kintsch (2001) proposes including one or more distributional neighbors, n, of the predicate: Note that considerable latitude is allowed in selecting the appropriate neighbors.Kintsch (2001) considers only the m most similar neighbors to the predicate, from which he subsequently selects k, those most similar to its argument.So, if in the composition of horse with run, the chosen neighbor is ride, ride = [2 15 7 9 1], then this produces the representation horse + run + ride = [3 29 13 23 5].In contrast to the simple additive model, this extended model is sensitive to syntactic structure, since n is chosen from among the neighbors of the predicate, distinguishing it from the argument.Although we have presented multiplicative and additive models separately, there is nothing inherent in our formulation that disallows their combination.The proposal is not merely notational.One potential drawback of multiplicative models is the effect of components with value zero.Since the product of zero with any number is itself zero, the presence of zeroes in either of the vectors leads to information being essentially thrown away.Combining the multiplicative model with an additive model, which does not suffer from this problem, could mitigate this problem: pi = αui +βvi +γuivi (11) where α, β, and γ are weighting constants.We evaluated the models presented in Section 3 on a sentence similarity task initially proposed by Kintsch (2001).In his study, Kintsch builds a model of how a verb’s meaning is modified in the context of its subject.He argues that the subjects of ran in The color ran and The horse ran select different senses of ran.This change in the verb’s sense is equated to a shift in its position in semantic space.To quantify this shift, Kintsch proposes measuring similarity relative to other verbs acting as landmarks, for example gallop and dissolve.The idea here is that an appropriate composition model when applied to horse and ran will yield a vector closer to the landmark gallop than dissolve.Conversely, when color is combined with ran, the resulting vector will be closer to dissolve than gallop.Focusing on a single compositional structure, namely intransitive verbs and their subjects, is a good point of departure for studying vector combination.Any adequate model of composition must be able to represent argument-verb meaning.Moreover by using a minimal structure we factor out inessential degrees of freedom and are able to assess the merits of different models on an equal footing.Unfortunately, Kintsch (2001) demonstrates how his own composition algorithm works intuitively on a few hand selected examples but does not provide a comprehensive test set.In order to establish an independent measure of sentence similarity, we assembled a set of experimental materials and elicited similarity ratings from human subjects.In the following we describe our data collection procedure and give details on how our composition models were constructed and evaluated.Materials and Design Our materials consisted of sentences with an an intransitive verb and its subject.We first compiled a list of intransitive verbs from CELEX2.All occurrences of these verbs with a subject noun were next extracted from a RASP parsed (Briscoe and Carroll, 2002) version of the British National Corpus (BNC).Verbs and nouns that were attested less than fifty times in the BNC were removed as they would result in unreliable vectors.Each reference subject-verb tuple (e.g., horse ran) was paired with two landmarks, each a synonym of the verb.The landmarks were chosen so as to represent distinct verb senses, one compatible with the reference (e.g., horse galloped) and one incompatible (e.g., horse dissolved).Landmarks were taken from WordNet (Fellbaum, 1998).Specifically, they belonged to different synsets and were maximally dissimilar as measured by the Jiang and Conrath (1997) measure.3 Our initial set of candidate materials consisted of 20 verbs, each paired with 10 nouns, and 2 landmarks (400 pairs of sentences in total).These were further pretested to allow the selection of a subset of items showing clear variations in sense as we wanted to have a balanced set of similar and dissimilar sentences.In the pretest, subjects saw a reference sentence containing a subject-verb tuple and its landmarks and were asked to choose which landmark was most similar to the reference or neither.Our items were converted into simple sentences (all in past tense) by adding articles where appropriate.The stimuli were administered to four separate groups; each group saw one set of 100 sentences.The pretest was completed by 53 participants.For each reference verb, the subjects’ responses were entered into a contingency table, whose rows corresponded to nouns and columns to each possible answer (i.e., one of the two landmarks).Each cell recorded the number of times our subjects selected the landmark as compatible with the noun or not.We used Fisher’s exact test to determine which verbs and nouns showed the greatest variation in landmark preference and items with p-values greater than 0.001 were discarded.This yielded a reduced set of experimental items (120 in total) consisting of 15 reference verbs, each with 4 nouns, and 2 landmarks.Procedure and Subjects Participants first saw a set of instructions that explained the sentence similarity task and provided several examples.Then the experimental items were presented; each contained two sentences, one with the reference verb and one with its landmark.Examples of our items are given in Table 1.Here, burn is a high similarity landmark (High) for the reference The fire glowed, whereas beam is a low similarity landmark (Low).The opposite is the case for the reference The face glowed.Sentence pairs were presented serially in random order.Participants were asked to rate how similar the two sentences were on a scale of one to seven.The study was conducted remotely over the Internet using Webexp4, a software package designed for conducting psycholinguistic studies over the web.49 unpaid volunteers completed the experiment, all native speakers of English.Analysis of Similarity Ratings The reliability of the collected judgments is important for our evaluation experiments; we therefore performed several tests to validate the quality of the ratings.First, we examined whether participants gave high ratings to high similarity sentence pairs and low ratings to low similarity ones.Figure 2 presents a box-and-whisker plot of the distribution of the ratings.As we can see sentences with high similarity landmarks are perceived as more similar to the reference sentence.A Wilcoxon rank sum test confirmed that the difference is statistically significant (p < 0.01).We also measured how well humans agree in their ratings.We employed leave-one-out resampling (Weiss and Kulikowski, 1991), by correlating the data obtained from each participant with the ratings obtained from all other participants.We used Spearman’s ρ, a non parametric correlation coefficient, to avoid making any assumptions about the distribution of the similarity ratings.The average inter-subject agreement5 was ρ = 0.40.We believe that this level of agreement is satisfactory given that naive subjects are asked to provide judgments on fine-grained semantic distinctions (see Table 1).More evidence that this is not an easy task comes from Figure 2 where we observe some overlap in the ratings for High and Low similarity items.Model Parameters Irrespectively of their form, all composition models discussed here are based on a semantic space for representing the meanings of individual words.The semantic space we used in our experiments was built on a lemmatised version of the BNC.Following previous work (Bullinaria and Levy, 2007), we optimized its parameters on a word-based semantic similarity task.The task involves examining the degree of linear relationship between the human judgments for two individual words and vector-based similarity values.We experimented with a variety of dimensions (ranging from 50 to 500,000), vector component definitions (e.g., pointwise mutual information or log likelihood ratio) and similarity measures (e.g., cosine or confusion probability).We used WordSim353, a benchmark dataset (Finkelstein et al., 2002), consisting of relatedness judgments (on a scale of 0 to 10) for 353 word pairs.We obtained best results with a model using a context window of five words on either side of the target word, the cosine measure, and 2,000 vector components.The latter were the most common context words (excluding a stop list of function words).These components were set to the ratio of the probability of the context word given the target word to the probability of the context word overall.This configuration gave high correlations with the WordSim353 similarity judgments using the cosine measure.In addition, Bullinaria and Levy (2007) found that these parameters perform well on a number of other tasks such as the synonymy task from the Test ofEnglish as a Foreign Language (TOEFL).Our composition models have no additional parameters beyond the semantic space just described, with three exceptions.First, the additive model in (7) weighs differentially the contribution of the two constituents.In our case, these are the subject noun and the intransitive verb.To this end, we optimized the weights on a small held-out set.Specifically, we considered eleven models, varying in their weightings, in steps of 10%, from 100% noun through 50% of both verb and noun to 100% verb.For the best performing model the weight for the verb was 80% and for the noun 20%.Secondly, we optimized the weightings in the combined model (11) with a similar grid search over its three parameters.This yielded a weighted sum consisting of 95% verb, 0% noun and 5% of their multiplicative combination.Finally, Kintsch’s (2001) additive model has two extra parameters.The m neighbors most similar to the predicate, and the k of m neighbors closest to its argument.In our experiments we selected parameters that Kintsch reports as optimal.Specifically, m was set to 20 and m to 1.Evaluation Methodology We evaluated the proposed composition models in two ways.First, we used the models to estimate the cosine similarity between the reference sentence and its landmarks.We expect better models to yield a pattern of similarity scores like those observed in the human ratings (see Figure 2).A more scrupulous evaluation requires directly correlating all the individual participants’ similarity judgments with those of the models.6 We used Spearman’s p for our correlation analyses.Again, better models should correlate better with the experimental data.We assume that the inter-subject agreement can serve as an upper bound for comparing the fit of our models against the human judgments.Our experiments assessed the performance of seven composition models.These included three additive models, i.e., simple addition (equation (5), Add), weighted addition (equation (7), WeightAdd), and Kintsch’s (2001) model (equation (10), Kintsch), a multiplicative model (equation (6), Multiply), and also a model which combines multiplication with addition (equation (11), Combined).As a baseline we simply estimated the similarity between the reference verb and its landmarks without taking the subject noun into account (equation (8), NonComp).Table 2 shows the average model ratings for High and Low similarity items.For comparison, we also show the human ratings for these items (UpperBound).Here, we are interested in relative differences, since the two types of ratings correspond to different scales.Model similarities have been estimated using cosine which ranges from 0 to 1, whereas our subjects rated the sentences on a scale from 1 to 7.The simple additive model fails to distinguish between High and Low Similarity items.We observe a similar pattern for the non compositional baseline model, the weighted additive model and Kintsch (2001).The multiplicative and combined models yield means closer to the human ratings.The difference between High and Low similarity values estimated by these models are statistically significant (p < 0.01 using the Wilcoxon rank sum test).Figure 3 shows the distribution of estimated similarities under the multiplicative model.The results of our correlation analysis are also given in Table 2.As can be seen, all models are significantly correlated with the human ratings.In order to establish which ones fit our data better, we examined whether the correlation coefficients achieved differ significantly using a t-test (Cohen and Cohen, 1983).The lowest correlation (p = 0.04) is observed for the simple additive model which is not significantly different from the non-compositional baseline model.The weighted additive model (p = 0.09) is not significantly different from the baseline either or Kintsch (2001) (p = 0.09).Given that the basis of Kintsch’s model is the summation of the verb, a neighbor close to the verb and the noun, it is not surprising that it produces results similar to a summation which weights the verb more heavily than the noun.The multiplicative model yields a better fit with the experimental data, ρ = 0.17.The combined model is best overall with ρ = 0.19.However, the difference between the two models is not statistically significant.Also note that in contrast to the combined model, the multiplicative model does not have any free parameters and hence does not require optimization for this particular task.In this paper we presented a general framework for vector-based semantic composition.We formulated composition as a function of two vectors and introduced several models based on addition and multiplication.Despite the popularity of additive models, our experimental results showed the superiority of models utilizing multiplicative combinations, at least for the sentence similarity task attempted here.We conjecture that the additive models are not sensitive to the fine-grained meaning distinctions involved in our materials.Previous applications of vector addition to document indexing (Deerwester et al., 1990) or essay grading (Landauer et al., 1997) were more concerned with modeling the gist of a document rather than the meaning of its sentences.Importantly, additive models capture composition by considering all vector components representing the meaning of the verb and its subject, whereas multiplicative models consider a subset, namely non-zero components.The resulting vector is sparser but expresses more succinctly the meaning of the predicate-argument structure, and thus allows semantic similarity to be modelled more accurately.Further research is needed to gain a deeper understanding of vector composition, both in terms of modeling a wider range of structures (e.g., adjectivenoun, noun-noun) and also in terms of exploring the space of models more fully.We anticipate that more substantial correlations can be achieved by implementing more sophisticated models from within the framework outlined here.In particular, the general class of multiplicative models (see equation (4)) appears to be a fruitful area to explore.Future directions include constraining the number of free parameters in linguistically plausible ways and scaling to larger datasets.The applications of the framework discussed here are many and varied both for cognitive science and NLP.We intend to assess the potential of our composition models on context sensitive semantic priming (Till et al., 1988) and inductive inference (Heit and Rubinstein, 1994).NLP tasks that could benefit from composition models include paraphrase identification and context-dependent language modeling (Coccaro and Jurafsky, 1998).
A Single Generative Model for Joint Morphological Segmentation and Syntactic ParsingMorphological processes in Semitic languages deliver space-delimited words which introduce multiple, distinct, syntactic units into the structure of the input sentence.These words are in turn highly ambiguous, breaking the assumption underlying most parsers that the yield of a tree for a given sentence is known in advance.Here we propose a single joint model for performing both morphological segmentation and syntactic disambiguation which bypasses the associated circularity.Using a treebank grammar, a data-driven lexicon, and a linguistically motivated unknown-tokens handling technique our model outperforms previous pipelined, integrated or factorized systems for Hebrew morphological and syntactic processing, yielding an error reduction of 12% over the best published results so far.Current state-of-the-art broad-coverage parsers assume a direct correspondence between the lexical items ingrained in the proposed syntactic analyses (the yields of syntactic parse-trees) and the spacedelimited tokens (henceforth, ‘tokens’) that constitute the unanalyzed surface forms (utterances).In Semitic languages the situation is very different.In Modern Hebrew (Hebrew), a Semitic language with very rich morphology, particles marking conjunctions, prepositions, complementizers and relativizers are bound elements prefixed to the word (Glinert, 1989).The Hebrew token ‘bcl’1, for example, stands for the complete prepositional phrase 'We adopt here the transliteration of (Sima’an et al., 2001).“in the shadow”.This token may further embed into a larger utterance, e.g., ‘bcl hneim’ (literally “in-the-shadow the-pleasant”, meaning roughly “in the pleasant shadow”) in which the dominated Noun is modified by a proceeding space-delimited adjective.It should be clear from the onset that the particle b (“in”) in ‘bcl’ may then attach higher than the bare noun cl (“shadow”).This leads to word- and constituent-boundaries discrepancy, which breaks the assumptions underlying current state-of-the-art statistical parsers.One way to approach this discrepancy is to assume a preceding phase of morphological segmentation for extracting the different lexical items that exist at the token level (as is done, to the best of our knowledge, in all parsing related work on Arabic and its dialects (Chiang et al., 2006)).The input for the segmentation task is however highly ambiguous for Semitic languages, and surface forms (tokens) may admit multiple possible analyses as in (BarHaim et al., 2007; Adler and Elhadad, 2006).The aforementioned surface form bcl, for example, may also stand for the lexical item “onion”, a Noun.The implication of this ambiguity for a parser is that the yield of syntactic trees no longer consists of spacedelimited tokens, and the expected number of leaves in the syntactic analysis in not known in advance.Tsarfaty (2006) argues that for Semitic languages determining the correct morphological segmentation is dependent on syntactic context and shows that increasing information sharing between the morphological and the syntactic components leads to improved performance on the joint task.Cohen and Smith (2007) followed up on these results and proposed a system for joint inference of morphological and syntactic structures using factored models each designed and trained on its own.Here we push the single-framework conjecture across the board and present a single model that performs morphological segmentation and syntactic disambiguation in a fully generative framework.We claim that no particular morphological segmentation is a-priory more likely for surface forms before exploring the compositional nature of syntactic structures, including manifestations of various long-distance dependencies.Morphological segmentation decisions in our model are delegated to a lexeme-based PCFG and we show that using a simple treebank grammar, a data-driven lexicon, and a linguistically motivated unknown-tokens handling our model outperforms (Tsarfaty, 2006) and (Cohen and Smith, 2007) on the joint task and achieves state-of-the-art results on a par with current respective standalone models.2Segmental morphology Hebrew consists of seven particles m(“from”) f(“when”/“who”/“that”) h(“the”) w(“and”) k(“like”) l(“to”) and b(“in”). which may never appear in isolation and must always attach as prefixes to the following open-class category item we refer to as stem.Several such particles may be prefixed onto a single stem, in which case the affixation is subject to strict linear precedence constraints.Co-occurrences among the particles themselves are subject to further syntactic and lexical constraints relative to the stem.While the linear precedence of segmental morphemes within a token is subject to constraints, the dominance relations among their mother and sister constituents is rather free.The relativizer f(“that”) for example, may attach to an arbitrarily long relative clause that goes beyond token boundaries.The attachment in such cases encompasses a long distance dependency that cannot be captured by Markovian processes that are typically used for morphological disambiguation.The same argument holds for resolving PP attachment of a prefixed preposition or marking conjunction of elements of any kind.A less canonical representation of segmental morphology is triggered by a morpho-phonological process of omitting the definite article h when occurring after the particles b or l. This process triggers ambiguity as for the definiteness status of Nouns following these particles.We refer to such cases in which the concatenation of elements does not strictly correspond to the original surface form as super-segmental morphology.An additional case of super-segmental morphology is the case of Pronominal Clitics.Inflectional features marking pronominal elements may be attached to different kinds of categories marking their pronominal complements.The additional morphological material in such cases appears after the stem and realizes the extended meaning.The current work treats both segmental and super-segmental phenomena, yet we note that there may be more adequate ways to treat supersegmental phenomena assuming Word-Based morphology as we explore in (Tsarfaty and Goldberg, 2008).Lexical and Morphological Ambiguity The rich morphological processes for deriving Hebrew stems give rise to a high degree of ambiguity for Hebrew space-delimited tokens.The form fmnh, for example, can be understood as the verb “lubricated”, the possessed noun “her oil”, the adjective “fat” or the verb “got fat”.Furthermore, the systematic way in which particles are prefixed to one another and onto an open-class category gives rise to a distinct sort of morphological ambiguity: space-delimited tokens may be ambiguous between several different segmentation possibilities.The same form fmnh can be segmented as f-mnh, f (“that”) functioning as a reletivizer with the form mnh.The form mnh itself can be read as at least three different verbs (“counted”, “appointed”, “was appointed”), a noun (“a portion”), and a possessed noun (“her kind”).Such ambiguities cause discrepancies between token boundaries (indexed as white spaces) and constituent boundaries (imposed by syntactic categories) with respect to a surface form.Such discrepancies can be aligned via an intermediate level of PoS tags.PoS tags impose a unique morphological segmentation on surface tokens and present a unique valid yield for syntactic trees.The correct ambiguity resolution of the syntactic level therefore helps to resolve the morphological one, and vice versa.Morphological analyzers for Hebrew that analyze a surface form in isolation have been proposed by Segal (2000), Yona and Wintner (2005), and recently by the knowledge center for processing Hebrew (Itai et al., 2006).Such analyzers propose multiple segmentation possibilities and their corresponding analyses for a token in isolation but have no means to determine the most likely ones.Morphological disambiguators that consider a token in context (an utterance) and propose the most likely morphological analysis of an utterance (including segmentation) were presented by Bar-Haim et al. (2005), Adler and Elhadad (2006), Shacham and Wintner (2007), and achieved good results (the best segmentation result so far is around 98%).The development of the very first Hebrew Treebank (Sima’an et al., 2001) called for the exploration of general statistical parsing methods, but the application was at first limited.Sima’an et al. (2001) presented parsing results for a DOP tree-gram model using a small data set (500 sentences) and semiautomatic morphological disambiguation.Tsarfaty (2006) was the first to demonstrate that fully automatic Hebrew parsing is feasible using the newly available 5000 sentences treebank.Tsarfaty and Sima’an (2007) have reported state-of-the-art results on Hebrew unlexicalized parsing (74.41%) albeit assuming oracle morphological segmentation.The joint morphological and syntactic hypothesis was first discussed in (Tsarfaty, 2006; Tsarfaty and Sima’an, 2004) and empirically explored in (Tsarfaty, 2006).Tsarfaty (2006) used a morphological analyzer (Segal, 2000), a PoS tagger (Bar-Haim et al., 2005), and a general purpose parser (Schmid, 2000) in an integrated framework in which morphological and syntactic components interact to share information, leading to improved performance on the joint task.Cohen and Smith (2007) later on based a system for joint inference on factored, independent, morphological and syntactic components of which scores are combined to cater for the joint inference task.Both (Tsarfaty, 2006; Cohen and Smith, 2007) have shown that a single integrated framework outperforms a completely streamlined implementation, yet neither has shown a single generative model which handles both tasks.A Hebrew surface token may have several readings, each of which corresponding to a sequence of segments and their corresponding PoS tags.We refer to different readings as different analyses whereby the segments are deterministic given the sequence of PoS tags.We refer to a segment and its assigned PoS tag as a lexeme, and so analyses are in fact sequences of lexemes.For brevity we omit the segments from the analysis, and so analysis of the form “fmnh” as f/REL mnh/VB is represented simply as REL VB.Such tag sequences are often treated as “complex tags” (e.g.REL+VB) (cf.(Bar-Haim et al., 2007; Habash and Rambow, 2005)) and probabilities are assigned to different analyses in accordance with the likelihood of their tags (e.g., “fmnh is 30% likely to be tagged NN and 70% likely to be tagged REL+VB”).Here we do not submit to this view.When a token fmnh is to be interpreted as the lexeme sequence f/REL mnh/VB, the analysis introduces two distinct entities, the relativizer f (“that”) and the verb mnh (“counted”), and not as the complex entity “that counted”.When the same token is to be interpreted as a single lexeme fmnh, it may function as a single adjective “fat”.There is no relation between these two interpretations other then the fact that their surface forms coincide, and we argue that the only reason to prefer one analysis over the other is compositional.A possible probabilistic model for assigning probabilities to complex analyses of a surface form may be and indeed recent sequential disambiguation models for Hebrew (Adler and Elhadad, 2006) and Arabic (Smith et al., 2005) present similar models.We suggest that in unlexicalized PCFGs the syntactic context may be explicitly modeled in the derivation probabilities.Hence, we take the probability of the event fmnh analyzed as REL VB to be This means that we generate f and mnh independently depending on their corresponding PoS tags, and the context (as well as the syntactic relation between the two) is modeled via the derivation resulting in a sequence REL VB spanning the form fmnh. based on linear context.In our model, however, all lattice paths are taken to be a-priori equally likely.We represent all morphological analyses of a given utterance using a lattice structure.Each lattice arc corresponds to a segment and its corresponding PoS tag, and a path through the lattice corresponds to a specific morphological segmentation of the utterance.This is by now a fairly standard representation for multiple morphological segmentation of Hebrew utterances (Adler, 2001; Bar-Haim et al., 2005; Smith et al., 2005; Cohen and Smith, 2007; Adler, 2007).Figure 1 depicts the lattice for a 2-words sentence bclm hneim.We use double-circles to indicate the space-delimited token boundaries.Note that in our construction arcs can never cross token boundaries.Every token is independent of the others, and the sentence lattice is in fact a concatenation of smaller lattices, one for each token.Furthermore, some of the arcs represent lexemes not present in the input tokens (e.g. h/DT, fl/POS), however these are parts of valid analyses of the token (cf. super-segmental morphology section 2).Segments with the same surface form but different PoS tags are treated as different lexemes, and are represented as separate arcs (e.g. the two arcs labeled neim from node 6 to 7).A similar structure is used in speech recognition.There, a lattice is used to represent the possible sentences resulting from an interpretation of an acoustic model.In speech recognition the arcs of the lattice are typically weighted in order to indicate the probability of specific transitions.Given that weights on all outgoing arcs sum up to one, weights induce a probability distribution on the lattice paths.In sequential tagging models such as (Adler and Elhadad, 2006; Bar-Haim et al., 2007; Smith et al., 2005) weights are assigned according to a language model The input for the joint task is a sequence W = w1, ... , wn of space-delimited tokens.Each token may admit multiple analyses, each of which a sequence of one or more lexemes (we use li to denote a lexeme) belonging a presupposed Hebrew lexicon LEX.The entries in such a lexicon may be thought of as meaningful surface segments paired up with their PoS tags li = (si, pi), but note that a surface segment s need not be a space-delimited token.The Input The set of analyses for a token is thus represented as a lattice in which every arc corresponds to a specific lexeme l, as shown in Figure 1.A morphological analyzer M : W—* L is a function mapping sentences in Hebrew (W E W) to their corresponding lattices (M(W) = L E L).We define the lattice L to be the concatenation of the lattices Li corresponding to the input words wi (s.t.M(wi) = Li).Each connected path (l1 ... lk) E L corresponds to one morphological segmentation possibility of W. The Parser Given a sequence of input tokens W = w1 ... wn and a morphological analyzer, we look for the most probable parse tree π s.t.Since the lattice L for a given sentence W is determined by the morphological analyzer M we have which is precisely the formula corresponding to the so-called lattice parsing familiar from speech recognition.Every parse π selects a specific morphological segmentation (l1...lk) (a path through the lattice).This is akin to PoS tags sequences induced by different parses in the setup familiar from English and explored in e.g.(Charniak et al., 1996).Our use of an unweighted lattice reflects our belief that all the segmentations of the given input sentence are a-priori equally likely; the only reason to prefer one segmentation over the another is due to the overall syntactic context which is modeled via the PCFG derivations.A compatible view is presented by Charniak et al. (1996) who consider the kind of probabilities a generative parser should get from a PoS tagger, and concludes that these should be P(w|t) “and nothing fancier”.3 In our setting, therefore, the Lattice is not used to induce a probability distribution on a linear context, but rather, it is used as a common-denominator of state-indexation of all segmentations possibilities of a surface form.This is a unique object for which we are able to define a proper probability model.Thus our proposed model is a proper model assigning probability mass to all (7r, L) pairs, where 7r is a parse tree and L is the one and only lattice that a sequence of characters (and spaces) W over our alpha-beth gives rise to.The Grammar Our parser looks for the most likely tree spanning a single path through the lattice of which the yield is a sequence of lexemes.This is done using a simple PCFG which is lexemebased.This means that the rules in our grammar are of two kinds: (a) syntactic rules relating nonterminals to a sequence of non-terminals and/or PoS tags, and (b) lexical rules relating PoS tags to lattice arcs (lexemes).The possible analyses of a surface token pose constraints on the analyses of specific segments.In order to pass these constraints onto the parser, the lexical rules in the grammar are of the form pi —* (si, pi) Parameter Estimation The grammar probabilities are estimated from the corpus using simple relative frequency estimates.Lexical rules are estimated in a similar manner.We smooth Prf(p —* (s, p)) for rare and OOV segments (s E l, l E L, s unseen) using a “per-tag” probability distribution over rare segments which we estimate using relative frequency estimates for once-occurring segments.3An English sentence with ambiguous PoS assignment can be trivially represented as a lattice similar to our own, where every pair of consecutive nodes correspond to a word, and every possible PoS assignment for this word is a connecting arc.Handling Unknown tokens When handling unknown tokens in a language such as Hebrew various important aspects have to be borne in mind.Firstly, Hebrew unknown tokens are doubly unknown: each unknown token may correspond to several segmentation possibilities, and each segment in such sequences may be able to admit multiple PoS tags.Secondly, some segments in a proposed segment sequence may in fact be seen lexical events, i.e., for some p tag Prf(p —* (s, p)) > 0, while other segments have never been observed as a lexical event before.The latter arcs correspond to OOV words in English.Finally, the assignments of PoS tags to OOV segments is subject to language specific constraints relative to the token it was originated from.Our smoothing procedure takes into account all the aforementioned aspects and works as follows.We first make use of our morphological analyzer to find all segmentation possibilities by chopping off all prefix sequence possibilities (including the empty prefix) and construct a lattice off of them.The remaining arcs are marked OOV.At this stage the lattice path corresponds to segments only, with no PoS assigned to them.In turn we use two sorts of heuristics, orthogonal to one another, to prune segmentation possibilities based on lexical and grammatical constraints.We simulate lexical constraints by using an external lexical resource against which we verify whether OOV segments are in fact valid Hebrew lexemes.This heuristics is used to prune all segmentation possibilities involving “lexically improper” segments.For the remaining arcs, if the segment is in fact a known lexeme it is tagged as usual, but for the OOV arcs which are valid Hebrew entries lacking tags assignment, we assign all possible tags and then simulate a grammatical constraint.Here, all tokeninternal collocations of tags unseen in our training data are pruned away.From now on all lattice arcs are tagged segments and the assignment of probability P(p —* (s, p)) to lattice arcs proceeds as usual.4 A rather pathological case is when our lexical heuristics prune away all segmentation possibilities and we remain with an empty lattice.In such cases we use the non-pruned lattice including all (possibly ungrammatical) segmentation, and let the statistics (including OOV) decide.We empirically control for the effect of our heuristics to make sure our pruning does not undermine the objectives of our joint task.Previous work on morphological and syntactic disambiguation in Hebrew used different sets of data, different splits, differing annotation schemes, and different evaluation measures.Our experimental setup therefore is designed to serve two goals.Our primary goal is to exploit the resources that are most appropriate for the task at hand, and our secondary goal is to allow for comparison of our models’ performance against previously reported results.When a comparison against previous results requires additional pre-processing, we state it explicitly to allow for the reader to replicate the reported results.Data We use the Hebrew Treebank, (Sima’an et al., 2001), provided by the knowledge center for processing Hebrew, in which sentences from the daily newspaper “Ha’aretz” are morphologically segmented and syntactically annotated.The treebank has two versions, v1.0 and v2.0, containing 5001 and 6501 sentences respectively.We use v1.0 mainly because previous studies on joint inference reported results w.r.t. v1.0 only.5 We expect that using the same setup on v2.0 will allow a crosstreebank comparison.6 We used the first 500 sentences as our dev set and the rest 4500 for training and report our main results on this split.To facilitate the comparison of our results to those reported by (Cohen and Smith, 2007) we use their data set in which 177 empty and “malformed”7 were removed.The first 3770 trees of the resulting set then were used for training, and the last 418 are used testing.(we ignored the 419 trees in their development set.)Morphological Analyzer Ideally, we would use an of-the-shelf morphological analyzer for mapping each input token to its possible analyses.Such resources exist for Hebrew (Itai et al., 2006), but unfortunately use a tagging scheme which is incompatible with the one of the Hebrew Treebank.s For this reason, we use a data-driven morphological analyzer derived from the training data similar to (Cohen and Smith, 2007).We construct a mapping from all the space-delimited tokens seen in the training sentences to their corresponding analyses.Lexicon and OOV Handling Our data-driven morphological-analyzer proposes analyses for unknown tokens as described in Section 5.We use the HSPELL9 (Har’el and Kenigsberg, 2004) wordlist as a lexeme-based lexicon for pruning segmentations involving invalid segments.Models that employ this strategy are denoted hsp.To control for the effect of the HSPELL-based pruning, we also experimented with a morphological analyzer that does not perform this pruning.For these models we limit the options provided for OOV words by not considering the entire token as a valid segmentation in case at least some prefix segmentation exists.This analyzer setting is similar to that of (Cohen and Smith, 2007), and models using it are denoted nohsp, Parser and Grammar We used BitPar (Schmid, 2004), an efficient general purpose parser,10 together with various treebank grammars to parse the input sentences and propose compatible morphological segmentation and syntactic analysis.We experimented with increasingly rich grammars read off of the treebank.Our first model is GTplain, a PCFG learned from the treebank after removing all functional features from the syntactic categories.In our second model GTvpi we also distinguished finite and non-finite verbs and VPs as 10Lattice parsing can be performed by special initialization of the chart in a CKY parser (Chappelier et al., 1999).We currently simulate this by crafting a WCFG and feeding it to BitPar.Given a PCFG grammar G and a lattice L with nodes n1 ... nk, we construct the weighted grammar GL as follows: for every arc (lexeme) l E L from node ni to node nj, we add to GL the rule [l --+ tni, tni+1, ... , tnj_1] with a probability of 1 (this indicates the lexeme l spans from node ni to node nj).GL is then used to parse the string tn1 ... tnk_1, where tni is a terminal corresponding to the lattice span between node ni and ni+1.Removing the leaves from the resulting tree yields a parse for L under G, with the desired probabilities.We use a patched version of BitPar allowing for direct input of probabilities instead of counts.We thank Felix Hageloh (Hageloh, 2006) for providing us with this version. proposed in (Tsarfaty, 2006).In our third model GTppp we also add the distinction between general PPs and possessive PPs following Goldberg and Elhadad (2007).In our forth model GTnph we add the definiteness status of constituents following Tsarfaty and Sima’an (2007).Finally, model GTv = 2 includes parent annotation on top of the various state-splits, as is done also in (Tsarfaty and Sima’an, 2007; Cohen and Smith, 2007).For all grammars, we use fine-grained PoS tags indicating various morphological features annotated therein.Evaluation We use 8 different measures to evaluate the performance of our system on the joint disambiguation task.To evaluate the performance on the segmentation task, we report SEG, the standard harmonic means for segmentation Precision and Recall F1 (as defined in Bar-Haim et al. (2005); Tsarfaty (2006)) as well as the segmentation accuracy SEGTok measure indicating the percentage of input tokens assigned the correct exact segmentation (as reported by Cohen and Smith (2007)).SEGTok(noH) is the segmentation accuracy ignoring mistakes involving the implicit definite article h.11 To evaluate our performance on the tagging task we report CPOS and FPOS corresponding to coarse- and fine-grained PoS tagging results (F1) measure.Evaluating parsing results in our joint framework, as argued by Tsarfaty (2006), is not trivial under the joint disambiguation task, as the hypothesized yield need not coincide with the correct one.Our parsing performance measures (SY N) thus report the PARSEVAL extension proposed in Tsarfaty (2006).We further report SYNCS, the parsing metric of Cohen and Smith (2007), to facilitate the comparison.We report the F1 value of both measures.Finally, our U (unparsed) measure is used to report the number of sentences to which our system could not propose a joint analysis.The accuracy results for segmentation, tagging and parsing using our different models and our standard data split are summarized in Table 1.In addition we report for each model its performance on goldsegmented input (GS) to indicate the upper bound 11Overt definiteness errors may be seen as a wrong feature rather than as wrong constituent and it is by now an accepted standard to report accuracy with and without such errors. for the grammars’ performance on the parsing task.The table makes clear that enriching our grammar improves the syntactic performance as well as morphological disambiguation (segmentation and POS tagging) accuracy.This supports our main thesis that decisions taken by single, improved, grammar are beneficial for both tasks.When using the segmentation pruning (using HSPELL) for unseen tokens, performance improves for all tasks as well.Yet we note that the better grammars without pruning outperform the poorer grammars using this technique, indicating that the syntactic context aids, to some extent, the disambiguation of unknown tokens.Table 2 compares the performance of our system on the setup of Cohen and Smith (2007) to the best results reported by them for the same tasks.We first note that the accuracy results of our system are overall higher on their setup, on all measures, indicating that theirs may be an easier dataset.Secondly, for all our models we provide better fine- and coarse-grained POS-tagging accuracy, and all pruned models outperform the Oracle results reported by them.12 In terms of syntactic disambiguation, even the simplest grammar pruned with HSPELL outperforms their non-Oracle results.Without HSPELL-pruning, our simpler grammars are somewhat lagging behind, but as the grammars improve the gap is bridged.The addition of vertical markovization enables non-pruned models to outperform all previously reported re12Cohen and Smith (2007) make use of a parameter (α) which is tuned separately for each of the tasks.This essentially means that their model does not result in a true joint inference, as executions for different tasks involve tuning a parameter separately.In our model there are no such hyper-parameters, and the performance is the result of truly joint disambiguation. sults.Furthermore, the combination of pruning and vertical markovization of the grammar outperforms the Oracle results reported by Cohen and Smith.This essentially means that a better grammar tunes the joint model for optimized syntactic disambiguation at least in as much as their hyper parameters do.An interesting observation is that while vertical markovization benefits all our models, its effect is less evident in Cohen and Smith.On the surface, our model may seem as a special case of Cohen and Smith in which α = 0.However, there is a crucial difference: the morphological probabilities in their model come from discriminative models based on linear context.Many morphological decisions are based on long distance dependencies, and when the global syntactic evidence disagrees with evidence based on local linear context, the two models compete with one another, despite the fact that the PCFG takes also local context into account.In addition, as the CRF and PCFG look at similar sorts of information from within two inherently different models, they are far from independent and optimizing their product is meaningless.Cohen and Smith approach this by introducing the α hyperparameter, which performs best when optimized independently for each sentence (cf.Oracle results).In contrast, our morphological probabilities are based on a unigram, lexeme-based model, and all other (local and non-local) contextual considerations are delegated to the PCFG.This fully generative model caters for real interaction between the syntactic and morphological levels as a part of a single coherent process.Employing a PCFG-based generative framework to make both syntactic and morphological disambiguation decisions is not only theoretically clean and linguistically justified and but also probabilistically apropriate and empirically sound.The overall performance of our joint framework demonstrates that a probability distribution obtained over mere syntactic contexts using a Treebank grammar and a data-driven lexicon outperforms upper bounds proposed by previous joint disambiguation systems and achieves segmentation and parsing results on a par with state-of-the-art standalone applications results.Better grammars are shown here to improve performance on both morphological and syntactic tasks, providing support for the advantage of a joint framework over pipelined or factorized ones.We conjecture that this trend may continue by incorporating additional information, e.g., three-dimensional models as proposed by Tsarfaty and Sima’an (2007).In the current work morphological analyses and lexical probabilities are derived from a small Treebank, which is by no means the best way to go.Using a wide-coverage morphological analyzer based on (Itai et al., 2006) should cater for a better coverage, and incorporating lexical probabilities learned from a big (unannotated) corpus (cf.(Levinger et al., 1995; Goldberg et al., ; Adler et al., 2008)) will make the parser more robust and suitable for use in more realistic scenarios.Acknowledgments We thank Meni Adler and Michael Elhadad (BGU) for helpful comments and discussion.We further thank Khalil Simaan (ILLCUvA) for his careful advise concerning the formal details of the proposal.The work of the first author was supported by the Lynn and William Frankel Center for Computer Sciences.The work of the second author as well as collaboration visits to Israel was financed by NWO, grant number 017.001.271.
A Cascaded Linear Model for Joint Chinese Word Segmentation and Part-of-Speech TaggingWe propose a cascaded linear model for joint Chinese word segmentation and partof-speech tagging.With a character-based perceptron as the core, combined with realvalued features such as language models, the cascaded model is able to efficiently utilize knowledge sources that are inconvenient to incorporate into the perceptron directly.Experiments show that the cascaded model achieves improved accuracies on both segmentation only and joint segmentation and part-of-speech tagging.On the Penn Chinese Treebank 5.0, we obtain an error reduction of segmentation and joint segmentation and part-of-speech tagging over the perceptron-only baseline.Word segmentation and part-of-speech (POS) tagging are important tasks in computer processing of Chinese and other Asian languages.Several models were introduced for these problems, for example, the Hidden Markov Model (HMM) (Rabiner, 1989), Maximum Entropy Model (ME) (Ratnaparkhi and Adwait, 1996), and Conditional Random Fields (CRFs) (Lafferty et al., 2001).CRFs have the advantage of flexibility in representing features compared to generative ones such as HMM, and usually behaves the best in the two tasks.Another widely used discriminative method is the perceptron algorithm (Collins, 2002), which achieves comparable performance to CRFs with much faster training, so we base this work on the perceptron.To segment and tag a character sequence, there are two strategies to choose: performing POS tagging following segmentation; or joint segmentation and POS tagging (Joint S&T).Since the typical approach of discriminative models treats segmentation as a labelling problem by assigning each character a boundary tag (Xue and Shen, 2003), Joint S&T can be conducted in a labelling fashion by expanding boundary tags to include POS information (Ng and Low, 2004).Compared to performing segmentation and POS tagging one at a time, Joint S&T can achieve higher accuracy not only on segmentation but also on POS tagging (Ng and Low, 2004).Besides the usual character-based features, additional features dependent on POS’s or words can also be employed to improve the performance.However, as such features are generated dynamically during the decoding procedure, two limitation arise: on the one hand, the amount of parameters increases rapidly, which is apt to overfit on training corpus; on the other hand, exact inference by dynamic programming is intractable because the current predication relies on the results of prior predications.As a result, many theoretically useful features such as higherorder word or POS n-grams are difficult to be incorporated in the model efficiently.To cope with this problem, we propose a cascaded linear model inspired by the log-linear model (Och and Ney, 2004) widely used in statistical machine translation to incorporate different kinds of knowledge sources.Shown in Figure 1, the cascaded model has a two-layer architecture, with a characterbased perceptron as the core combined with other real-valued features such as language models.We will describe it in detail in Section 4.In this architecture, knowledge sources that are intractable to incorporate into the perceptron, can be easily incorporated into the outside linear model.In addition, as these knowledge sources are regarded as separate features, we can train their corresponding models independently with each other.This is an interesting approach when the training corpus is large as it reduces the time and space consumption.Experiments show that our cascaded model can utilize different knowledge sources effectively and obtain accuracy improvements on both segmentation and Joint S&T.2 Segmentation and POS Tagging Given a Chinese character sequence: while the segmentation and POS tagging result can be depicted as: Here, Ci (i = L.n) denotes Chinese character, ti (i = L.m) denotes POS tag, and Cl:r (l < r) denotes character sequence ranges from Cl to Cr.We can see that segmentation and POS tagging task is to divide a character sequence into several subsequences and label each of them a POS tag.It is a better idea to perform segmentation and POS tagging jointly in a uniform framework.According to Ng and Low (2004), the segmentation task can be transformed to a tagging problem by assigning each character a boundary tag of the following four types: We can extract segmentation result by splitting the labelled result into subsequences of pattern s or bm*e which denote single-character word and multicharacter word respectively.In order to perform POS tagging at the same time, we expand boundary tags to include POS information by attaching a POS to the tail of a boundary tag as a postfix following Ng and Low (2004).As each tag is now composed of a boundary part and a POS part, the joint S&T problem is transformed to a uniform boundary-POS labelling problem.A subsequence of boundary-POS labelling result indicates a word with POS t only if the boundary tag sequence composed of its boundary part conforms to s or bm*e style, and all POS tags in its POS part equal to t. For example, a tag sequence b NN m NN e NN represents a threecharacter word with POS tag NN.The perceptron algorithm introduced into NLP by Collins (2002), is a simple but effective discriminative training method.It has comparable performance to CRFs, while with much faster training.The perceptron has been used in many NLP tasks, such as POS tagging (Collins, 2002), Chinese word segmentation (Ng and Low, 2004; Zhang and Clark, 2007) and so on.We trained a character-based perceptron for Chinese Joint S&T, and found that the perceptron itself could achieve considerably high accuracy on segmentation and Joint S&T.In following subsections, we describe the feature templates and the perceptron training algorithm.The feature templates we adopted are selected from those of Ng and Low (2004).To compare with others conveniently, we excluded the ones forbidden by the close test regulation of SIGHAN, for example, Pu(C0), indicating whether character C0 is a punctuation.All feature templates and their instances are shown in Table 1.C represents a Chinese character while the subscript of C indicates its position in the sentence relative to the current character (it has the subscript 0).Templates immediately borrowed from Ng and Low (2004) are listed in the upper column named non-lexical-target.We called them non-lexical-target because predications derived from them can predicate without considering the current character C0.Templates in the column below are expanded from the upper ones.We add a field C0 to each template in the upper column, so that it can carry out predication according to not only the context but also the current character itself.As predications generated from such templates depend on the current character, we name these templates lexical-target.Note that the templates of Ng and Low (2004) have already contained some lexical-target ones.With the two kinds of predications, the perceptron model will do exact predicating to the best of its ability, and can back off to approximately predicating if exact predicating fails.We adopt the perceptron training algorithm of Collins (2002) to learn a discriminative model mapping from inputs x ∈ X to outputs y ∈ Y , where X is the set of sentences in the training corpus and Y is the set of corresponding labelled results.Following Collins, we use a function GEN(x) generating all candidate results of an input x , a representation 4) mapping each training example (x, y) ∈ X × Y to a feature vector 4)(x, y) ∈ Rd, and a parameter vector α� ∈ Rd corresponding to the feature vector. d means the dimension of the vector space, it equals to the amount of features in the model.For an input character sequence x, we aim to find an output F(x) satisfying: vector 4)(x, y) and the parameter vector a.We used the algorithm depicted in Algorithm 1 to tune the parameter vector a.To alleviate overfitting on the training examples, we use the refinement strategy called “averaged parameters” (Collins, 2002) to the algorithm in Algorithm 1.In theory, any useful knowledge can be incorporated into the perceptron directly, besides the characterbased features already adopted.Additional features most widely used are related to word or POS ngrams.However, such features are generated dynamically during the decoding procedure so that the feature space enlarges much more rapidly.Figure 2 shows the growing tendency of feature space with the introduction of these features as well as the character-based ones.We noticed that the templates related to word unigrams and bigrams bring to the feature space an enlargement much rapider than the character-base ones, not to mention the higher-order grams such as trigrams or 4-grams.In addition, even though these higher grams were managed to be used, there still remains another problem: as the current predication relies on the results of prior ones, the decoding procedure has to resort to approximate inference by maintaining a list of N-best candidates at each predication position, which evokes a potential risk to depress the training.To alleviate the drawbacks, we propose a cascaded linear model.It has a two-layer architecture, with a perceptron as the core and another linear model as the outside-layer.Instead of incorporating all features into the perceptron directly, we first trained the perceptron using character-based features, and several other sub-models using additional ones such as word or POS n-grams, then trained the outside-layer linear model using the outputs of these sub-models, including the perceptron.Since the perceptron is fixed during the second training step, the whole training procedure need relative small time and memory cost.The outside-layer linear model, similar to those in SMT, can synthetically utilize different knowledge sources to conduct more accurate comparison between candidates.In this layer, each knowledge source is treated as a feature with a corresponding weight denoting its relative importance.Suppose we have n features gj (j = 1..n) coupled with n corresponding weights wj (j = 1..n), each feature gj gives a score gj(r) to a candidate r, then the total score of r is given by: The decoding procedure aims to find the candidate r* with the highest score: While the mission of the training procedure is to tune the weights wj(j = 1..n) to guarantee that the candidate r with the highest score happens to be the best result with a high probability.As all the sub-models, including the perceptron, are regarded as separate features of the outside-layer linear model, we can train them respectively with special algorithms.In our experiments we trained a 3-gram word language model measuring the fluency of the segmentation result, a 4-gram POS language model functioning as the product of statetransition probabilities in HMM, and a word-POS co-occurrence model describing how much probably a word sequence coexists with a POS sequence.As shown in Figure 1, the character-based perceptron is used as the inside-layer linear model and sends its output to the outside-layer.Besides the output of the perceptron, the outside-layer also receive the outputs of the word LM, the POS LM, the co-occurrence model and a word count penalty which is similar to the translation length penalty in SMT.Language model (LM) provides linguistic probabilities of a word sequence.It is an important measure of fluency of the translation in SMT.Formally, an n-gram word LM approximates the probability of a word sequence W = w1:m with the following product: Notice that a bi-gram POS LM functions as the product of transition probabilities in HMM.Given a training corpus with POS tags, we can train a word-POS co-occurrence model to approximate the probability that the word sequence of the labelled result co-exists with its corresponding POS sequence.Using W = w1:m to denote the word sequence, T = t1:m to denote the corresponding POS sequence, P (T |W) to denote the probability that W is labelled as T, and P(W|T) to denote the probability that T generates W, we can define the cooccurrence model as follows: λwt and λtw denote the corresponding weights of the two components.Suppose the conditional probability Pr(t|w) describes the probability that the word w is labelled as the POS t, while Pr(w|t) describes the probability that the POS t generates the word w, then P(T|W) can be approximated by: Pr(w|t) and Pr(t|w) can be easily acquired by Maximum Likelihood Estimates (MLE) over the corpus.For instance, if the word w appears N times in training corpus and is labelled as POS t for n times, the probability Pr(t|w) can be estimated by the formula below: The probability Pr(w|t) could be estimated through the same approach.To facilitate tuning the weights, we use two components of the co-occurrence model Co(W,T) to represent the co-occurrence probability of W and T, rather than use Co(W, T) itself.In the rest of the paper, we will call them labelling model and generating model respectively.Sequence segmentation and labelling problem can be solved through a viterbi style decoding procedure.In Chinese Joint S&T, the mission of the decoder is to find the boundary-POS labelled sequence with the highest score.Given a Chinese character sequence C1:n, the decoding procedure can proceed in a left-right fashion with a dynamic programming approach.By maintaining a stack of size N at each position i of the sequence, we can preserve the top N best candidate labelled results of subsequence C1:i during decoding.At each position i, we enumerate all possible word-POS pairs by assigning each POS to each possible word formed from the character subsequence spanning length l = L. min(i, K) (K is assigned 20 in all our experiments) and ending at position i, then we derive all candidate results by attaching each word-POS pair p (of length l) to the tail of each candidate result at the prior position of p (position i−l), and select for position i a N-best list of candidate results from all these candidates.When we derive a candidate result from a word-POS pair p and a candidate q at prior position of p, we calculate the scores of the word LM, the POS LM, the labelling probability and the generating probability, Algorithm 2 Decoding algorithm. as well as the score of the perceptron model.In addition, we add the score of the word count penalty as another feature to alleviate the tendency of LMs to favor shorter candidates.By equation 2, we can synthetically evaluate all these scores to perform more accurately comparing between candidates.Algorithm 2 shows the decoding algorithm.Lines 3 — 11 generate a N-best list for each character position i.Line 4 scans words of all possible lengths l (l = 1.. min(i, K), where i points to the current considering character).Line 6 enumerates all POS’s for the word w spanning length l and ending at position i.Line 8 considers each candidate result in N-best list at prior position of the current word.Function D derives the candidate result from the word-POS pair p and the candidate q at prior position of p.We reported results from two set of experiments.The first was conducted to test the performance of the perceptron on segmentation on the corpus from SIGHAN Bakeoff 2, including the Academia Sinica Corpus (AS), the Hong Kong City University Corpus (CityU), the Peking University Corpus (PKU) and the Microsoft Research Corpus (MSR).The second was conducted on the Penn Chinese Treebank 5.0 (CTB5.0) to test the performance of the cascaded model on segmentation and Joint S&T.In all experiments, we use the averaged parameters for the perceptrons, and F-measure as the accuracy measure.With precision P and recall R, the balance F-measure is defined as: F = 2PR/(P + R).For convenience of comparing with others, we focus only on the close test, which means that any extra resource is forbidden except the designated training corpus.In order to test the performance of the lexical-target templates and meanwhile determine the best iterations over the training corpus, we randomly chosen 2, 000 shorter sentences (less than 50 words) as the development set and the rest as the training set (84, 294 sentences), then trained a perceptron model named NON-LEX using only nonlexical-target features and another named LEX using both the two kinds of features.Figure 3 shows their learning curves depicting the F-measure on the development set after 1 to 10 training iterations.We found that LEX outperforms NON-LEX with a margin of about 0.002 at each iteration, and its learning curve reaches a tableland at iteration 7.Then we trained LEX on each of the four corpora for 7 iterations.Test results listed in Table 2 shows that this model obtains higher accuracy than the best of SIGHAN Bakeoff 2 in three corpora (AS, CityU and MSR).On the three corpora, it also outperformed the word-based perceptron model of Zhang and Clark (2007).However, the accuracy on PKU corpus is obvious lower than the best score SIGHAN reported, we need to conduct further research on this problem.We turned to experiments on CTB 5.0 to test the performance of the cascaded model.According to the usual practice in syntactic analysis, we choose chapters 1 − 260 (18074 sentences) as training set, chapter 271 − 300 (348 sentences) as test set and chapter 301 − 325 (350 sentences) as development set.At the first step, we conducted a group of contrasting experiments on the core perceptron, the first concentrated on the segmentation regardless of the POS information and reported the F-measure on segmentation only, while the second performed Joint S&T using POS information and reported the F-measure both on segmentation and on Joint S&T.Note that the accuracy of Joint S&T means that a word-POS pair is recognized only if both the boundary tags and the POS’s are correctly labelled.The evaluation results are shown in Table 3.We find that Joint S&T can also improve the segmentation accuracy.However, the F-measure on Joint S&T is obvious lower, about a rate of 95% to the F-measure on segmentation.Similar trend appeared in experiments of Ng and Low (2004), where they conducted experiments on CTB 3.0 and achieved Fmeasure 0.919 on Joint S&T, a ratio of 96% to the F-measure 0.952 on segmentation.As the next step, a group of experiments were conducted to investigate how well the cascaded linear model performs.Here the core perceptron was just the POS+ model in experiments above.Besides this perceptron, other sub-models are trained and used as additional features of the outside-layer linear model.We used SRI Language Modelling Toolkit (Stolcke and Andreas, 2002) to train a 3gram word LM with modified Kneser-Ney smoothing (Chen and Goodman, 1998), and a 4-gram POS LM with Witten-Bell smoothing, and we trained a word-POS co-occurrence model simply by MLE without smoothing.To obtain their corresponding weights, we adapted the minimum-error-rate training algorithm (Och, 2003) to train the outside-layer model.In order to inspect how much improvement each feature brings into the cascaded model, every time we removed a feature while retaining others, then retrained the model and tested its performance on the test set.Table 4 shows experiments results.We find that the cascaded model achieves a F-measure increment of about 0.5 points on segmentation and about 0.9 points on Joint S&T, over the perceptron-only model POS+.We also find that the perceptron model functions as the kernel of the outside-layer linear model.Without the perceptron, the cascaded model (if we can still call it “cascaded”) performs poorly on both segmentation and Joint S&T.Among other features, the 4-gram POS LM plays the most important role, removing this feature causes F-measure decrement of 0.33 points on segmentation and 0.71 points on Joint S&T.Another important feature is the labelling model.Without it, the F-measure on segmentation and Joint S&T both suffer a decrement of 0.2 points.The generating model, which functions as that in HMM, brings an improvement of about 0.1 points to each test item.However unlike the three features, the word LM brings very tiny improvement.We suppose that the character-based features used in the perceptron play a similar role as the lowerorder word LM, and it would be helpful if we train a higher-order word LM on a larger scale corpus.Finally, the word count penalty gives improvement to the cascaded model, 0.13 points on segmentation and 0.16 points on Joint S&T.In summary, the cascaded model can utilize these knowledge sources effectively, without causing the feature space of the percptron becoming even larger.Experimental results show that, it achieves obvious improvement over the perceptron-only model, about from 0.973 to 0.978 on segmentation, and from 0.925 to 0.934 on Joint S&T, with error reductions of 18.5% and 12% respectively.We proposed a cascaded linear model for Chinese Joint S&T.Under this model, many knowledge sources that may be intractable to be incorporated into the perceptron directly, can be utilized effectively in the outside-layer linear model.This is a substitute method to use both local and non-local features, and it would be especially useful when the training corpus is very large.However, can the perceptron incorporate all the knowledge used in the outside-layer linear model?If this cascaded linear model were chosen, could more accurate generative models (LMs, word-POS co-occurrence model) be obtained by training on large scale corpus even if the corpus is not correctly labelled entirely, or by self-training on raw corpus in a similar approach to that of McClosky (2006)?In addition, all knowledge sources we used in the core perceptron and the outside-layer linear model come from the training corpus, whereas many open knowledge sources (lexicon etc.) can be used to improve performance (Ng and Low, 2004).How can we utilize these knowledge sources effectively?We will investigate these problems in the following work.This work was done while L. H. was visiting CAS/ICT.The authors were supported by National Natural Science Foundation of China, Contracts 60736014 and 60573188, and 863 State Key Project No.2006AA010108 (W. J., Q. L., and Y. L.), and by NSF ITR EIA-0205456 (L. H.).We would also like to Hwee-Tou Ng for sharing his code, and Yang Liu and Yun Huang for suggestions.
Learning Dependency-Based Compositional SemanticsCompositional question answering begins by mapping questions to logical forms, but training a semantic parser to perform this mapping typically requires the costly annotation of the target logical forms.In this paper, we learn to map questions to answers via latent logical forms, which are induced automatically from question-answer pairs.In tackling this challenging learning problem, we introduce a new semantic representation which highlights a parallel between dependency syntax and efficient evaluation of logical forms.On two stansemantic parsing benchmarks our system obtains the highest published accuracies, despite requiring no annotated logical forms.What is the total population of the ten largest capitals in the US?Answering these types of complex questions compositionally involves first mapping the questions into logical forms (semantic parsing).Supervised semantic parsers (Zelle and Mooney, 1996; Tang and Mooney, 2001; Ge and Mooney, 2005; Zettlemoyer and Collins, 2005; Kate and Mooney, 2007; Zettlemoyer and Collins, 2007; Wong and Mooney, 2007; Kwiatkowski et al., 2010) rely on manual annotation of logical forms, which is expensive.On the other hand, existing unsupervised semantic parsers (Poon and Domingos, 2009) do not handle deeper linguistic phenomena such as quantification, negation, and superlatives.As in Clarke et al. (2010), we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.However, we still model the logical form (now as a latent variable) to capture the complexities of language.Figure 1 shows our probabilistic model: with respect to a world w (database of facts), producing an answer y.We represent logical forms z as labeled trees, induced automatically from (x, y) pairs.We want to induce latent logical forms z (and parameters 0) given only question-answer pairs (x, y), which is much cheaper to obtain than (x, z) pairs.The core problem that arises in this setting is program induction: finding a logical form z (over an exponentially large space of possibilities) that produces the target answer y.Unlike standard semantic parsing, our end goal is only to generate the correct y, so we are free to choose the representation for z.Which one should we use?The dominant paradigm in compositional semantics is Montague semantics, which constructs lambda calculus forms in a bottom-up manner.CCG is one instantiation (Steedman, 2000), which is used by many semantic parsers, e.g., Zettlemoyer and Collins (2005).However, the logical forms there can become quite complex, and in the context of program induction, this would lead to an unwieldy search space.At the same time, representations such as FunQL (Kate et al., 2005), which was used in Clarke et al. (2010), are simpler but lack the full expressive power of lambda calculus.The main technical contribution of this work is a new semantic representation, dependency-based compositional semantics (DCS), which is both simple and expressive (Section 2).The logical forms in this framework are trees, which is desirable for two reasons: (i) they parallel syntactic dependency trees, which facilitates parsing and learning; and (ii) evaluating them to obtain the answer is computationally efficient.We trained our model using an EM-like algorithm (Section 3) on two benchmarks, GEO and JOBS (Section 4).Our system outperforms all existing systems despite using no annotated logical forms.We first present a basic version (Section 2.1) of dependency-based compositional semantics (DCS), which captures the core idea of using trees to represent formal semantics.We then introduce the full version (Section 2.2), which handles linguistic phenomena such as quantification, where syntactic and semantic scope diverge.We start with some definitions, using US geography as an example domain.Let V be the set of all values, which includes primitives (e.g., 3, CA ∈ V) as well as sets and tuples formed from other values (e.g., 3, {3, 4, 7}, (CA, {5}) ∈ V).Let P be a set of predicates (e.g., state, count ∈ P), which are just symbols.A world w is mapping from each predicate p ∈ P to a set of tuples; for example, w(state) = {(CA), (OR),... }.Conceptually, a world is a relational database where each predicate is a relation (possibly infinite).Define a special predicate ø with w(ø) = V. We represent functions by a set of inputoutput pairs, e.g., w(count) = {(S, n) : n = |S|}.As another example, w(average) = {(S, ¯x) : We write a DCS tree z as hp; r1 : c1; ... ; rm : cmi.Figure 2(a) shows an example of a DCS tree.Although a DCS tree is a logical form, note that it looks like a syntactic dependency tree with predicates in place of words.It is this transparency between syntax and semantics provided by DCS which leads to a simple and streamlined compositional semantics suitable for program induction.The basic version of DCS restricts R to join and aggregate relations (see Table 1).Let us start by considering a DCS tree z with only join relations.Such a z defines a constraint satisfaction problem (CSP) with nodes as variables.The CSP has two types of constraints: (i) x ∈ w(p) for each node x labeled with predicate p ∈ P; and (ii) xj = yj0 (the j-th component of x must equal the j'-th component of y) for each edge (x, y) labeled with j0j ∈ R. A solution to the CSP is an assignment of nodes to values that satisfies all the constraints.We say a value v is consistent for a node x if there exists a solution that assigns v to x.The denotation JzKw (z evaluated on w) is the set of consistent values of the root node (see Figure 2 for an example).Computation We can compute the denotation JzKw of a DCS tree z by exploiting dynamic programming on trees (Dechter, 2003).The recurrence is as follows: At each node, we compute the set of tuples v consistent with the predicate at that node (v ∈ w(p)), and S(x)}, where a set of pairs S is treated as a set-valued function S(x) = {y : (x, y) ∈ S} with domain S1 = {x : (x, y) ∈ S}.The logical forms in DCS are called DCS trees, where nodes are labeled with predicates, and edges are labeled with relations.Formally: Definition 1 (DCS trees) Let Z be the set of DCS trees, where each z ∈ Z consists of (i) a predicate for each child i, the ji-th component of v must equal the j'i-th component of some t in the child’s denotation (t ∈ JciKw).This algorithm is linear in the number of nodes times the size of the denotations.1 Now the dual importance of trees in DCS is clear: We have seen that trees parallel syntactic dependency structure, which will facilitate parsing.In addition, trees enable efficient computation, thereby establishing a new connection between dependency syntax and efficient semantic evaluation.Aggregate relation DCS trees that only use join relations can represent arbitrarily complex compositional structures, but they cannot capture higherorder phenomena in language.For example, consider the phrase number of major cities, and suppose that number corresponds to the count predicate.It is impossible to represent the semantics of this phrase with just a CSP, so we introduce a new aggregate relation, notated E. Consider a tree hE:ci, whose root is connected to a child c via E. If the denotation of c is a set of values s, the parent’s denotation is then a singleton set containing s. Formally: Figure 3(a) shows the DCS tree for our running example.The denotation of the middle node is {s}, where s is all major cities.Having instantiated s as a value, everything above this node is an ordinary CSP: s constrains the count node, which in turns constrains the root node to |s|.A DCS tree that contains only join and aggregate relations can be viewed as a collection of treestructured CSPs connected via aggregate relations.The tree structure still enables us to compute denotations efficiently based on (1) and (2).The basic version of DCS described thus far handles a core subset of language.But consider Figure 4: (a) is headed by borders, but states needs to be extracted; in (b), the quantifier no is syntactically dominated by the head verb borders but needs to take wider scope.We now present the full version of DCS which handles this type of divergence between syntactic and semantic scope.The key idea that allows us to give semanticallyscoped denotations to syntactically-scoped trees is as follows: We mark a node low in the tree with a mark relation (one of E, Q, or C).Then higher up in the tree, we invoke it with an execute relation Xi to create the desired semantic scope.2 This mark-execute construct acts non-locally, so to maintain compositionality, we must augment the denotation d = JzKw to include any information about the marked nodes in z that can be accessed by an execute relation later on.In the basic version, d was simply the consistent assignments to the root.Now d contains the consistent joint assignments to the active nodes (which include the root and all marked nodes), as well as information stored about each marked node.Think of d as consisting of n columns, one for each active node according to a pre-order traversal of z.Column 1 always corresponds to the root node.Formally, a denotation is defined as follows (see Figure 5 for an example): Definition 2 (Denotations) Let D be the set of denotations, where each d E D consists of where each store a contains a mark relation a.r E {E, Q, C, 0}, a base denotation a.b E D U{0}, and a child denotation a.c E D U{0}.We write d as ((A; (ri, bi, ci); ... ; (rn, bn, cn))).We use d{ri = x} to mean d with d.ri = d.ai.r = x (similar definitions apply for d{ai = x}, d{bi = x}, and d{ci = x}).The denotation of a DCS tree can now be defined recursively: The base case is defined in (3): if z is a single node with predicate p, then the denotation of z has one column with the tuples w(p) and an empty store.The other six cases handle different edge relations.These definitions depend on several operations (mj,j0, E, Xi, M) which we will define shortly, but let us first get some intuition.Let z be a DCS tree.If the last child c of z’s root is a join (jj0), aggregate (E), or execute (Xi) relation ((4)–(6)), then we simply recurse on z with c removed and join it with some transformation (identity, E, or Xi) of c’s denotation.If the last (or first) child is connected via a mark relation E, C (or Q), then we strip off that child and put the appropriate information in the store by invoking M. We now define the operations mj,j0, E, Xi, M. Some helpful notation: For a sequence v = (v1,... , vn) and indices i = (i1, ... , ik), let vi = (vi1, ... , vik) be the projection of v onto i; we write v−i to mean v�1 i.Extending this notation to denotations, let (hA; αii[i] = hh{ai : a ∈ A}; αiii.Let d[−ø] = d[−i], where i are the columns with empty stores.For example, for d in Figure 5, d[1] keeps column 1, d[−ø] keeps column 2, and d[2, −2] swaps the two columns.Join The join of two denotations d and d' with respect to components j and j' (∗ means all components) is formed by concatenating all arrays a of d with all compatible arrays a' of d', where compatibility means a1j = a'1j0.The stores are also concatenated (α + α').Non-initial columns with empty stores are projected away by applying ·[1,−ø].The full definition of join is as follows: Aggregate The aggregate operation takes a denotation and forms a set out of the tuples in the first column for each setting of the rest of the columns: Now we turn to the mark (M) and execute (Xi) operations, which handles the divergence between syntactic and semantic scope.In some sense, this is the technical core of DCS.Marking is simple: When a node (e.g., size in Figure 5) is marked (e.g., with relation C), we simply put the relation r, current denotation d and child c’s denotation into the store of column 1: The execute operation Xi(d) processes columns i in reverse order.It suffices to define Xi(d) for a single column i.There are three cases: Extraction (d.ri = E) In the basic version, the denotation of a tree was always the set of consistent values of the root node.Extraction allows us to return the set of consistent values of a marked non-root node.Formally, extraction simply moves the i-th column to the front: Xi(d) = d[i, −(i, ø)]{α1 = ø}.For example, in Figure 4(a), before execution, the denotation of the DCS tree is hh{[(CA, OR), (OR)],... }; ø; (E, Qhstatei�w, ø)ii; after applying X1, we have hh{[(OR)], ... }; øii.Generalized Quantification (d.ri = Q) Generalized quantifiers are predicates on two sets, a restrictor A and a nuclear scope B.For example, In a DCS tree, the quantifier appears as the child of a Q relation, and the restrictor is the parent (see Figure 4(b) for an example).This information is retrieved from the store when the quantifier in column i is executed.In particu- using the exact same machinery as superlatives.Figlar, the restrictor is A = E (d.bi) and the nu- ure 4(g) shows that we can naturally account for clear scope is B = E (d[i, −(i, 0)]).We then superlative ambiguity based on where the scopeapply d.ci to these two sets (technically, denota- determining execute relation is placed. tions) and project away the first column: Xi(d) = 3 Semantic Parsing ((d.ci ./1,1 A) ./2,1 B) [−1].We now turn to the task of mapping natural language For the example in Figure 4(b), the de- utterances to DCS trees.Our first question is: given notation of the DCS tree before execution is an utterance x, what trees z ∈ Z are permissible?To California cities), and it also allows us to underspecify L. In particular, our L will not include verbs or prepositions; rather, we rely on the predicates corresponding to those words to be triggered by traces.The augmentation function A takes a set of trees and optionally attaches E and Xi relations to the root (e.g., A(hcityi) = {hcityi , hcity; E:øi}).The filtering function F rules out improperly-typed trees such as hcity; 00:hstateii.To further reduce the search space, F imposes a few additional constraints, e.g., limiting the number of marked nodes to 2 and only allowing trace predicates between arity 1 predicates.Model We now present our discriminative semantic parsing model, which places a log-linear distribution over z ∈ ZL(x) given an utterance x.Formally, pθ(z  |x) ∝ eφ(x,z)Tθ, where θ and φ(x, z) are parameter and feature vectors, respectively.As a running example, consider x = city that is in California and z = hcity; 11:hloc; 21:hCAiii, where city triggers city and California triggers CA.To define the features, we technically need to augment each tree z ∈ ZL(x) with alignment information—namely, for each predicate in z, the span in x (if any) that triggered it.This extra information is already generated from the recursive definition in (13).The feature vector φ(x, z) is defined by sums of five simple indicator feature templates: (F1) a word triggers a predicate (e.g., [city, city]); (F2) a word is under a relation (e.g., [that, 11]); (F3) a word is under a trace predicate (e.g., [in, loc]); (F4) two predicates are linked via a relation in the left or right direction (e.g., [city,11, loc, RIGHT]); and (F5) a predicate has a child relation (e.g., [city, 11]).Learning Given a training dataset D containing (x, y) pairs, we define the regularized marginal log-likelihood objective O(θ) = E(x,y)ED log pθ(JzKw = y  |x, z ∈ ZL(x)) − λkθk22, which sums over all DCS trees z that evaluate to the target answer y.Our model is arc-factored, so we can sum over all DCS trees in ZL(x) using dynamic programming.However, in order to learn, we need to sum over {z ∈ ZL(x) : JzKw = y}, and unfortunately, the additional constraint JzKw = y does not factorize.We therefore resort to beam search.Specifically, we truncate each Ci,j to a maximum of K candidates sorted by decreasing score based on parameters θ.Let ˜ZL,θ(x) be this approximation of ZL(x).Our learning algorithm alternates between (i) using the current parameters θ to generate the K-best set ˜ZL,θ(x) for each training example x, and (ii) optimizing the parameters to put probability mass on the correct trees in these sets; sets containing no correct answers are skipped.Formally, let ˜O(θ, θ') be the objective function O(θ) with ZL(x) ˜ZL,θI(x).We optimize ˜O(θ,θ') by setting θ(0) = 0~ and iteratively solving θ(t+1) = argmaxθ ˜O(θ, θ(t)) using L-BFGS until t = T. In all experiments, we set λ = 0.01, T = 5, and K = 100.After training, given a new utterance x, our system outputs the most likely y, summing out the latent logical form z: argmaxy pθ(T)(y  |x, z ∈ ˜ZL,θ(T)).We tested our system on two standard datasets, GEO and JOBS.In each dataset, each sentence x is annotated with a Prolog logical form, which we use only to evaluate and get an answer y.This evaluation is done with respect to a world w. Recall that a world w maps each predicate p ∈ P to a set of tuples w(p).There are three types of predicates in P: generic (e.g., argmax), data (e.g., city), and value (e.g., CA).GEO has 48 non-value predicates and JOBS has 26.For GEO, w is the standard US geography database that comes with the dataset.For JOBS, if we use the standard Jobs database, close to half the y’s are empty, which makes it uninteresting.We therefore generated a random Jobs database instead as follows: we created 100 job IDs.For each data predicate p (e.g., language), we add each possible tuple (e.g., (job37, Java)) to w(p) independently with probability 0.8.We used the same training-test splits as Zettlemoyer and Collins (2005) (600+280 for GEO and 500+140 for JOBS).During development, we further held out a random 30% of the training sets for validation.Our lexical triggers L include the following: (i) predicates for a small set of ≈ 20 function words (e.g., (most, argmax)), (ii) (x, x) for each value predicate x in w (e.g., (Boston, Boston)), and (iii) predicates for each POS tag in {JJ, NN, NNS} (e.g., (JJ, size), (JJ, area), etc.).3 Predicates corresponding to verbs and prepositions (e.g., traverse) are not included as overt lexical triggers, but rather in the trace predicates L(E).We also define an augmented lexicon L+ which includes a prototype word x for each predicate appearing in (iii) above (e.g., (large, size)), which cancels the predicates triggered by x’s POS tag.For GEO, there are 22 prototype words; for JOBS, there are 5.Specifying these triggers requires minimal domain-specific supervision.Results We first compare our system with Clarke et al. (2010) (henceforth, SEMRESP), which also learns a semantic parser from question-answer pairs.Table 2 shows that our system using lexical triggers L (henceforth, DCS) outperforms SEMRESP (78.9% over 73.2%).In fact, although neither DCS nor SEMRESP uses logical forms, DCS uses even less supervision than SEMRESP.SEMRESP requires a lexicon of 1.42 words per non-value predicate, WordNet features, and syntactic parse trees; DCS requires only words for the domain-independent predicates (overall, around 0.5 words per non-value predicate), POS tags, and very simple indicator features.In fact, DCS performs comparably to even the version of SEMRESP trained using logical forms.If we add prototype triggers (use L+), the resulting system (DCS+) outperforms both versions of SEMRESP by a significant margin (87.2% over 73.2% and 80.4%).Next, we compared our systems (DCS and DCS+) with the state-of-the-art semantic parsers on the full dataset for both GEO and JOBS (see Table 3).All other systems require logical forms as training data, whereas ours does not.Table 3 shows that even DCS, which does not use prototypes, is comparable to the best previous system (Kwiatkowski et al., 2010), and by adding a few prototypes, DCS+ offers a decisive edge (91.1% over 88.9% on GEO).Rather than using lexical triggers, several of the other systems use IBM word alignment models to produce an initial word-predicate mapping.This option is not available to us since we do not have annotated logical forms, so we must instead rely on lexical triggers to define the search space.Note that having lexical triggers is a much weaker requirement than having a CCG lexicon, and far easier to obtain than logical forms.Intuitions How is our system learning?Initially, the weights are zero, so the beam search is essentially unguided.We find that only for a small fraction of training examples do the K-best sets contain any trees yielding the correct answer (29% for DCS on GEO).However, training on just these examples is enough to improve the parameters, and this 29% increases to 66% and then to 95% over the next few iterations.This bootstrapping behavior occurs naturally: The “easy” examples are processed first, where easy is defined by the ability of the current model to generate the correct answer using any tree. with scope variation.Think of DCS as a higher-level Our system learns lexical associations between programming language tailored to natural language, words and predicates.For example, area (by virtue which results in programs (DCS trees) which are of being a noun) triggers many predicates: city, much simpler than the logically-equivalent lambda state, area, etc.Inspecting the final parameters calculus formulae.(DCS on GEO), we find that the feature [area, area] The idea of using CSPs to represent semantics is has a much higher weight than [area, city].Trace inspired by Discourse Representation Theory (DRT) predicates can be inserted anywhere, but the fea- (Kamp and Reyle, 1993; Kamp et al., 2005), where tures favor some insertions depending on the words variables are discourse referents.The restriction to present (for example, [in, loc] has high weight). trees is similar to economical DRT (Bos, 2009).The errors that the system makes stem from mul- The other major focus of this work is program tiple sources, including errors in the POS tags (e.g., induction—inferring logical forms from their denostates is sometimes tagged as a verb, which triggers tations.There has been a fair amount of past work on no predicates), confusion of Washington state with this topic: Liang et al. (2010) induces combinatory Washington D.C., learning the wrong lexical asso- logic programs in a non-linguistic setting.Eisenciations due to data sparsity, and having an insuffi- stein et al. (2009) induces conjunctive formulae and ciently large K. uses them as features in another learning problem.5 Discussion Piantadosi et al. (2008) induces first-order formuA major focus of this work is on our semantic rep- lae using CCG in a small domain assuming observed resentation, DCS, which offers a new perspective lexical semantics.The closest work to ours is Clarke on compositional semantics.To contrast, consider et al. (2010), which we discussed earlier.CCG (Steedman, 2000), in which semantic pars- The integration of natural language with denotaing is driven from the lexicon.The lexicon en- tions computed against a world (grounding) is becodes information about how each word can used in coming increasingly popular.Feedback from the context; for example, the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x, y), which means (Schuler, 2003) and semantic parsing (Popescu et borders looks right for the first argument and left al., 2003; Clarke et al., 2010).Past work has also fofor the second.These rules are often too stringent, cused on aligning text to a world (Liang et al., 2009), and for complex utterances, especially in free word- using text in reinforcement learning (Branavan et al., order languages, either disharmonic combinators are 2009; Branavan et al., 2010), and many others.Our employed (Zettlemoyer and Collins, 2007) or words work pushes the grounded language agenda towards are given multiple lexical entries (Kwiatkowski et deeper representations of language—think grounded al., 2010). compositional semantics.In DCS, we start with lexical triggers, which are 6 Conclusion more basic than CCG lexical entries.A trigger for We built a system that interprets natural language borders specifies only that border can be used, but utterances much more accurately than existing sysnot how.The combination rules are encoded in the tems, despite using no annotated logical forms.Our features as soft preferences.This yields a more system is based on a new semantic representation, factorized and flexible representation that is easier DCS, which offers a simple and expressive alterto search through and parametrize using features. native to lambda calculus.Free from the burden It also allows us to easily add new lexical triggers of annotating logical forms, we hope to use our without becoming mired in the semantic formalism. techniques in developing even more accurate and Quantifiers and superlatives significantly compli- broader-coverage language understanding systems. cate scoping in lambda calculus, and often type rais- Acknowledgments We thank Luke Zettlemoyer ing needs to be employed.In DCS, the mark-execute and Tom Kwiatkowski for providing us with data construct provides a flexible framework for dealing and answering questions.598
Unsupervised Part-of-Speech Tagging with Bilingual Graph-Based ProjectionsWe describe a novel approach for inducing unsupervised part-of-speech taggers for languages that have no labeled training data, but have translated text in a resource-rich language.Our method does not assume any knowledge about the target language (in particular no tagging dictionary is assumed), making it applicable to a wide array of resource-poor languages.We use graph-based label propagation for cross-lingual knowledge transfer and use the projected labels as features in an unsupervised model (Berg- Kirkpatrick et al., 2010).Across eight European languages, our approach results in an average absolute improvement of 10.4% over a state-of-the-art baseline, and 16.7% over vanilla hidden Markov models induced with the Expectation Maximization algorithm.Supervised learning approaches have advanced the state-of-the-art on a variety of tasks in natural language processing, resulting in highly accurate systems.Supervised part-of-speech (POS) taggers, for example, approach the level of inter-annotator agreement (Shen et al., 2007, 97.3% accuracy for English).However, supervised methods rely on labeled training data, which is time-consuming and expensive to generate.Unsupervised learning approaches appear to be a natural solution to this problem, as they require only unannotated text for training models.Unfortunately, the best completely unsupervised English POS tagger (that does not make use of a tagging dictionary) reaches only 76.1% accuracy (Christodoulopoulos et al., 2010), making its practical usability questionable at best.To bridge this gap, we consider a practically motivated scenario, in which we want to leverage existing resources from a resource-rich language (like English) when building tools for resource-poor foreign languages.1 We assume that absolutely no labeled training data is available for the foreign language of interest, but that we have access to parallel data with a resource-rich language.This scenario is applicable to a large set of languages and has been considered by a number of authors in the past (Alshawi et al., 2000; Xi and Hwa, 2005; Ganchev et al., 2009).Naseem et al. (2009) and Snyder et al.(2009) study related but different multilingual grammar and tagger induction tasks, where it is assumed that no labeled data at all is available.Our work is closest to that of Yarowsky and Ngai (2001), but differs in two important ways.First, we use a novel graph-based framework for projecting syntactic information across language boundaries.To this end, we construct a bilingual graph over word types to establish a connection between the two languages (§3), and then use graph label propagation to project syntactic information from English to the foreign language (§4).Second, we treat the projected labels as features in an unsupervised model (§5), rather than using them directly for supervised training.To make the projection practical, we rely on the twelve universal part-of-speech tags of Petrov et al. (2011).Syntactic universals are a well studied concept in linguistics (Carnie, 2002; Newmeyer, 2005), and were recently used in similar form by Naseem et al. (2010) for multilingual grammar induction.Because there might be some controversy about the exact definitions of such universals, this set of coarse-grained POS categories is defined operationally, by collapsing language (or treebank) specific distinctions to a set of categories that exists across all languages.These universal POS categories not only facilitate the transfer of POS information from one language to another, but also relieve us from using controversial evaluation metrics,2 by establishing a direct correspondence between the induced hidden states in the foreign language and the observed English labels.We evaluate our approach on eight European languages (§6), and show that both our contributions provide consistent and statistically significant improvements.Our final average POS tagging accuracy of 83.4% compares very favorably to the average accuracy of Berg-Kirkpatrick et al.’s monolingual unsupervised state-of-the-art model (73.0%), and considerably bridges the gap to fully supervised POS tagging performance (96.6%).The focus of this work is on building POS taggers for foreign languages, assuming that we have an English POS tagger and some parallel text between the two languages.Central to our approach (see Algorithm 1) is a bilingual similarity graph built from a sentence-aligned parallel corpus.As discussed in more detail in §3, we use two types of vertices in our graph: on the foreign language side vertices correspond to trigram types, while the vertices on the English side are individual word types.Graph construction does not require any labeled data, but makes use of two similarity functions.The edge weights between the foreign language trigrams are computed using a co-occurence based similarity function, designed to indicate how syntactically similar the middle words of the connected trigrams are (§3.2).To establish a soft correspondence between the two languages, we use a second similarity function, which leverages standard unsupervised word alignment statistics (§3.3).3 Since we have no labeled foreign data, our goal is to project syntactic information from the English side to the foreign side.To initialize the graph we tag the English side of the parallel text using a supervised model.By aggregating the POS labels of the English tokens to types, we can generate label distributions for the English vertices.Label propagation can then be used to transfer the labels to the peripheral foreign vertices (i.e. the ones adjacent to the English vertices) first, and then among all of the foreign vertices (§4).The POS distributions over the foreign trigram types are used as features to learn a better unsupervised POS tagger (§5).The following three sections elaborate these different stages is more detail.In graph-based learning approaches one constructs a graph whose vertices are labeled and unlabeled examples, and whose weighted edges encode the degree to which the examples they link have the same label (Zhu et al., 2003).Graph construction for structured prediction problems such as POS tagging is non-trivial: on the one hand, using individual words as the vertices throws away the context necessary for disambiguation; on the other hand, it is unclear how to define (sequence) similarity if the vertices correspond to entire sentences.Altun et al. (2005) proposed a technique that uses graph based similarity between labeled and unlabeled parts of structured data in a discriminative framework for semi-supervised learning.More recently, Subramanya et al. (2010) defined a graph over the cliques in an underlying structured prediction model.They considered a semi-supervised POS tagging scenario and showed that one can use a graph over trigram types, and edge weights based on distributional similarity, to improve a supervised conditional random field tagger.We extend Subramanya et al.’s intuitions to our bilingual setup.Because the information flow in our graph is asymmetric (from English to the foreign language), we use different types of vertices for each language.The foreign language vertices (denoted by Vf) correspond to foreign trigram types, exactly as in Subramanya et al. (2010).On the English side, however, the vertices (denoted by Ve) correspond to word types.Because all English vertices are going to be labeled, we do not need to disambiguate them by embedding them in trigrams.Furthermore, we do not connect the English vertices to each other, but only to foreign language vertices.4 The graph vertices are extracted from the different sides of a parallel corpus (De, Df) and an additional unlabeled monolingual foreign corpus Ff, which will be used later for training.We use two different similarity functions to define the edge weights among the foreign vertices and between vertices from different languages.Our monolingual similarity function (for connecting pairs of foreign trigram types) is the same as the one used by Subramanya et al. (2010).We briefly review it here for completeness.We define a symmetric similarity function K(uZ7 uj) over two foreign language vertices uZ7 uj E Vf based on the co-occurrence statistics of the nine feature concepts given in Table 1.Each feature concept is akin to a random variable and its occurrence in the text corresponds to a particular instantiation of that random variable.For each trigram type x2 x3 x4 in a sequence x1 x2 x3 x4 x5, we count how many times that trigram type co-occurs with the different instantiations of each concept, and compute the point-wise mutual information (PMI) between the two.5 The similarity between two trigram types is given by summing over the PMI values over feature instantiations that they have in common.This is similar to stacking the different feature instantiations into long (sparse) vectors and computing the cosine similarity between them.Finally, note that while most feature concepts are lexicalized, others, such as the suffix concept, are not.Given this similarity function, we define a nearest neighbor graph, where the edge weight for the n most similar vertices is set to the value of the similarity function and to 0 for all other vertices.We use N(u) to denote the neighborhood of vertex u, and fixed n = 5 in our experiments.To define a similarity function between the English and the foreign vertices, we rely on high-confidence word alignments.Since our graph is built from a parallel corpus, we can use standard word alignment techniques to align the English sentences De 5Note that many combinations are impossible giving a PMI value of 0; e.g., when the trigram type and the feature instantiation don’t have words in common. and their foreign language translations Df.6 Label propagation in the graph will provide coverage and high recall, and we therefore extract only intersected high-confidence (> 0.9) alignments De�f.Based on these high-confidence alignments we can extract tuples of the form [u H v], where u is a foreign trigram type, whose middle word aligns to an English word type v. Our bilingual similarity function then sets the edge weights in proportion to these tuple counts.So far the graph has been completely unlabeled.To initialize the graph for label propagation we use a supervised English tagger to label the English side of the bitext.7 We then simply count the individual labels of the English tokens and normalize the counts to produce tag distributions over English word types.These tag distributions are used to initialize the label distributions over the English vertices in the graph.Note that since all English vertices were extracted from the parallel text, we will have an initial label distribution for all vertices in Ve.A very small excerpt from an Italian-English graph is shown in Figure 1.As one can see, only the trigrams [suo incarceramento ,], [suo iter ,] and [suo carattere ,] are connected to English words.In this particular case, all English vertices are labeled as nouns by the supervised tagger.In general, the neighborhoods can be more diverse and we allow a soft label distribution over the vertices.It is worth noting that the middle words of the Italian trigrams are nouns too, which exhibits the fact that the similarity metric connects types having the same syntactic category.In the label propagation stage, we propagate the automatic English tags to the aligned Italian trigram types, followed by further propagation solely among the Italian vertices. the Italian vertices are connected to an automatically labeled English vertex.Label propagation is used to propagate these tags inwards and results in tag distributions for the middle word of each Italian trigram.Given the bilingual graph described in the previous section, we can use label propagation to project the English POS labels to the foreign language.We use label propagation in two stages to generate soft labels on all the vertices in the graph.In the first stage, we run a single step of label propagation, which transfers the label distributions from the English vertices to the connected foreign language vertices (say, Vf�) at the periphery of the graph.Note that because we extracted only high-confidence alignments, many foreign vertices will not be connected to any English vertices.This stage of label propagation results in a tag distribution ri over labels y, which encodes the proportion of times the middle word of ui E Vf aligns to English words vy tagged with label y: The second stage consists of running traditional label propagation to propagate labels from these peripheral vertices Vf� to all foreign language vertices in the graph, optimizing the following objective: 5 POS Induction After running label propagation (LP), we compute tag probabilities for foreign word types x by marginalizing the POS tag distributions of foreign trigrams ui = x− x x+ over the left and right context words: where the qi (i = 1, ... , |Vf|) are the label distributions over the foreign language vertices and µ and ν are hyperparameters that we discuss in §6.4.We use a squared loss to penalize neighboring vertices that have different label distributions: kqi − qjk2 = Ey(qi(y) − qj(y))2, and additionally regularize the label distributions towards the uniform distribution U over all possible labels Y.It can be shown that this objective is convex in q.The first term in the objective function is the graph smoothness regularizer which encourages the distributions of similar vertices (large wij) to be similar.The second term is a regularizer and encourages all type marginals to be uniform to the extent that is allowed by the first two terms (cf. maximum entropy principle).If an unlabeled vertex does not have a path to any labeled vertex, this term ensures that the converged marginal for this vertex will be uniform over all tags, allowing the middle word of such an unlabeled vertex to take on any of the possible tags.While it is possible to derive a closed form solution for this convex objective function, it would require the inversion of a matrix of order |Vf|.Instead, we resort to an iterative update based method.We formulate the update as follows: where ∀ui ∈ Vf \ Vfl, γi(y) and κi are defined as: We ran this procedure for 10 iterations.We then extract a set of possible tags tx(y) by eliminating labels whose probability is below a threshold value τ: We describe how we choose τ in §6.4.This vector tx is constructed for every word in the foreign vocabulary and will be used to provide features for the unsupervised foreign language POS tagger.We develop our POS induction model based on the feature-based HMM of Berg-Kirkpatrick et al. (2010).For a sentence x and a state sequence z, a first order Markov model defines a distribution: (9) where Val(X) corresponds to the entire vocabulary.This locally normalized log-linear model can look at various aspects of the observation x, incorporating overlapping features of the observation.In our experiments, we used the same set of features as BergKirkpatrick et al. (2010): an indicator feature based In a traditional Markov model, the emission distribution PΘ(Xi = xi  |Zi = zi) is a set of multinomials.The feature-based model replaces the emission distribution with a log-linear model, such that: on the word identity x, features checking whether x contains digits or hyphens, whether the first letter of x is upper case, and suffix features up to length 3.All features were conjoined with the state z.We trained this model by optimizing the following objective function: Note that this involves marginalizing out all possible state configurations z for a sentence x, resulting in a non-convex objective.To optimize this function, we used L-BFGS, a quasi-Newton method (Liu and Nocedal, 1989).For English POS tagging, BergKirkpatrick et al. (2010) found that this direct gradient method performed better (>7% absolute accuracy) than using a feature-enhanced modification of the Expectation-Maximization (EM) algorithm (Dempster et al., 1977).8 Moreover, this route of optimization outperformed a vanilla HMM trained with EM by 12%.We adopted this state-of-the-art model because it makes it easy to experiment with various ways of incorporating our novel constraint feature into the log-linear emission model.This feature ft incorporates information from the smoothed graph and prunes hidden states that are inconsistent with the thresholded vector tx.The function A : F —* C maps from the language specific fine-grained tagset F to the coarser universal tagset C and is described in detail in §6.2: Note that when tx(y) = 1 the feature value is 0 and has no effect on the model, while its value is −oc when tx(y) = 0 and constrains the HMM’s state space.This formulation of the constraint feature is equivalent to the use of a tagging dictionary extracted from the graph using a threshold T on the posterior distribution of tags for a given word type (Eq.7).It would have therefore also been possible to use the integer programming (IP) based approach of Ravi and Knight (2009) instead of the feature-HMM for POS induction on the foreign side.However, we do not explore this possibility in the current work.Before presenting our results, we describe the datasets that we used, as well as two baselines.We utilized two kinds of datasets in our experiments: (i) monolingual treebanks9 and (ii) large amounts of parallel text with English on one side.The availability of these resources guided our selection of foreign languages.For monolingual treebank data we relied on the CoNLL-X and CoNLL-2007 shared tasks on dependency parsing (Buchholz and Marsi, 2006; Nivre et al., 2007).The parallel data came from the Europarl corpus (Koehn, 2005) and the ODS United Nations dataset (UN, 2006).Taking the intersection of languages in these resources, and selecting languages with large amounts of parallel data, yields the following set of eight Indo-European languages: Danish, Dutch, German, Greek, Italian, Portuguese, Spanish and Swedish.Of course, we are primarily interested in applying our techniques to languages for which no labeled resources are available.However, we needed to restrict ourselves to these languages in order to be able to evaluate the performance of our approach.We paid particular attention to minimize the number of free parameters, and used the same hyperparameters for all language pairs, rather than attempting language-specific tuning.We hope that this will allow practitioners to apply our approach directly to languages for which no resources are available.We use the universal POS tagset of Petrov et al. (2011) in our experiments.10 This set C consists of the following 12 coarse-grained tags: NOUN (nouns), VERB (verbs), ADJ (adjectives), ADV (adverbs), PRON (pronouns), DET (determiners), ADP (prepositions or postpositions), NUM (numerals), CONJ (conjunctions), PRT (particles), PUNC (punctuation marks) and X (a catch-all for other categories such as abbreviations or foreign words).While there might be some controversy about the exact definition of such a tagset, these 12 categories cover the most frequent part-of-speech and exist in one form or another in all of the languages that we studied.For each language under consideration, Petrov et al. (2011) provide a mapping A from the fine-grained language specific POS tags in the foreign treebank to the universal POS tags.The supervised POS tagging accuracies (on this tagset) are shown in the last row of Table 2.The taggers were trained on datasets labeled with the universal tags.The number of latent HMM states for each language in our experiments was set to the number of fine tags in the language’s treebank.In other words, the set of hidden states F was chosen to be the fine set of treebank tags.Therefore, the number of fine tags varied across languages for our experiments; however, one could as well have fixed the set of HMM states to be a constant across languages, and created one mapping to the universal POS tagset.To provide a thorough analysis, we evaluated three baselines and two oracles in addition to two variants of our graph-based approach.We were intentionally lenient with our baselines: bilingual information by projecting POS tags directly across alignments in the parallel data.For unaligned words, we set the tag to the most frequent tag in the corresponding treebank.For each language, we took the same number of sentences from the bitext as there are in its treebank, and trained a supervised feature-HMM.This can be seen as a rough approximation of Yarowsky and Ngai (2001).We tried two versions of our graph-based approach: feature after the first stage of label propagation (Eq.1).Because many foreign word types are not aligned to an English word (see Table 3), and we do not run label propagation on the foreign side, we expect the projected information to have less coverage.Furthermore we expect the label distributions on the foreign to be fairly noisy, because the graph constraints have not been taken into account yet.Our oracles took advantage of the labeled treebanks: While we tried to minimize the number of free parameters in our model, there are a few hyperparameters that need to be set.Fortunately, performance was stable across various values, and we were able to use the same hyperparameters for all languages.We used C = 1.0 as the L2 regularization constant in (Eq.10) and trained both EM and L-BFGS for 1000 iterations.When extracting the vector t, used to compute the constraint feature from the graph, we tried three threshold values for r (see Eq.7).Because we don’t have a separate development set, we used the training set to select among them and found 0.2 to work slightly better than 0.1 and 0.3.For seven out of eight languages a threshold of 0.2 gave the best results for our final model, which indicates that for languages without any validation set, r = 0.2 can be used.For graph propagation, the hyperparameter v was set to 2 x 10−6 and was not tuned.The graph was constructed using 2 million trigrams; we chose these by truncating the parallel datasets up to the number of sentence pairs that contained 2 million trigrams.Table 2 shows our complete set of results.As expected, the vanilla HMM trained with EM performs the worst.The feature-HMM model works better for all languages, generalizing the results achieved for English by Berg-Kirkpatrick et al. (2010).Our “Projection” baseline is able to benefit from the bilingual information and greatly improves upon the monolingual baselines, but falls short of the “No LP” model by 2.5% on an average.The “No LP” model does not outperform direct projection for German and Greek, but performs better for six out of eight languages.Overall, it gives improvements ranging from 1.1% for German to 14.7% for Italian, for an average improvement of 8.3% over the unsupervised feature-HMM model.For comparison, the completely unsupervised feature-HMM baseline accuracy on the universal POS tags for English is 79.4%, and goes up to 88.7% with a treebank dictionary.Our full model (“With LP”) outperforms the unsupervised baselines and the “No LP” setting for all languages.It falls short of the “Projection” baseline for German, but is statistically indistinguishable in terms of accuracy.As indicated by bolding, for seven out of eight languages the improvements of the “With LP” setting are statistically significant with respect to the other models, including the “No LP” setting.11 Overall, it performs 10.4% better than the hitherto state-of-the-art feature-HMM baseline, and 4.6% better than direct projection, when we macro-average the accuracy over all languages.Our full model outperforms the “No LP” setting because it has better vocabulary coverage and allows the extraction of a larger set of constraint features.We tabulate this increase in Table 3.For all languages, the vocabulary sizes increase by several thousand words.Although the tag distributions of the foreign words (Eq.6) are noisy, the results confirm that label propagation within the foreign language part of the graph adds significant quality for every language.Figure 2 shows an excerpt of a sentence from the Italian test set and the tags assigned by four different models, as well as the gold tags.While the first three models get three to four tags wrong, our best model gets only one word wrong and is the most accurate among the four models for this example.Examining the word fidanzato for the “No LP” and “With LP” models is particularly instructive.As Figure 1 shows, this word has no high-confidence alignment in the Italian-English bitext.As a result, its POS tag needs to be induced in the “No LP” case, while the 11A word level paired-t-test is significant at p < 0.01 for Danish, Greek, Italian, Portuguese, Spanish and Swedish, and p < 0.05 for Dutch. correct tag is available as a constraint feature in the “With LP” case.We have shown the efficacy of graph-based label propagation for projecting part-of-speech information across languages.Because we are interested in applying our techniques to languages for which no labeled resources are available, we paid particular attention to minimize the number of free parameters and used the same hyperparameters for all language pairs.Our results suggest that it is possible to learn accurate POS taggers for languages which do not have any annotated data, but have translations into a resource-rich language.Our results outperform strong unsupervised baselines as well as approaches that rely on direct projections, and bridge the gap between purely supervised and unsupervised POS tagging models.We would like to thank Ryan McDonald for numerous discussions on this topic.We would also like to thank Amarnag Subramanya for helping us with the implementation of label propagation and Shankar Kumar for access to the parallel data.Finally, we thank Kuzman Ganchev and the three anonymous reviewers for helpful suggestions and comments on earlier drafts of this paper.
CHARACTERIZING STRUCTURAL DESCRIPTIONS PRODUCED BY VARIOUS GRAMMATICAL FORMALISMS*We consider the structural descriptions produced by various grammatical formalisms in terms of the complexity of the paths and the relationship between paths in the sets of structural descriptions that each system can generate.In considering the relationship between formalisms, we show that it is useful to abstract away from the details of the formalism, and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation, we describe a class of formalisms which we call Linear Context- Free Rewriting Systems, and show they are recognizable in polynomial time and generate only semilinear languages.Much of the study of grammatical systems in computational linguistics has been focused on the weak generative capacity of grammatical formalism.Little attention, however, has been paid to the structural descriptions that these formalisms can assign to strings, i.e. their strong generative capacity.This aspect of the formalism is both linguistically and computationally important.For example, Gazdar (1985) discusses the applicability of Indexed Grammars (IG's) to Natural Language in terms of the structural descriptions assigned; and Berwick (1984) discusses the strong generative capacity of Lexical-Functional Grammar (LFG) and Government and Bindings grammars (GB).The work of Thatcher (1973) and Rounds (1969) define formal systems that generate tree sets that are related to CFG's and IG's.We consider properties of the tree sets generated by CFG's, Tree Adjoining Grammars (TAG's), Head Grammars (HG's), Categorial Grammars (CG's), and IG's.We examine both the complexity of the paths of trees in the tree sets, and the kinds of dependencies that the formalisms can impose between paths.These two properties of the tree sets are not only linguistically relevant, but also have computational importance.By considering derivation trees, and thus abstracting away from the details of the composition operation and the structures being manipulated, we are able to state the similarities and differences between the 'This work was partially supported by NSF grants MCS42-19116-CER, MCS82-07294 and DCR-84-10413, ARO grant DAA 29-84-9-0027, and DARPA grant N00014-85-K0018.We are very grateful to Tony Kroc.h, Michael Pails, Sunil Shende, and Mark Steedman for valuable discussions. formalisms.It is striking that from this point of view many formalisms can be grouped together as having identically structured derivation tree sets.This suggests that by generalizing the notion of context-freeness in CFG's, we can define a class of grammatical formalisms that manipulate more complex structures.In this paper, we outline how such family of formalisms can be defined, and show that like CFG's, each member possesses a number of desirable linguistic and computational properties: in particular, the constant growth property and polynomial recognizability.From Thatcher's (1973) work, it is obvious that the complexity of the set of paths from root to frontier of trees in a local set (the tree set of a CFG) is regular'.We define the path set of a tree 1 as the set of strings that label a path from the root to frontier of 7.The path set of a tree set is the union of the path sets of trees in that tree set.It can be easily shown from Thatcher's result that the path set of every local set is a regular set.As a result, CFG's can not provide the structural descriptions in which there are nested dependencies between symbols labelling a path.For example, CFG's cannot produce trees of the form shown in Figure 1 in which there are nested dependencies between S and NP nodes appearing on the spine of the tree.Gazdar (1985) argues this is the appropriate analysis of unbounded dependencies in the hypothetical Scandinavian language Norwedish.He also argues that paired English complementizers may also require structural descriptions whose path sets have nested dependencies.Head Grammars (HG's), introduced by Pollard (1984), is a formalism that manipulates headed strings: i.e., strings, one of whose symbols is distinguished as the head.Not only is concatenation of these strings possible, but head wrapping can be used to split a string and wrap it around another string.The productions of HG's are very similar to those of CFG's except that the operation used must be made explicit.Thus, the tree sets generated by HG's are similar to those of CFG's, with each node annotated by the operation (concatenation or wrapping) used to combine the headed strings derived by the daughters of Tree Adjoining Grammars, a tree rewriting formalism, was introduced by Joshi, Levy and Takahashi (1975) and Joshi (1983/85).A TAG consists of a finite set of elementary trees that are either initial trees or auxiliary trees.Trees are composed using an operation called adjoining, which is defined as follows.Let n be some node labeled X in a tree -y (see Figure 3).Let 71 be a tree with root and foot labeled by X.When 7' is adjoined at ?I in the tree 7 we obtain a tree v&quot;.The subtree under,; is excised from 7, the tree 7' is inserted in its place and the excised subtree is inserted below the foot of y'.It can be shown that the path set of the tree set generated by a TAG G is a context-free language.TAG's can be used to give the structural descriptions discussed by Gazdar (1985) for the unbounded nested dependencies in Norwedish, for cross serial dependencies in Dutch subordinate clauses, and for the nestings of paired English complementizers.From the definition of TAG's, it follows that the choice of adjunction is not dependent on the history of the derivation.Like CFG's, the choice is predetermined by a finite number of rules encapsulated in the grammar.Thus, the derivation trees for TAG's have the same structure as local sets.As with HG's derivation structures are annotated; in the case of TAG's, by the trees used for adjunction and addresses of nodes of the elementary tree where adjunctions occurred.We can define derivation trees inductively on the length of the derivation of a tree 1.If 7 is an elementary tree, the derivation tree consists of a single node labeled 7.Suppose -y results from the adjunction of 71, ,-y, at the k distinct tree addresses 141, , nk in some elementary tree 7', respectively.The tree denoting this derivation of 7 is rooted with a node labeled 7' having k subtrees for the derivations of 71, ... ,7a.The edge from the root to the subtree for the derivation of 7i is labeled by the address ni.To show that the derivation tree set of a TAG is a local set, nodes are labeled by pairs consisting of the name of an elementary tree and the address at which it was adjoined, instead of labelling edges with addresses.The following rule corresponds to the above derivation, where 71, , 7k are derived from the auxiliary trees , , fik, respectively. for all addresses n in some elementary tree at which 7' can be adjoined.If 7' is an initial tree we do not include an address on the left-hand side.There has been recent interest in the application of Indexed Grammars (IG's) to natural languages.Gazdar (1985) considers a number of linguistic analyses which IG's (but not CFG's) can make, for example, the Norwedish example shown in Figure 1.The work of Rounds (1969) shows that the path sets of trees derived by IG's (like those of TAG's) are context-free languages.Trees derived by IG's exhibit a property that is not exhibited by the trees sets derived by TAG's or CFG's.Informally, two or more paths can be dependent on each other: for example, they could be required to be of equal length as in the trees in Figure 4. generates such a tree set.We focus on this difference between the tree sets of CFG's and IG's, and formalize the notion of dependence between paths in a tree set in Section 3.An IG can be viewed as a CFG in which each nonterminal is associated with a stack.Each production can push or pop symbols on the stack as can be seen in the following productions that generate tree of the form shown in Figure 4b.Gazdar (1985) argues that sharing of stacks can be used to give analyses for coordination.Analogous to the sharing of stacks in IC's, Lexical-Functional Grammar's (LFG's) use the unification of unbounded hierarchical structures.Unification is used in LFG's to produce structures having two dependent spines of unbounded length as in Figure 5.Bresnan, Kaplan, Peters, and Zaenen (1982) argue that these structures are needed to describe crossed-serial dependencies in Dutch subordinate clauses.Gazdar (1985) considers a restriction of IG's in which no more than one nonterminal on the right-hand-side of a production can inherit the stack from the left-hand-side.Unbounded dependencies between branches are not possible in such a system.TAG's can be shown to be equivalent to this restricted system.Thus, TAG's can not give analyses in which dependencies between arbitrarily large branches exist.Steedman (1986) considers Categorial Grammars in which both the operations of function application and composition may be used, and in which function can specify whether they take their arguments from their right or left.While the generative power of CG's is greater that of CFG's, it appears to be highly constrained.Hence, their relationship to formalisms such as HG's and TAG's is of interest.On the one hand, the definition of composition in Steedman (1985), which technically permits composition of functions with unbounded number of arguments, generates tree sets with dependent paths such as those shown in Figure 6.This kind of dependency arises from the use of the composition operation to compose two arbitrarily large categories.This allows an unbounded amount of information about two separate paths (e.g. an encoding of their length) to be combined and used to influence the later derivation.A consequence of the ability to generate tree sets with this property is that CC's under this definition can generate the following language which can not be generated by either TAG's or HG's.0n0'i'i0'2&quot;bin242bn I n = 711 + n2 } On the other hand, no linguistic use is made of this general form of composition and Steedman (personal communication) and Steedman (1986) argues that a more limited definition of composition is more natural.With this restriction the resulting tree sets will have independent paths.The equivalence of CC's with this restriction to TAG's and HG's is, however, still an open problem.An extension of the TAG system was introduced by Joshi et al. (1975) and later redefined by Joshi (1987) in which the adjunction operation is defined on sets of elementary trees rather than single trees.A multicomponent Tree Adjoining Grammar (MCTAG) consists of a finite set of finite elementary tree sets.We must adjoin all trees in an auxiliary tree set together as a single step in the derivation.The adjunction operation with respect to tree sets (multicomponent adjunction) is defined as follows.Each member of a set of trees can be adjoined into distinct nodes of trees in a single elementary tree set, i.e, derivations always involve the adjunction of a derived auxiliary tree set into an elementary tree set.Lilo CFG's, TAG's, and HG's the derivation tree set of a MCTAG will be a local set.The derivation trees of a MCTAG are similar to those of a TAG.Instead of the names of elementary trees of a TAG, the nodes are labeled by a sequence of names of trees in an elementary tree set.Since trees in a tree set are adjoined together, the addressing scheme uses a sequence of pairings of the address and name of the elementary tree adjoined at that address.The following context-free production captures the derivation step of the grammar shown in Figure 7, in which the trees in the auxiliary tree set are adjoined into themselves at the root node (address c).((fii, Q2, Pa) , —■ (01, i32, 03) , e),(02,e) Oa, en) The path complexity of the tee set generated by a MCTAG is not necessarily context-free.Like the string languages of MCTAG's, the complexity of the path set increases as the cardinality of the elementary tee sets increases, though both the string languages and path sets will always be semilinear.MCTAG's are able to generate tee sets having dependent paths.For example, the MCTAG shown in Figure 7 generates trees of the form shown in Figure 4b.The number of paths that can be dependent is bounded by the grammar (in fact the maximum cardinality of a tree set determines this bound).Hence, trees shown in Figure 8 can not be generated by any MCTAG (but can be generated by an IG) because the number of pairs of dependent paths grows with n. Since the derivation tees of TAG's, MCTAG's, and HG's are local sets, the choice of the structure used at each point in a derivation in these systems does not depend on the context at that point within the derivation.Thus, as in CFG's, at any point in the derivation, the set of structures that can be applied is determined only by a finite set of rules encapsulated by the grammar.We characterize a class of formalisms that have this property in Section 4.We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.As is described in Section 4, the property of having a derivation tree set that is a local set appears to be useful in showing important properties of the languages generated by the formalisms.The semilinearity of Tree Adjoining Languages (TAL's), MCTAL's, and Head Languages (HL's) can be proved using this property, with suitable restrictions on the composition operations.Roughly speaking, we say that a tee set contains trees with dependent paths if there are two paths p., = vim., and g., = in each 7 E r such that v., is some, possibly empty, shared initial subpath; v., and wi are not bounded in length; and there is some &quot;dependence&quot; (such as equal length) between the set of all v., and w., for each 7 Er.A tree set may be said to have dependencies between paths if some &quot;appropriate&quot; subset can be shown to have dependent paths as defined above.We attempt to formalize this notion in terms of the tee pumping lemma which can be used to show that a tee set does not have dependent paths.Thatcher (1973) describes a tee pumping lemma for recognizable sets related to the string pumping lemma for regular sets.The tee in Figure 9a can be denoted by t1 i223 where tee substitution is used instead of concatenation.The tee pumping lemma states that if there is tree, t = 22 t2t3, generated by a CFG G, whose height is more than a predetermined bound k, then all trees of the form ti tP3 for each i > 0 will also generated by G (as shown in Figure 9b).The string pumping lemma for CFG's (uvwxy-theorem) can be seen as a corollary of this lemma. from this pumping lemma: a single path can be pumped independently.For example, let us consider a tree set containing trees of the form shown in Figure 4a.The tree t2 must be on one of the two branches.Pumping t2 will change only one branch and leave the other branch unaffected.Hence, the resulting trees will no longer have two branches of equal size.We can give a tree pumping lemma for TAG's by adapting the uvwxy-theorem for CFL's since the tree sets of TAG's have independent and context-free paths.This pumping lemma states that if there is tree, t = t2t3t4t5, generated by a TAG G, such that its height is more than a predetermined bound k, then all trees of the form ti it tstt ts for each i > 0 will also generated by G. Similarly, for tree sets with independent paths and more complex path sets, tree pumping lemmas can be given.We adapt the string pumping lemma for the class of languages corresponding to the complexity of the path set.A geometrical progression of language families defined by Weir (1987) involves tree sets with increasingly complex path sets.The independence of paths in the tree sets of the k tI grammatical formalism in this hierarchy can be shown by means of tree pumping lemma of the form t1ti3t ...t The path set of tree sets at level k +1 have the complexity of the string language of level k. The independence of paths in a tree set appears to be an important property.A formalism generating tree sets with complex path sets can still generate only semilinear languages if its tree sets have independent paths, and semilinear path sets.For example, the formalisms in the hierarchy described above generate semilinear languages although their path sets become increasingly more complex as one moves up the hierarchy.From the point of view of recognition, independent paths in the derivation structures suggests that a top-down parser (for example) can work on each branch independently, which may lead to efficient parsing using an algorithm based on the Divide and Conquer technique.From the discussion so far it is clear that a number of formalisms involve some type of context-free rewriting (they have derivation trees that are local sets).Our goal is to define a class of formal systems, and show that any member of this class will possess certain attractive properties.In the remainder of the paper, we outline how a class of Linear Context-Free Rewriting Systems (LCFRS's) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.In defining LCFRS's, we hope to generalize the definition of CFG's to formalisms manipulating any structure, e.g. strings, trees, or graphs.To be a member of LCFRS a formalism must satisfy two restrictions.First, any grammar must involve a finite number of elementary structures, composed using a finite number of composition operations.These operations, as we see below, are restricted to be size preserving (as in the case of concatenation in CFG) which implies that they will be linear and non-erasing.A second restriction on the formalisms is that choices during the derivation are independent of the context in the derivation.As will be obvious later, their derivation tree sets will be local sets as are those of CFG's.Each derivation of a grammar can be represented by a generalized context-free derivation tree.These derivation trees show how the composition operations were used to derive the final structures from elementary structures.Nodes are annotated by the name of the composition operation used at that step in the derivation.As in the case of the derivation trees of CFG's, nodes are labeled by a member of some finite set of symbols (perhaps only implicit in the grammar as in TAG's) used to denote derived structures.Frontier nodes are annotated by zero arty functions corresponding to elementary structures.Each treelet (an internal node with all its children) represents the use of a rule that is encapsulated by the grammar The grammar encapsulates (either explicitly or implicitly) a finite number of rules that can be written as follows: n > 0 In the case of CFG's, for each production In the case of TAG's, a derivation step in which the derived trees RI, • • • , On are adjoined into fi at rhe addresses • • • • in. would involve the use of the following rule2.The composition operations in the case of CFG's are parameterized by the productions.In TAG's the elementary tree and addresses where adjunction takes place are used to instantiate the operation.To show that the derivation trees of any grammar in LCFRS is a local set, we can rewrite the annotated derivation trees such that every node is labelled by a pair to include the composition operations.These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).Unlike GCFG's, however, the composition operations of LCFRS's are restricted to be linear (do not duplicate unboundedly large structures) and nonerasing (do not erase unbounded structures, a restriction made in most modern transformational grammars).These two restrictions impose the constraint that the result of composing any two structures should be a structure whose &quot;size&quot; is the sum of its constituents plus some constant For example, the operation 4, discussed in the case of CFG's (in Section 4.1) adds the constant equal to the sum of the length of the strings VI, un+r• Since we are considering formalisms with arbitrary structures it is difficult to precisely specify all of the restrictions on the composition operations that we believe would appropriately generalize the concatenation operation for the particular structures used by the formalism.In considering recognition of LCFRS's, we make further assumption concerning the contribution of each structure to the input string, and how the composition operations combine structures in this respect.We can show that languages generated by LCFRS's are semilinear as long as the composition operation does not remove any terminal symbols from its arguments.Semilinearity and the closely related constant growth property (a consequence of semilinearity) have been discussed in the context of grammars for natural languages by Joshi (1983/85) and Berwick and Weinberg (1984).Roughly speaking, a language, L, has the property of semilinearity if the number of occurrences of each symbol in any string is a linear combination of the occurrences of these symbols in some fixed finite set of strings.Thus, the length of any string in L is a linear combination of the length of strings in some fixed finite subset of L, and thus L is said to have the constant growth property.Although this property is not structural, it depends on the structural property that sentences can be built from a finite set of clauses of bounded structure as noted by Joshi (1983/85).The property of semilinearity is concerned only with the occurrence of symbols in strings and not their order.Thus, any language that is letter equivalent to a semilinear language is also semilinear.Two strings are letter equivalent if they contain equal number of occurrences of each terminal symbol, and two languages are letter equivalent if every string in one language is letter equivalent to a string in the other language and vice-versa.Since every CFL is known to be semilinear (Parikh, 1966), in order to show semilinearity of some language, we need only show the existence of a letter equivalent CFL Our definition of LCFRS's insists that the composition operations are linear and nonerasing.Hence, the terminal symbols appearing in the structures that are composed are not lost (though a constant number of new symbols may be introduced).If 0(A) gives the number of occurrences of each terminal in the structure named by A, then, given the constraints imposed on the formalism, for each rule A --. fp(Ai, , An) we have the equality where c„ is some constant.We can obtain a letter equivalent CFL defined by a CFG in which the for each rule as above, we have the production A —* A1 Anup where tk (up) = cp.Thus, the language generated by a grammar of a LCFRS is semilinear.We now turn our attention to the recognition of string languages generated by these formalisms (LCFRL's).As suggested at the end of Section 3, the restrictions that have been specified in the definition of LCFRS's suggest that they can be efficiently recognized.In this section for the purposes of showing that polynomial time recognition is possible, we make the additional restriction that the contribution of a derived structure to the input string can be specified by a bounded sequence of substrings of the input.Since each composition operation is linear and nonerasing, a bounded sequences of substrings associated with the resulting structure is obtained by combining the substrings in each of its arguments using only the concatenation operation, including each substring exactly once.CFG's, TAG's, MCTAG's and HG's are all members of this class since they satisfy these restrictions.Giving a recognition algorithm for LCFRL's involves describing the substrings of the input that are spanned by the structures derived by the LCFRS's and how the composition operation combines these substrings.For example, in TAG's a derived auxiliary tree spans two substrings (to the left and right of the foot node), and the adjunction operation inserts another substring (spanned by the subtree under the node where adjunction takes place) between them (see Figure 3).We can represent any derived tree of a TAG by the two substrings that appear in its frontier, and then define how the adjunction operation concatenates the substrings.Similarly, for all the LCFRS's, discussed in Section 2, we can define the relationship between a structure and the sequence of substrings it spans, and the effect of the composition operations on sequences of substrings.A derived structure will be mapped onto a sequence zi of substrings (not necessarily contiguous in the input), and the composition operations will be mapped onto functions that can defined as follows3. f((zi,• • • , zni), (m.,• • • ,Yn3)) = (Z1, • • • , Zn3) where each z, is the concatenation of strings from z,'s and yk's.The linear and nonerasing assumptions about the operations discussed in Section 4.1 require that each z, and yk is used exactly once to define the strings zi, ,z1,3.Some of the operations will be constant functions, corresponding to elementary structures, and will be written as f () = zi), where each z, is a constant, the string of terminal symbols al an,,,.This representation of structures by substrings and the composition operation by its effect on substrings is related to the work of Rounds (1985).Although embedding this version of LCFRS's in the framework of ILFP developed by Rounds (1985) is straightforward, our motivation was to capture properties shared by a family of grammatical systems and generalize them defining a class of related formalisms.This class of formalisms have the properties that their derivation trees are local sets, and manipulate objects, using a finite number of composition operations that use a finite number of symbols.With the additional assumptions, inspired by Rounds (1985), we can show that members of this class can be recognized in polynomial time.We use Alternating Turing Machines (Chandra, Kozen, and Stockmeyer, 1981) to show that polynomial time recognition is possible for the languages discussed in Section 4.3.An ATM has two types of states, existential and universal.In an existential state an ATM behaves like a nondeterministic TM, accepting if one of the applicable moves leads to acceptance; in an universal state the ATM accepts if all the applicable moves lead to acceptance.An ATM may be thought of as spawning independent processes for each applicable move.A k-tape ATM, M, has a read-only input tape and k read-write work tapes.A step of an ATM consists of reading a symbol from each tape and optionally moving each head to the left or right one tape cell.A configuration of M consists of a state of the finite control, the nonblank contents of the input tape and k work tapes, and the position of each head.The space of a configuration is the sum of the lengths of the nonblank tape contents of the k work tapes.M works in space S(n) if for every string that M accepts no configuration exceeds space S(n).It has been shown in (Chandra et al., 1981) that if M works in space log n then there is a deterministic TM which accepts the same language in polynomial time.In the next section, we show how an ATM can accept the strings generated by a grammar in a LCFRS formalism in logspace, and hence show that each family can be recognized in polynomial time.We define an ATM, M, recognizing a language generated by a grammar, G, having the properties discussed in Section 43.It can be seen that M performs a top-down recognition of the input al ... nin logspace.The rewrite rules and the definition of the composition operations may be stored in the finite state control since G uses a finite number of them.Suppose M has to determine whether the k substrings ,.. .,ak can be derived from some symbol A.Since each zi is a contiguous substring of the input (say ai,), and no two substrings overlap, we can represent zi by the pair of integers (i2, i2).We assume that M is in an existential state qA, with integers i1 and i2 representing zi in the (2i — 1)th and 22th work tape, for 1 < i < k. For each rule p : A fp(B, C) such that fp is mapped onto the function fp defined by the following rule. jp((xi,.. • ,rnt), (1ii, • • • • Yn3))= (Zi , • • • , Zk) M breaks xi , zk into substrings xi, , xn, and yi,...,y&quot; conforming to the definition of fp.M spawns as many processes as there are ways of breaking up ri , .. • , zt, and rules with A on their left-hand-side.Each spawned process must check if xi , , xn, and , yn, can be derived from B and C, respectively.To do this, the x's and y's are stored in the next 2ni + 2n2 tapes, and M goes to a universal state.Two processes are spawned requiring B to derive z,.., and C to derive yi , , y,.Thus, for example, one successor process will be have M to be in the existential state qa with the indices encoding xi , , xn, in the first 2n i tapes.For rules p : A fpo such that fp is constant function, giving an elementary structure, fp is defined such that fp() = (Si ... xi() where each z is a constant string.M must enter a universal state and check that each of the k constant substrings are in the appropriate place (as determined by the contents of the first 2k work tapes) on the input tape.In addition to the tapes required to store the indices, M requires one work tape for splitting the substrings.Thus, the ATM has no more than 6km&quot; + 1 work tapes, where km&quot; is the maximum number of substrings spanned by a derived structure.Since the work tapes store integers (which can be written in binary) that never exceed the size of the input, no configuration has space exceeding 0(log n).Thus, M works in logspace and recognition can be done on a deterministic TM in polynomial tape.We have studied the structural descriptions (tree sets) that can be assigned by various grammatical systems, and classified these formalisms on the basis of two features: path complexity; and path independence.We contrasted formalisms such as CFG's, HG's, TAG's and MCTAG's, with formalisms such as IG's and unificational systems such as LFG's and FUG's.We address the question of whether or not a formalism can generate only structural descriptions with independent paths.This property reflects an important aspect of the underlying linguistic theory associated with the formalism.In a grammar which generates independent paths the derivations of sibling constituents can not share an unbounded amount of information.The importance of this property becomes clear in contrasting theories underlying GPSG (Gazdar, Klein, Pulluna, and Sag, 1985), and GB (as described by Berwick, 1984) with those underlying LFG and FUG.It is interesting to note, however, that the ability to produce a bounded number of dependent paths (where two dependent paths can share an unbounded amount of information) does not require machinery as powerful as that used in LFG, FUG and IG's.As illustrated by MCTAG's, it is possible for a formalism to give tree sets with bounded dependent paths while still sharing the constrained rewriting properties of CFG's, HG's, and TAG's.In order to observe the similarity between these constrained systems, it is crucial to abstract away from the details of the structures and operations used by the system.The similarities become apparent when they are studied at the level of derivation structures: derivation nee sets of CFG's, HG's, TAG's, and MCTAG's are all local sets.Independence of paths at this level reflects context freeness of rewriting and suggests why they can be recognized efficiently.As suggested in Section 4.3.2, a derivation with independent paths can be divided into subcomputations with limited sharing of information.We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.This family represents an attempt to generalize the properties shared by CFG's, HG's, TAG's, and MCTAG's.Like HG's, TAG's, and MCTAG's, members of LCFRS can manipulate structures more complex than terminal strings and use composition operations that are more complex that concatenation.We place certain restrictions on the composition operations of LCFRS's, restrictions that are shared by the composition operations of the constrained grammatical systems that we have considered.The operations must be linear and nonerasing, i.e., they can not duplicate or erase structure from their arguments.Notice that even though IG's and LFG's involve CFG-like productions, they are (linguistically) fundamentally different from CFG's because the composition operations need not be linear.By sharing stacks (in IG's) or by using nonlinear equations over f-structures (in FUG's and LFG's), structures with unbounded dependencies between paths can be generated.LCFRS's share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).The results described in this paper suggest a characterization of mild context-sensitivity in terms of generalized context-freeness.Having defined LCFRS's, in Section 4.2 we established the semilinearity (and hence constant growth property) of the languages generated.In considering the recognition of these languages, we were forced to be more specific regarding the relationship between the structures derived by these formalisms and the substrings they span.We insisted that each structure dominates a bounded number of (not necessarily adjacent) substrings.The composition operations are mapped onto operations that use concatenation to define the substrings spanned by the resulting structures.We showed that any system defined in this way can be recognized in polynomial time.Members of LCFRS whose operations have this property can be translated into the ILFP notation (Rounds, 1985).However, in order to capture the properties of various grammatical systems under consideration, our notation is more restrictive that ILFP, which was designed as a general logical notation to characterize the complete class of languages that are recognizable in polynomial time.It is known that CFG's, HG's, and TAG's can be recognized in polynomial time since polynomial time algorithms exist in for each of these formalisms.A corollary of the result of Section 4.3 is that polynomial time recognition of MCTAG's is possible.As discussed in Section 3, independent paths in tree sets, rather than the path complexity, may be crucial in characterizing semilinearity and polynomial time recognition.We would like to relax somewhat the constraint on the path complexity of formalisms in LCFRS.Formalisms such as the restricted indexed grammars (Gazdar, 1985) and members of the hierarchy of grammatical systems given by Weir (1987) have independent paths, but more complex path sets.Since these path sets are semilinear, the property of independent paths in their tree sets is sufficient to cause semilinearity of the languages generated by them.In addition, the restricted version of CG's (discussed in Section 6) generates tree sets with independent paths and we hope that it can be included in a more general definition of LCFRS's containing formalisms whose tree sets have path sets that are themselves LCFRL's (as in the case of the restricted indexed grammars, and the hierarchy defined by Weir).LCFRS's have only been loosely defined in this paper; we have yet to provide a complete set of formal properties associated with members of this class.In this paper, our goal has been to use the notion of LCFRS's to classify grammatical systems on the basis of their strong generative capacity.In considering this aspect of a formalism, we hope to better understand the relationship between the structural descriptions generated by the grammars of a formalism, and the properties of semilinearity and polynomial recognizability.
Multilingual Dependency Analysis with a Two-Stage Discriminative Parserpresent a two-stage multilingual pendency parser and evaluate it on 13 diverse languages.The first stage based on the unlabeled dependency parsing models described by McDonald and Pereira (2006) augmented with morphological features for a subset of the languages.The second stage takes the output from the first and labels all the edges in the dependency graph with appropriate syntactic categories using a globally trained sequence classifier over components of the graph.We report results on the CoNLL-X shared task (Buchholz et al., 2006) data sets and present an error analysis.Often in language processing we require a deep syntactic representation of a sentence in order to assist further processing.With the availability of resources such as the Penn WSJ Treebank, much of the focus in the parsing community had been on producing syntactic representations based on phrase-structure.However, recently their has been a revived interest in parsing models that produce dependency graph representations of sentences, which model words and their arguments through directed edges (Hudson, 1984; Mel'ˇcuk, 1988).This interest has generally come about due to the computationally efficient and flexible nature of dependency graphs and their ability to easily model non-projectivity in freer-word order languages.Nivre (2005) gives an introduction to dependency representations of sentences and recent developments in dependency parsing strategies.Dependency graphs also encode much of the deep syntactic information needed for further processing.This has been shown through their successful use in many standard natural language processing tasks, including machine translation (Ding and Palmer, 2005), sentence compression (McDonald, 2006), and textual inference (Haghighi et al., 2005).In this paper we describe a two-stage discriminative parsing approach consisting of an unlabeled parser and a subsequent edge labeler.We evaluate this parser on a diverse set of 13 languages using data provided by the CoNLL-X shared-task organizers (Buchholz et al., 2006; Hajiˇc et al., 2004; Simov et al., 2005; Simov and Osenova, 2003; Chen et al., 2003; B¨ohmov´a et al., 2003; Kromann, 2003; van der Beek et al., 2002; Brants et al., 2002; Kawata and Bartels, 2000; Afonso et al., 2002; Dˇzeroski et al., 2006; Civit Torruella and MartiAntonin, 2002; Nilsson et al., 2005; Oflazer et al., 2003; Atalay et al., 2003).The results are promising and show the language independence of our system under the assumption of a labeled dependency corpus in the target language.For the remainder of this paper, we denote by x = x1,... xn a sentence with n words and by y a corresponding dependency graph.A dependency graph is represented by a set of ordered pairs (i, j) E y in which xj is a dependent and xi is the corresponding head.Each edge can be assigned a label l(ij) from a finite set L of predefined labels.We Proceedings of the 10th Conference on Computational Natural Language Learning (CoNLL-X), pages 216–220, New York City, June 2006. c�2006 Association for Computational Linguistics assume that all dependency graphs are trees but may be non-projective, both of which are true in the data sets we use.The first stage of our system creates an unlabeled parse y for an input sentence x.This system is primarily based on the parsing models described by McDonald and Pereira (2006).That work extends the maximum spanning tree dependency parsing framework (McDonald et al., 2005a; McDonald et al., 2005b) to incorporate features over multiple edges in the dependency graph.An exact projective and an approximate non-projective parsing algorithm are presented, since it is shown that nonprojective dependency parsing becomes NP-hard when features are extended beyond a single edge.That system uses MIRA, an online large-margin learning algorithm, to compute model parameters.Its power lies in the ability to define a rich set of features over parsing decisions, as well as surface level features relative to these decisions.For instance, the system of McDonald et al. (2005a) incorporates features over the part of speech of words occurring between and around a possible head-dependent relation.These features are highly important to overall accuracy since they eliminate unlikely scenarios such as a preposition modifying a noun not directly to its left, or a noun modifying a verb with another verb occurring between them.We augmented this model to incorporate morphological features derived from each token.Consider a proposed dependency of a dependent xj on the head xi, each with morphological features Mj and Mi respectively.We then add to the representation of the edge: Mi as head features, Mj as dependent features, and also each conjunction of a feature from both sets.These features play the obvious role of explicitly modeling consistencies and commonalities between a head and its dependents in terms of attributes like gender, case, or number.Not all data sets in our experiments include morphological features, so we use them only when available.The second stage takes the output parse y for sentence x and classifies each edge (i, j) E y with a particular label l(i,j).Ideally one would like to make all parsing and labeling decisions jointly so that the shared knowledge of both decisions will help resolve any ambiguities.However, the parser is fundamentally limited by the scope of local factorizations that make inference tractable.In our case this means we are forced only to consider features over single edges or pairs of edges.However, in a two stage system we can incorporate features over the entire output of the unlabeled parser since that structure is fixed as input.The simplest labeler would be to take as input an edge (i, j) E y for sentence x and find the label with highest score, Doing this for each edge in the tree would produce the final output.Such a model could easily be trained using the provided training data for each language.However, it might be advantageous to know the labels of other nearby edges.For instance, if we consider a head xi with dependents xj1, ... , xjM, it is often the case that many of these dependencies will have correlated labels.To model this we treat the labeling of the edges (i, j1), ... , (i, jM) as a sequence labeling problem, We use a first-order Markov factorization of the score s(l(i,jm), l(i,jm�1), i, y, x) in which each factor is the score of labeling the adjacent edges (i, jm) and (i, jm−1) in the tree y.We attempted higher-order Markov factorizations but they did not improve performance uniformly across languages and training became significantly slower.For score functions, we use simple dot products between high dimensional feature representations and a weight vector Assuming we have an appropriate feature representation, we can find the highest scoring label sequence with Viterbi’s algorithm.We use the MIRA online learner to set the weights (Crammer and Singer, 2003; McDonald et al., 2005a) since we found it trained quickly and provide good performance.Furthermore, it made the system homogeneous in terms of learning algorithms since that is what is used to train our unlabeled parser (McDonald and Pereira, 2006).Of course, we have to define a set of suitable features.We used the following: dependent have identical values?Is this the left/rightmost dependent for the head?Is this the first dependent to the left/right of the head?Various conjunctions of these were included based on performance on held-out data.Note that many of these features are beyond the scope of the edge based factorizations of the unlabeled parser.Thus a joint model of parsing and labeling could not easily include them without some form of re-ranking or approximate parameter estimation.We trained models for all 13 languages provided by the CoNLL organizers (Buchholz et al., 2006).Based on performance from a held-out section of the training data, we used non-projective parsing algorithms for Czech, Danish, Dutch, German, Japanese, Portuguese and Slovene, and projective parsing algorithms for Arabic, Bulgarian, Chinese, Spanish, Swedish and Turkish.Furthermore, for Arabic and Spanish, we used lemmas instead of inflected word forms, again based on performance on held-out data1.Results on the test set are given in Table 1.Performance is measured through unlabeled accuracy, which is the percentage of words that modify the correct head in the dependency graph, and labeled accuracy, which is the percentage of words that modify the correct head and label the dependency edge correctly in the graph.These results show that the discriminative spanning tree parsing framework (McDonald et al., 2005b; McDonald and Pereira, 2006) is easily adapted across all these languages.Only Arabic, Turkish and Slovene have parsing accuracies significantly below 80%, and these languages have relatively small training sets and/or are highly inflected with little to no word order constraints.Furthermore, these results show that a twostage system can achieve a relatively high performance.In fact, for every language our models perform significantly higher than the average performance for all the systems reported in Buchholz et al. (2006).For the remainder of the paper we provide a general error analysis across a wide set of languages plus a detailed error analysis of Spanish and Arabic.Our system has several components, including the ability to produce non-projective edges, sequential Japanese, Portuguese, Slovene, Spanish, Swedish and Turkish.N/P: Allow non-projective/Force projective, S/A: Sequential labeling/Atomic labeling, M/B: Include morphology features/No morphology features. assignment of edge labels instead of individual assignment, and a rich feature set that incorporates morphological properties when available.The benefit of each of these is shown in Table 2.These results report the average labeled and unlabeled precision for the 10 languages with the smallest training sets.This allowed us to train new models quickly.Table 2 shows that each component of our system does not change performance significantly (rows 24 versus row 1).However, if we only allow projective parses, do not use morphological features and label edges with a simple atomic classifier, the overall drop in performance becomes significant (row 5 versus row 1).Allowing non-projective parses helped with freer word order languages like Dutch (78.8%/74.7% to 83.6%/79.2%, unlabeled/labeled accuracy).Including rich morphology features naturally helped with highly inflected languages, in particular Spanish, Arabic, Turkish, Slovene and to a lesser extent Dutch and Portuguese.Derived morphological features improved accuracy in all these languages by 1-3% absolute.Sequential classification of labels had very little effect on overall labeled accuracy (79.4% to 79.7%)2.The major contribution was in helping to distinguish subjects, objects and other dependents of main verbs, which is the most common labeling error.This is not surprising since these edge labels typically are the most correlated (i.e., if you already know which noun dependent is the subject, then it should be easy to find the object).For instance, sequential labeling improves the labeling of 2This difference was much larger for experiments in which gold standard unlabeled dependencies are used. objects from 81.7%/75.6% to 84.2%/81.3% (labeled precision/recall) and the labeling of subjects from 86.8%/88.2% to 90.5%/90.4% for Swedish.Similar improvements are common across all languages, though not as dramatic.Even with this improvement, the labeling of verb dependents remains the highest source of error.Although overall unlabeled accuracy is 86%, most verbs and some conjunctions attach to their head words with much lower accuracy: 69% for main verbs, 75% for the verb ser, and 65% for coordinating conjunctions.These words form 17% of the test corpus.Other high-frequency word classes with relatively low attachment accuracy are prepositions (80%), adverbs (82%) and subordinating conjunctions (80%), for a total of another 23% of the test corpus.These weaknesses are not surprising, since these decisions encode the more global aspects of sentence structure: arrangement of clauses and adverbial dependents in multi-clause sentences, and prepositional phrase attachment.In a preliminary test of this hypothesis, we looked at all of the sentences from a development set in which a main verb is incorrectly attached.We confirmed that the main clause is often misidentified in multi-clause sentences, or that one of several conjoined clauses is incorrectly taken as the main clause.To test this further, we added features to count the number of commas and conjunctions between a dependent verb and its candidate head.Unlabeled accuracy for all verbs increases from 71% to 73% and for all conjunctions from 71% to 74%.Unfortunately, accuracy for other word types decreases somewhat, resulting in no significant net accuracy change.Nevertheless, this very preliminary experiment suggests that wider-range features may be useful in improving the recognition of overall sentence structure.Another common verb attachment error is a switch between head and dependent verb in phrasal verb forms like dejan intrigar or qiero decir, possibly because the non-finite verb in these cases is often a main verb in training sentences.We need to look more carefully at verb features that may be useful here, in particular features that distinguish finite and non-finite forms.In doing this preliminary analysis, we noticed some inconsistencies in the reference dependency structures.For example, in the test sentence Lo que decia Mae West de si misma podriamos decirlo tambi´en los hombres:..., decia’s head is given as decirlo, although the main verbs of relative clauses are normally dependent on what the relative modifies, in this case the article Lo.A quick look at unlabeled attachment accuracies indicate that errors in Arabic parsing are the most common across all languages: prepositions (62%), conjunctions (69%) and to a lesser extent verbs (73%).Similarly, for labeled accuracy, the hardest edges to label are for dependents of verbs, i.e., subjects, objects and adverbials.Note the difference in error between the unlabeled parser and the edge labeler: the former makes mistakes on edges into prepositions, conjunctions and verbs, and the latter makes mistakes on edges into nouns (subject/objects).Each stage by itself is relatively accurate (unlabeled accuracy is 79% and labeling accuracy3 is also 79%), but since there is very little overlap in the kinds of errors each makes, overall labeled accuracy drops to 67%.This drop is not nearly as significant for other languages.Another source of potential error is that the average sentence length of Arabic is much higher than other languages (around 37 words/sentence).However, if we only look at performance for sentences of length less than 30, the labeled accuracy is still only 71%.The fact that Arabic has only 1500 training instances might also be problematic.For example if we train on 200, 400, 800 and the full training set, labeled accuracies are 54%, 60%, 62% and 67%.Clearly adding more data is improving performance.However, when compared to the performance of Slovene (1500 training instances) and Spanish (3300 instances), it appears that Arabic parsing is lagging.We have presented results showing that the spanning tree dependency parsing framework of McDonald et al. (McDonald et al., 2005b; McDonald and Pereira, 2006) generalizes well to languages other than English.In the future we plan to extend these models in two ways.First, we plan on examining the performance difference between two-staged dependency parsing (as presented here) and joint parsing plus labeling.It is our hypothesis that for languages with fine-grained label sets, joint parsing and labeling will improve performance.Second, we plan on integrating any available morphological features in a more principled manner.The current system simply includes all morphological bi-gram features.It is our hope that a better morphological feature set will help with both unlabeled parsing and labeling for highly inflected languages.
Manual and Automatic Evaluation of Machine Translation between European LanguagesAdequacy (rank) Fluency (rank) BLEU (rank) upc-jmc (1-7) (1-8) (1-6) lcc (1-6) (1-7) (1-4) utd (1-7) (1-6) (2-7) upc-mr (1-8) (1-6) (1-7) nrc (1-7) (2-6) (8) ntt (1-8) (2-8) (1-7) cmu (3-7) (4-8) (2-7) rali (5-8) (3-9) (3-7) systran (9) (8-9) (10) upv (10) (10) (9) Spanish-English (In Domain) Adequacy (rank) Fluency (rank) BLEU (rank) upc-jmc (1-7) (1-6) (1-5) ntt (1-7) (1-8) (1-5) lcc (1-8) (2-8) (1-4) utd (1-8) (2-7) (1-5) nrc (2-8) (1-9) (6) upc-mr (1-8) (1-6) (7) uedin-birch (1-8) (2-10) (8) rali (3-9) (3-9) (2-5) upc-jg (7-9) (6-9) (9) upv (10) (9-10) (10) German-English (In Domain) Adequacy (rank) Fluency (rank) BLEU (rank) uedin-phi (1-2) (1) (1) lcc (2-7) (2-7) (2) nrc (2-7) (2-6) (5-7) utd (3-7) (2-8) (3-4) ntt (2-9) (2-8) (3-4) upc-mr (3-9) (6-9) (8) rali (4-9) (3-9) (5-7) upc-jmc (2-9) (3-9) (5-7) systran (3-9) (3-9) (10) upv (10) (10) (9) Figure 7: Evaluation of translation to English on in-domain test data 112 English-French (In Domain) Adequacy (rank) Fluency (rank) BLEU (rank) nrc (1-5) (1-5) (1-6) upc-mr (1-4) (1-5) (1-6) upc-jmc (1-6) (1-6) (1-5) systran (2-7) (1-6) (7) utd (3-7) (3-7) (3-6) rali (1-7) (2-7) (1-6) ntt (4-7) (4-7) (1-5) English-Spanish (In Domain) Adequacy (rank) Fluency (rank) BLEU (rank) ms (1-5) (1-7) (7-8) upc-mr (1-4) (1-5) (1-4) utd (1-5) (1-6) (1-4) nrc (2-7) (1-6) (5-6) ntt (3-7) (1-6) (1-4) upc-jmc (2-7) (2-7) (1-4) rali (5-8) (6-8) (5-6) uedin-birch (6-9) (6-10) (7-8) upc-jg (9) (8-10) (9) upv (9-10) (8-10) (10) English-German (In Domain) Adequacy (rank) Fluency (rank) BLEU (rank) upc-mr (1-3) (1-5) (3-5) ntt (1-5) (2-6) (1-3) upc-jmc (1-5) (1-4) (1-3) nrc (2-4) (1-5) (4-5) rali (3-6) (2-6) (1-4) systran (5-6) (3-6) (7) upv (7) (7) (6) Figure 8: Evaluation of translation from English on in-domain test data 113 French-English (Out of Domain) Adequacy (rank) Fluency (rank) BLEU (rank) upc-jmc (1-5) (1-8) (1-4) cmu (1-8) (1-9) (4-7) systran (1-8) (1-7) (9) lcc (1-9) (1-9) (1-5) upc-mr (2-8) (1-7) (1-3) utd (1-9) (1-8) (3-7) ntt (3-9) (1-9) (3-7) nrc (3-8) (3-9) (3-7) rali (4-9) (5-9) (8) upv (10) (10) (10) Spanish-English (Out of Domain) Adequacy (rank) Fluency (rank) BLEU (rank) upc-jmc (1-2) (1-6) (1-3) uedin-birch (1-7) (1-6) (5-8) nrc (2-8) (1-8) (5-7) ntt (2-7) (2-6) (3-4) upc-mr (2-8) (1-7) (5-8) lcc (4-9) (3-7) (1-4) utd (2-9) (2-8) (1-3) upc-jg (4-9) (7-9) (9) rali (4-9) (6-9) (6-8) upv (10) (10) (10) German-English (Out of Domain) Adequacy (rank) Fluency (rank) BLEU (rank) systran (1-4) (1-4) (7-9) uedin-phi (1-6) (1-7) (1) lcc (1-6) (1-7) (2-3) utd (2-7) (2-6) (4-6) ntt (1-9) (1-7) (3-5) nrc (3-8) (2-8) (7-8) upc-mr (4-8) (6-8) (4-6) upc-jmc (4-8) (3-9) (2-5) rali (8-9) (8-9) (8-9) upv (10) (10) (10) Figure 9: Evaluation of translation to English on out-of-domain test data 114 English-French (Out of Domain) Adequacy (rank) Fluency (rank) BLEU (rank) systran (1) (1) (1) upc-jmc (2-5) (2-4) (2-6) upc-mr (2-4) (2-4) (2-6) utd (2-6) (2-6) (7) rali (4-7) (5-7) (2-6) nrc (4-7) (4-7) (2-5) ntt (4-7) (4-7) (3-6) English-Spanish (Out of Domain) Adequacy (rank) Fluency (rank) BLEU (rank) upc-mr (1-3) (1-6) (1-2) ms (1-7) (1-8) (6-7) utd (2-6) (1-7) (3-5) nrc (1-6) (2-7) (3-5) upc-jmc (2-7) (1-6) (3-5) ntt (2-7) (1-7) (1-2) rali (6-8) (4-8) (6-8) uedin-birch (6-10) (5-9) (7-8) upc-jg (8-9) (9-10) (9) upv (9) (8-9) (10) English-German (Out of Domain) Adequacy (rank) Fluency (rank) BLEU (rank) systran (1) (1-2) (1-6) upc-mr (2-3) (1-3) (1-5) upc-jmc (2-3) (3-6) (1-6) rali (4-6) (4-6) (1-6) nrc (4-6) (2-6) (2-6) ntt (4-6) (3-5) (1-6) upv (7) (7) (7) Figure 10: Evaluation of translation from English on out-of-domain test data 115 French-English In domain Out of Domain Adequacy Adequacy 0.3 0.3 • 0.2 0.2 0.1 0.1 -0.0 -0.0 -0.1 -0.1 -0.2 -0.2 -0.3 -0.3 -0.4 -0.4 -0.5 -0.5 -0.6 -0.6 -0.7 -0.7 •upv -0.8 -0.8 21 22 23 24 25 26 27 28 29 30 31 15 16 17 18 19 20 21 22 •upv •systran upcntt • rali upc-jmc • cc Fluency 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 •upv -0.5 •systran •upv upc -jmc • Fluency 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 • • • td t cc upc- • rali 21 22 23 24 25 26 27 28 29 30 31 15 16 17 18 19 20 21 22 Figure 11: Correlation between manual and automatic scores for French-English 116 Spanish-English Figure 12: Correlation between manual and automatic scores for Spanish-English -0.3 -0.4 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 -0.5 •upv -0.4 •upv -0.3 In Domain •upc-jg Adequacy 0.3 0.2 0.1 -0.0 -0.1 -0.2 Out of Domain •upc-jmc •nrc •ntt Adequacy upc-jmc • • •lcc • rali • •rali -0.7 -0.5 -0.6 •upv 23 24 25 26 27 28 29 30 31 32 19 20 21 22 23 24 25 26 27 28 • •rali Fluency 0.2 0.1 -0.0 -0.1 -0.2 ntt • upc-mr •lcc •utd •upc-jg •rali Fluency 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 •upc-jmc • uedin-birch -0.5 -0.5 •upv 23 24 25 26 27 28 29 30 31 32 19 20 21 22 23 24 25 26 27 28 117 In Domain Out of Domain Adequacy Adequacy German-English 15 16 17 18 19 20 21 22 23 24 25 26 27 0.4 0.3 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 lcc • upc-jmc •systran •upv Fluency •ula •upc-mr •lcc 15 16 17 18 19 20 21 22 23 24 25 26 27 0.4 0.3 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 •systran •upv •uedin-phi -jmc •rali •systran -0.3 -0.4 -0.5 -0.6 •upv 12 13 14 15 16 17 18 19 20 0.4 0.3 0.2 0.1 -0.0 -0.1 -0.2 Fluency uedin-phi • • •utd •upc-jmc •upc-mr 0.4 •rali -0.3 -0.4 -0.5 •upv 12 13 14 15 16 17 18 19 20 0.3 0.2 0.1 -0.0 -0.1 -0.2 English-French In Domain Out of Domain Adequacy Adequacy .0.2 0.1 0.0 -0.1 25 26 27 28 29 30 31 32 -0.2 -0.3 •systran • ntt 0.5 0.4 0.3 0.2 0.1 0.0 -0.1 -0.2 -0.3 20 21 22 23 24 25 26 Fluency Fluency •systran •nrc rali 25 26 27 28 29 30 31 32 0.2 0.1 0.0 -0.1 -0.2 -0.3 cme p � 20 21 22 23 24 25 26 0.5 0.4 0.3 0.2 0.1 0.0 -0.1 -0.2 -0.3 Figure 14: Correlation between manual and automatic scores for English-French 119 In Domain Out of Domain •upv Adequacy -0.9 0.3 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 -0.7 -0.8 •upv 23 24 25 26 27 28 29 30 31 32 •upc-mr •utd •upc-jmc •uedin-birch •ntt •rali •uedin-birch 16 17 18 19 20 21 22 23 24 25 26 27 Adequacy •upc-mr 0.4 0.3 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 -0.7 -0.8 -0.9 -1.0 -1.1 English-Spanish Fluency •ntt •nrc •rali •uedin-birch -0.2 -0.3 -0.5 •upv 16 17 18 19 20 21 22 23 24 25 26 27 -0.4 nr • rali Fluency -0.4 •upc-mr utd •upc-jmc -0.5 -0.6 •upv 23 24 25 26 27 28 29 30 31 32 0.2 0.1 -0.0 -0.1 -0.2 -0.3 0.3 0.2 0.1 -0.0 -0.1 -0.6 -0.7 Figure 15: Correlation between manual and automatic scores for English-Spanish 120 English-German In Domain Out of Domain Adequacy Adequacy 0.3 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 -0.7 -0.8 •upv -0.2 -0.3 -0.4 -0.5 -0.6 -0.7 -0.8 -0.9 •upv 0.5 0.4 •systran •upc-mr • •rali 0.3 •ntt 0.2 0.1 -0.0 -0.1 •systran •upc-mr -0.9 9 10 11 12 13 14 15 16 17 18 19 6 7 8 9 10 11 Fluency 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 •upv -0.5 •upv •systran •upc-mr • Fluency 0.4 0.3 0.2 0.1 -0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 •systran •nttwas done by the participants.This revealed interesting clues about the properties of automatic and manual scoring.• We evaluated translation from English, in addition to into English.English was again paired with German, French, and Spanish.We dropped, however, one of the languages, Finnish, partly to keep the number of tracks manageable, partly because we assumed that it would be hard to find enough Finnish speakers for the manual evaluation.The evaluation framework for the shared task is similar to the one used in last year’s shared task.Training and testing is based on the Europarl corpus.Figure 1 provides some statistics about this corpus.To lower the barrier of entrance to the competition, we provided a complete baseline MT system, along with data resources.To summarize, we provided: The performance of the baseline system is similar to the best submissions in last year’s shared task.We are currently working on a complete open source implementation of a training and decoding system, which should become available over the summer. pus, from which also the in-domain test set is taken.There is twice as much language modelling data, since training data for the machine translation system is filtered against sentences of length larger than 40 words.Out-of-domain test data is from the Project Syndicate web site, a compendium of political commentary.The test data was again drawn from a segment of the Europarl corpus from the fourth quarter of 2000, which is excluded from the training data.Participants were also provided with two sets of 2,000 sentences of parallel text to be used for system development and tuning.In addition to the Europarl test set, we also collected 29 editorials from the Project Syndicate website2, which are published in all the four languages of the shared task.We aligned the texts at a sentence level across all four languages, resulting in 1064 sentence per language.For statistics on this test set, refer to Figure 1.The out-of-domain test set differs from the Europarl data in various ways.The text type are editorials instead of speech transcripts.The domain is general politics, economics and science.However, it is also mostly political content (even if not focused on the internal workings of the European Union) and opinion.We received submissions from 14 groups from 11 institutions, as listed in Figure 2.Most of these groups follow a phrase-based statistical approach to machine translation.Microsoft’s approach uses dependency trees, others use hierarchical phrase models.Systran submitted their commercial rule-based system that was not tuned to the Europarl corpus.About half of the participants of last year’s shared task participated again.The other half was replaced by other participants, so we ended up with roughly the same number.Compared to last year’s shared task, the participants represent more long-term research efforts.This may be the sign of a maturing research environment.While building a machine translation system is a serious undertaking, in future we hope to attract more newcomers to the field by keeping the barrier of entry as low as possible.For more on the participating systems, please refer to the respective system description in the proceedings of the workshop.For the automatic evaluation, we used BLEU, since it is the most established metric in the field.The BLEU metric, as all currently proposed automatic metrics, is occasionally suspected to be biased towards statistical systems, especially the phrase-based systems currently in use.It rewards matches of n-gram sequences, but measures only at most indirectly overall grammatical coherence.The BLEU score has been shown to correlate well with human judgement, when statistical machine translation systems are compared (Doddington, 2002; Przybocki, 2004; Li, 2005).However, a recent study (Callison-Burch et al., 2006), pointed out that this correlation may not always be strong.They demonstrated this with the comparison of statistical systems against (a) manually post-edited MT output, and (b) a rule-based commercial system.The development of automatic scoring methods is an open field of research.It was our hope that this competition, which included the manual and automatic evaluation of statistical systems and one rulebased commercial system, will give further insight into the relation between automatic and manual evaluation.At the very least, we are creating a data resource (the manual annotations) that may the basis of future research in evaluation metrics.We computed BLEU scores for each submission with a single reference translation.For each sentence, we counted how many n-grams in the system output also occurred in the reference translation.By taking the ratio of matching n-grams to the total number of n-grams in the system output, we obtain the precision pn for each n-gram order n. These values for n-gram precision are combined into a BLEU score: The formula for the BLEU metric also includes a brevity penalty for too short output, which is based on the total number of words in the system output c and in the reference r. BLEU is sensitive to tokenization.Because of this, we retokenized and lowercased submitted output with our own tokenizer, which was also used to prepare the training and test data.Confidence Interval: Since BLEU scores are not computed on the sentence level, traditional methods to compute statistical significance and confidence intervals do not apply.Hence, we use the bootstrap resampling method described by Koehn (2004).Following this method, we repeatedly — say, 1000 times — sample sets of sentences from the output of each system, measure their BLEU score, and use these 1000 BLEU scores as basis for estimating a confidence interval.When dropping the top and bottom 2.5% the remaining BLEU scores define the range of the confidence interval.Pairwise comparison: We can use the same method to assess the statistical significance of one system outperforming another.If two systems’ scores are close, this may simply be a random effect in the test data.To check for this, we do pairwise bootstrap resampling: Again, we repeatedly sample sets of sentences, this time from both systems, and compare their BLEU scores on these sets.If one system is better in 95% of the sample sets, we conclude that its higher BLEU score is statistically significantly better.The bootstrap method has been critized by Riezler and Maxwell (2005) and Collins et al. (2005), as being too optimistic in deciding for statistical significant difference between systems.We are therefore applying a different method, which has been used at the 2005 DARPA/NIST evaluation.We divide up each test set into blocks of 20 sentences (100 blocks for the in-domain test set, 53 blocks for the out-of-domain test set), check for each block, if one system has a higher BLEU score than the other, and then use the sign test.The sign test checks, how likely a sample of better and worse BLEU scores would have been generated by two systems of equal performance.Let say, if we find one system doing better on 20 of the blocks, and worse on 80 of the blocks, is it significantly worse?We check, how likely only up to k = 20 better scores out of n = 100 would have been generated by two equal systems, using the binomial distribution: If p(0..k; n, p) < 0.05, or p(0..k; n, p) > 0.95 then we have a statistically significant difference between the systems.While automatic measures are an invaluable tool for the day-to-day development of machine translation systems, they are only a imperfect substitute for human assessment of translation quality, or as the acronym BLEU puts it, a bilingual evaluation understudy.Many human evaluation metrics have been proposed.Also, the argument has been made that machine translation performance should be evaluated via task-based evaluation metrics, i.e. how much it assists performing a useful task, such as supporting human translators or aiding the analysis of texts.The main disadvantage of manual evaluation is that it is time-consuming and thus too expensive to do frequently.In this shared task, we were also confronted with this problem, and since we had no funding for paying human judgements, we asked participants in the evaluation to share the burden.Participants and other volunteers contributed about 180 hours of labor in the manual evaluation.We asked participants to each judge 200–300 sentences in terms of fluency and adequacy, the most commonly used manual evaluation metrics.We settled on contrastive evaluations of 5 system outputs for a single test sentence.See Figure 3 for a screenshot of the evaluation tool.Presenting the output of several system allows the human judge to make more informed judgements, contrasting the quality of the different systems.The judgements tend to be done more in form of a ranking of the different systems.We assumed that such a contrastive assessment would be beneficial for an evaluation that essentially pits different systems against each other.While we had up to 11 submissions for a translation direction, we did decide against presenting all 11 system outputs to the human judge.Our initial experimentation with the evaluation tool showed that this is often too overwhelming.Making the ten judgements (2 types for 5 systems) takes on average 2 minutes.Typically, judges initially spent about 3 minutes per sentence, but then accelerate with experience.Judges where excluded from assessing the quality of MT systems that were submitted by their institution.Sentences and systems were randomly selected and randomly shuffled for presentation.We collected around 300–400 judgements per judgement type (adequacy or fluency), per system, per language pair.This is less than the 694 judgements 2004 DARPA/NIST evaluation, or the 532 judgements in the 2005 DARPA/NIST evaluation.This decreases the statistical significance of our results compared to those studies.The number of judgements is additionally fragmented by our breakup of sentences into in-domain and out-of-domain.The human judges were presented with the following definition of adequacy and fluency, but no additional instructions:Judges varied in the average score they handed out.The average fluency judgement per judge ranged from 2.33 to 3.67, the average adequacy judgement ranged from 2.56 to 4.13.Since different judges judged different systems (recall that judges were excluded to judge system output from their own institution), we normalized the scores.The normalized judgement per judge is the raw judgement plus (3 minus average raw judgement for this judge).In words, the judgements are normalized, so that the average normalized judgement per judge is 3.Another way to view the judgements is that they are less quality judgements of machine translation systems per se, but rankings of machine translation systems.In fact, it is very difficult to maintain consistent standards, on what (say) an adequacy judgement of 3 means even for a specific language pair.The way judgements are collected, human judges tend to use the scores to rank systems against each other.If one system is perfect, another has slight flaws and the third more flaws, a judge is inclined to hand out judgements of 5, 4, and 3.On the other hand, when all systems produce muddled output, but one is better, and one is worse, but not completely wrong, a judge is inclined to hand out judgements of 4, 3, and 2.The judgement of 4 in the first case will go to a vastly better system output than in the second case.We therefore also normalized judgements on a per-sentence basis.The normalized judgement per sentence is the raw judgement plus (0 minus average raw judgement for this judge on this sentence).Systems that generally do better than others will receive a positive average normalizedjudgement per sentence.Systems that generally do worse than others will receive a negative one.One may argue with these efforts on normalization, and ultimately their value should be assessed by assessing their impact on inter-annotator agreement.Given the limited number of judgements we received, we did not try to evaluate this.Confidence Interval: To estimate confidence intervals for the average mean scores for the systems, we use standard significance testing.Given a set of n sentences, we can compute the sample mean x� and sample variance s2 of the individual sentence judgements xi: The extend of the confidence interval [x−d, x+df can be computed by d = 1.96 ·�n (6) Pairwise Comparison: As for the automatic evaluation metric, we want to be able to rank different systems against each other, for which we need assessments of statistical significance on the differences between a pair of systems.Unfortunately, we have much less data to work with than with the automatic scores.The way we cant distinction between system performance.Automatic scores are computed on a larger tested than manual scores (3064 sentences vs. 300–400 sentences). collected manual judgements, we do not necessarily have the same sentence judged for both systems (judges evaluate 5 systems out of the 8–10 participating systems).Still, for about good number of sentences, we do have this direct comparison, which allows us to apply the sign test, as described in Section 2.2.The results of the manual and automatic evaluation of the participating system translations is detailed in the figures at the end of this paper.The scores and confidence intervals are detailed first in the Figures 7–10 in table form (including ranks), and then in graphical form in Figures 11–16.In the graphs, system scores are indicated by a point, the confidence intervals by shaded areas around the point.In all figures, we present the per-sentence normalized judgements.The normalization on a per-judge basis gave very similar ranking, only slightly less consistent with the ranking from the pairwise comparisons.The confidence intervals are computed by bootstrap resampling for BLEU, and by standard significance testing for the manual scores, as described earlier in the paper.Pairwise comparison is done using the sign test.Often, two systems can not be distinguished with a confidence of over 95%, so there are ranked the same.This actually happens quite frequently (more below), so that the rankings are broad estimates.For instance: if 10 systems participate, and one system does better than 3 others, worse then 2, and is not significant different from the remaining 4, its rank is in the interval 3–7.At first glance, we quickly recognize that many systems are scored very similar, both in terms of manual judgement and BLEU.There may be occasionally a system clearly at the top or at the bottom, but most systems are so close that it is hard to distinguish them.In Figure 4, we displayed the number of system comparisons, for which we concluded statistical significance.For the automatic scoring method BLEU, we can distinguish three quarters of the systems.While the Bootstrap method is slightly more sensitive, it is very much in line with the sign test on text blocks.For the manual scoring, we can distinguish only half of the systems, both in terms of fluency and adequacy.More judgements would have enabled us to make better distinctions, but it is not clear what the upper limit is.We can check, what the consequences of less manual annotation of results would have been: With half the number of manual judgements, we can distinguish about 40% of the systems, 10% less.The test set included 2000 sentences from the Europarl corpus, but also 1064 sentences out-ofdomain test data.Since the inclusion of out-ofdomain test data was a very late decision, the participants were not informed of this.So, this was a surprise element due to practical reasons, not malice.All systems (except for Systran, which was not tuned to Europarl) did considerably worse on outof-domain training data.This is demonstrated by average scores over all systems, in terms of BLEU, fluency and adequacy, as displayed in Figure 5.The manual scores are averages over the raw unnormalized scores.It is well know that language pairs such as EnglishGerman pose more challenges to machine translation systems than language pairs such as FrenchEnglish.Different sentence structure and rich target language morphology are two reasons for this.Again, we can compute average scores for all systems for the different language pairs (Figure 6).The differences in difficulty are better reflected in the BLEU scores than in the raw un-normalized manual judgements.The easiest language pair according to BLEU (English-French: 28.33) received worse manual scores than the hardest (English-German: 14.01).This is because different judges focused on different language pairs.Hence, the different averages of manual scores for the different language pairs reflect the behaviour of the judges, not the quality of the systems on different language pairs.Given the closeness of most systems and the wide over-lapping confidence intervals it is hard to make strong statements about the correlation between human judgements and automatic scoring methods such as BLEU.We confirm the finding by Callison-Burch et al. (2006) that the rule-based system of Systran is not adequately appreciated by BLEU.In-domain Systran scores on this metric are lower than all statistical systems, even the ones that have much worse human scores.Surprisingly, this effect is much less obvious for out-of-domain test data.For instance, for out-ofdomain English-French, Systran has the best BLEU and manual scores.Our suspicion is that BLEU is very sensitive to jargon, to selecting exactly the right words, and not synonyms that human judges may appreciate as equally good.This is can not be the only explanation, since the discrepancy still holds, for instance, for out-of-domain French-English, where Systran receives among the best adequacy and fluency scores, but a worse BLEU score than all but one statistical system.This data set of manual judgements should provide a fruitful resource for research on better automatic scoring methods.So, who won the competition?The best answer to this is: many research labs have very competitive systems whose performance is hard to tell apart.This is not completely surprising, since all systems use very similar technology.For some language pairs (such as GermanEnglish) system performance is more divergent than for others (such as English-French), at least as measured by BLEU.The statistical systems seem to still lag behind the commercial rule-based competition when translating into morphological rich languages, as demonstrated by the results for English-German and English-French.The predominate focus of building systems that translate into English has ignored so far the difficult issues of generating rich morphology which may not be determined solely by local context.This is the first time that we organized a large-scale manual evaluation.While we used the standard metrics of the community, the we way presented translations and prompted for assessment differed from other evaluation campaigns.For instance, in the recent IWSLT evaluation, first fluency annotations were solicited (while withholding the source sentence), and then adequacy annotations.Almost all annotators reported difficulties in maintaining a consistent standard for fluency and adequacy judgements, but nevertheless most did not explicitly move towards a ranking-based evaluation.Almost all annotators expressed their preference to move to a ranking-based evaluation in the future.A few pointed out that adequacy should be broken up into two criteria: (a) are all source words covered?(b) does the translation have the same meaning, including connotations?Annotators suggested that long sentences are almost impossible to judge.Since all long sentence translation are somewhat muddled, even a contrastive evaluation between systems was difficult.A few annotators suggested to break up long sentences into clauses and evaluate these separately.Not every annotator was fluent in both the source and the target language.While it is essential to be fluent in the target language, it is not strictly necessary to know the source language, if a reference translation was given.However, ince we extracted the test corpus automatically from web sources, the reference translation was not always accurate — due to sentence alignment errors, or because translators did not adhere to a strict sentence-by-sentence translation (say, using pronouns when referring to entities mentioned in the previous sentence).Lack of correct reference translations was pointed out as a short-coming of our evaluation.One annotator suggested that this was the case for as much as 10% of our test sentences.Annotators argued for the importance of having correct and even multiple references.It was also proposed to allow annotators to skip sentences that they are unable to judge.We carried out an extensive manual and automatic evaluation of machine translation performance on European language pairs.While many systems had similar performance, the results offer interesting insights, especially about the relative performance of statistical and rule-based systems.Due to many similarly performing systems, we are not able to draw strong conclusions on the question of correlation of manual and automatic evaluation metrics.The bias of automatic methods in favor of statistical systems seems to be less pronounced on out-of-domain test data.The manual evaluation of scoring translation on a graded scale from 1–5 seems to be very hard to perform.Replacing this with an ranked evaluation seems to be more suitable.Human judges also pointed out difficulties with the evaluation of long sentences.This work was supported in part under the GALE program of the Defense Advanced Research Projects Agency, Contract No.HR0011-06-C-0022.
KenLM: Faster and Smaller Language Model QueriesWe present KenLM, a library that implements two data structures for efficient language model queries, reducing both time and costs.The structure uses linear probing hash tables and is designed for speed.Compared with the widely- SRILM, our is 2.4 times as fast while using 57% of the mem- The structure is a trie with bit-level packing, sorted records, interpolation search, and optional quantization aimed lower memory consumption. simultaneously uses less memory than the smallest lossless baseline and less CPU than the baseline.Our code is thread-safe, and integrated into the Moses, cdec, and Joshua translation systems.This paper describes the several performance techniques used and presents benchmarks against alternative implementations.Language models are widely applied in natural language processing, and applications such as machine translation make very frequent queries.This paper presents methods to query N-gram language models, minimizing time and space costs.Queries take the form p(wn|wn−1 1 ) where wn1 is an n-gram.Backoff-smoothed models estimate this probability based on the observed entry with longest matching history wnf , returning where the probability p(wn|wn−1 f ) and backoff penalties b(wn−1 i ) are given by an already-estimated model.The problem is to store these two values for a large and sparse set of n-grams in a way that makes queries efficient.Many packages perform language model queries.Throughout this paper we compare with several packages: SRILM 1.5.12 (Stolcke, 2002) is a popular toolkit based on tries used in several decoders.IRSTLM 5.60.02 (Federico et al., 2008) is a sorted trie implementation designed for lower memory consumption.MITLM 0.4 (Hsu and Glass, 2008) is mostly designed for accurate model estimation, but can also compute perplexity.RandLM 0.2 (Talbot and Osborne, 2007) stores large-scale models in less memory using randomized data structures.BerkeleyLM revision 152 (Pauls and Klein, 2011) implements tries based on hash tables and sorted arrays in Java with lossy quantization.Sheffield Guthrie and Hepple (2010) explore several randomized compression techniques, but did not release code.TPT Germann et al. (2009) describe tries with better locality properties, but did not release code.These packages are further described in Section 3.We substantially outperform all of them on query speed and offer lower memory consumption than lossless alternatives.Performance improvements transfer to the Moses (Koehn et al., 2007), cdec (Dyer et al., 2010), and Joshua (Li et al., 2009) translation systems where our code has been integrated.Our open-source (LGPL) implementation is also available for download as a standalone package with minimal (POSIX and g++) dependencies.We implement two data structures: PROBING, designed for speed, and TRIE, optimized for memory.The set of n-grams appearing in a model is sparse, and we want to efficiently find their associated probabilities and backoff penalties.An important subproblem of language model storage is therefore sparse mapping: storing values for sparse keys using little memory then retrieving values given keys using little time.We use two common techniques, hash tables and sorted arrays, describing each before the model that uses the technique.Hash tables are a common sparse mapping technique used by SRILM’s default and BerkeleyLM’s hashed variant.Keys to the table are hashed, using for example Austin Appleby’s MurmurHash2, to integers evenly distributed over a large range.This range is collapsed to a number of buckets, typically by taking the hash modulo the number of buckets.Entries landing in the same bucket are said to collide.Several methods exist to handle collisions; we use linear probing because it has less memory overhead when entries are small.Linear probing places at most one entry in each bucket.When a collision occurs, linear probing places the entry to be inserted in the next (higher index) empty bucket, wrapping around as necessary.Therefore, a populated probing hash table consists of an array of buckets that contain either one entry or are empty.Non-empty buckets contain an entry belonging to them or to a preceding bucket where a conflict occurred.Searching a probing hash table consists of hashing the key, indexing the corresponding bucket, and scanning buckets until a matching key is found or an empty bucket is encountered, in which case the key does not exist in the table.Linear probing hash tables must have more buckets than entries, or else an empty bucket will never be found.The ratio of buckets to entries is controlled by space multiplier m > 1.As the name implies, space is O(m) and linear in the number of entries.The fraction of buckets that are empty is m−1 m , so average lookup time is O( m 1) and, crucially, constant in the number of entries.When keys are longer than 64 bits, we conserve space by replacing the keys with their 64-bit hashes.With a good hash function, collisions of the full 64bit hash are exceedingly rare: one in 266 billion queries for our baseline model will falsely find a key not present.Collisions between two keys in the table can be identified at model building time.Further, the special hash 0 suffices to flag empty buckets.The PROBING data structure is a rather straightforward application of these hash tables to store Ngram language models.Unigram lookup is dense so we use an array of probability and backoff values.For 2 < n < N, we use a hash table mapping from the n-gram to the probability and backoff3.Vocabulary lookup is a hash table mapping from word to vocabulary index.In all cases, the key is collapsed to its 64-bit hash.Given counts cn1 where e.g. c1 is the vocabulary size, total memory consumption, in bits, is Our PROBING data structure places all n-grams of the same order into a single giant hash table.This differs from other implementations (Stolcke, 2002; Pauls and Klein, 2011) that use hash tables as nodes in a trie, as explained in the next section.Our implementation permits jumping to any n-gram of any length with a single lookup; this appears to be unique among language model implementations.Sorted arrays store key-value pairs in an array sorted by key, incurring no space overhead.SRILM’s compact variant, IRSTLM, MITLM, and BerkeleyLM’s sorted variant are all based on this technique.Given a sorted array A, these other packages use binary search to find keys in O(log |A|) time.We reduce this to O(log log |A|) time by evenly distributing keys over their range then using interpolation search4 (Perl et al., 1978).Interpolation search formalizes the notion that one opens a dictionary near the end to find the word “zebra.” Initially, the algorithm knows the array begins at b +— 0 and ends at e +— |A|−1.Given a key k, it estimates the position If the estimate is exact (A[pivot] = k), then the algorithm terminates succesfully.If e < b then the key is not found.Otherwise, the scope of the search problem shrinks recursively: if A[pivot] < k then this becomes the new lower bound: l +— pivot; if A[pivot] > k then u +— pivot.Interpolation search is therefore a form of binary search with better estimates informed by the uniform key distribution.If the key distribution’s range is also known (i.e. vocabulary identifiers range from 0 to the number of words), then interpolation search can use this information instead of reading A[0] and A[|A |− 1] to estimate pivots; this optimization alone led to a 24% speed improvement.The improvement is due to the cost of bit-level reads and avoiding reads that may fall in different virtual memory pages.Vocabulary lookup is a sorted array of 64-bit word hashes.The index in this array is the vocabulary identifier.This has the effect of randomly permuting vocabulary identifiers, meeting the requirements of interpolation search when vocabulary identifiers are used as keys.While sorted arrays could be used to implement the same data structure as PROBING, effectively making m = 1, we abandoned this implementation because it is slower and larger than a trie implementation.The trie data structure is commonly used for language modeling.Our TRIE implements the popular reverse trie, in which the last word of an n-gram is looked up first, as do SRILM, IRSTLM’s inverted variant, and BerkeleyLM except for the scrolling variant.Figure 1 shows an example.Nodes in the trie are based on arrays sorted by vocabulary identifier.We maintain a separate array for each length n containing all n-gram entries sorted in suffix order.Therefore, for n-gram wn1 , all leftward extensions wn0 are an adjacent block in the n + 1-gram array.The record for wn1 stores the offset at which its extensions begin.Reading the following record’s offset indicates where the block ends.This technique was introduced by Clarkson and Rosenfeld (1997) and is also implemented by IRSTLM and BerkeleyLM’s compressed option.SRILM inefficiently stores 64-bit pointers.Unigram records store probability, backoff, and an index in the bigram table.Entries for 2 < n < N store a vocabulary identifier, probability, backoff, and an index into the n + 1-gram table.The highestorder N-gram array omits backoff and the index, since these are not applicable.Values in the trie are minimally sized at the bit level, improving memory consumption over trie implementations in SRILM, IRSTLM, and BerkeleyLM.Given n-gram counts {cn}Nn=1, we use Flog2 c1] bits per vocabulary identifier and Flog2 cn] per index into the table of ngrams.When SRILM estimates a model, it sometimes removes n-grams but not n + 1-grams that extend it to the left.In a model we built with default settings, 1.2% of n + 1-grams were missing their ngram suffix.This causes a problem for reverse trie implementations, including SRILM itself, because it leaves n+1-grams without an n-gram node pointing to them.We resolve this problem by inserting an entry with probability set to an otherwise-invalid value (−oc).Queries detect the invalid probability, using the node only if it leads to a longer match.By contrast, BerkeleyLM’s hash and compressed variants will return incorrect results based on an n −1-gram.Floating point values may be stored in the trie exactly, using 31 bits for non-positive log probability and 32 bits for backoff5.To conserve memory at the expense of accuracy, values may be quantized using q bits per probability and r bits per backoff6.We allow any number of bits from 2 to 25, unlike IRSTLM (8 bits) and BerkeleyLM (17−20 bits).To quantize, we use the binning method (Federico and Bertoldi, 2006) that sorts values, divides into equally sized bins, and averages within each bin.The cost of storing these averages, in bits, is Because there are comparatively few unigrams, we elected to store them byte-aligned and unquantized, making every query faster.Unigrams also have 64-bit overhead for vocabulary lookup.Using cn to denote the number of n-grams, total memory consumption of TRIE, in bits, is plus quantization tables, if used.The size of TRIE is particularly sensitive to F1092 c11, so vocabulary filtering is quite effective at reducing model size.SRILM (Stolcke, 2002) is widely used within academia.It is generally considered to be fast (Pauls 29 − 1 probabilities and 2' − 2 non-zero backoffs. and Klein, 2011), with a default implementation based on hash tables within each trie node.Each trie node is individually allocated and full 64-bit pointers are used to find them, wasting memory.The compact variant uses sorted arrays instead of hash tables within each node, saving some memory, but still stores full 64-bit pointers.With some minor API changes, namely returning the length of the n-gram matched, it could also be faster—though this would be at the expense of an optimization we explain in Section 4.1.The PROBING model was designed to improve upon SRILM by using linear probing hash tables (though not arranged in a trie), allocating memory all at once (eliminating the need for full pointers), and being easy to compile.IRSTLM (Federico et al., 2008) is an open-source toolkit for building and querying language models.The developers aimed to reduce memory consumption at the expense of time.Their default variant implements a forward trie, in which words are looked up in their natural left-to-right order.However, their inverted variant implements a reverse trie using less CPU and the same amount of memory7.Each trie node contains a sorted array of entries and they use binary search.Compared with SRILM, IRSTLM adds several features: lower memory consumption, a binary file format with memory mapping, caching to increase speed, and quantization.Our TRIE implementation is designed to improve upon IRSTLM using a reverse trie with improved search, bit level packing, and stateful queries.IRSTLM’s quantized variant is the inspiration for our quantized variant.Unfortunately, we were unable to correctly run the IRSTLM quantized variant.The developers suggested some changes, such as building the model from scratch with IRSTLM, but these did not resolve the problem.Our code has been publicly available and intergrated into Moses since October 2010.Later, BerkeleyLM (Pauls and Klein, 2011) described ideas similar to ours.Most similar is scrolling queries, wherein left-to-right queries that add one word at a time are optimized.Both implementations employ a state object, opaque to the application, that carries information from one query to the next; we discuss both further in Section 4.2.State is implemented in their scrolling variant, which is a trie annotated with forward and backward pointers.The hash variant is a reverse trie with hash tables, a more memory-efficient version of SRILM’s default.While the paper mentioned a sorted variant, code was never released.The compressed variant uses block compression and is rather slow as a result.A direct-mapped cache makes BerkeleyLM faster on repeated queries, but their fastest (scrolling) cached version is still slower than uncached PROBING, even on cache-friendly queries.For all variants, we found that BerkeleyLM always rounds the floating-point mantissa to 12 bits then stores indices to unique rounded floats.The 1-bit sign is almost always negative and the 8-bit exponent is not fully used on the range of values, so in practice this corresponds to quantization ranging from 17 to 20 total bits.Lossy compressed models RandLM (Talbot and Osborne, 2007) and Sheffield (Guthrie and Hepple, 2010) offer better memory consumption at the expense of CPU and accuracy.These enable much larger models in memory, compensating for lost accuracy.Typical data structures are generalized Bloom filters that guarantee a customizable probability of returning the correct answer.Minimal perfect hashing is used to find the index at which a quantized probability and possibly backoff are stored.These models generally outperform our memory consumption but are much slower, even when cached.In addition to the optimizations specific to each datastructure described in Section 2, we implement several general optimizations for language modeling.Applications such as machine translation use language model probability as a feature to assist in choosing between hypotheses.Dynamic programming efficiently scores many hypotheses by exploiting the fact that an N-gram language model conditions on at most N − 1 preceding words.We call these N − 1 words state.When two partial hypotheses have equal state (including that of other features), they can be recombined and thereafter efficiently handled as a single packed hypothesis.If there are too many distinct states, the decoder prunes low-scoring partial hypotheses, possibly leading to a search error.Therefore, we want state to encode the minimum amount of information necessary to properly compute language model scores, so that the decoder will be faster and make fewer search errors.We offer a state function s(wn1) = wn� where substring wn� is guaranteed to extend (to the right) in the same way that wn1 does for purposes of language modeling.The state function is integrated into the query process so that, in lieu of the query p(wnjwn−1 1 ), the application issues query p(wnjs(wn−1 1 )) which also returns s(wn1 ).The returned state s(wn1) may then be used in a followon query p(wn+1js(wn1)) that extends the previous query by one word.These make left-to-right query patterns convenient, as the application need only provide a state and the word to append, then use the returned state to append another word, etc.We have modified Moses (Koehn et al., 2007) to keep our state with hypotheses; to conserve memory, phrases do not keep state.Syntactic decoders, such as cdec (Dyer et al., 2010), build state from null context then store it in the hypergraph node for later extension.Language models that contain wi must also contain prefixes wi for 1 G i G k. Therefore, when the model is queried for p(wnjwn−1 1 ) but the longest matching suffix is wnf , it may return state s(wn1) = wnf since no longer context will be found.IRSTLM and BerkeleyLM use this state function (and a limit of N −1 words), but it is more strict than necessary, so decoders using these packages will miss some recombination opportunities.State will ultimately be used as context in a subsequent query.If the context wnf will never extend to the right (i.e. wnf v is not present in the model for all words v) then no subsequent query will match the full context.If the log backoff of wnf is also zero (it may not be in filtered models), then wf should be omitted from the state.This logic applies recursively: if wnf+1 similarly does not extend and has zero log backoff, it too should be omitted, terminating with a possibly empty context.We indicate whether a context with zero log backoff will extend using the sign bit: +0.0 for contexts that extend and −0.0 for contexts that do not extend.RandLM and SRILM also remove context that will not extend, but SRILM performs a second lookup in its trie whereas our approach has minimal additional cost.Section 4.1 explained that state s is stored by applications with partial hypotheses to determine when they can be recombined.In this section, we extend state to optimize left-to-right queries.All language model queries issued by machine translation decoders follow a left-to-right pattern, starting with either the begin of sentence token or null context for mid-sentence fragments.Storing state therefore becomes a time-space tradeoff; for example, we store state with partial hypotheses in Moses but not with each phrase.To optimize left-to-right queries, we extend state to store backoff information: where m is the minimal context from Section 4.1 and b is the backoff penalty.Because b is a function, no additional hypothesis splitting happens.As noted in Section 1, our code finds the longest matching entry wnf for query p(wn|s(wn−1 f ) The probability p(wn|wn−1 f ) is stored with wnf and the backoffs are immediately accessible in the provided state s(wn−1 When our code walks the data structure to find wnf , it visits wnn, wnn−1, ... , wnf .Each visited entry wni stores backoff b(wni ).These are written to the state s(wn1) and returned so that they can be used for the following query.Saving state allows our code to walk the data structure exactly once per query.Other packages walk their respective data structures once to find wnf and again to find {b(wn−1 i )}f−1 i=1if necessary.In both cases, SRILM walks its trie an additional time to minimize context as mentioned in Section 4.1.BerkeleyLM uses states to optimistically search for longer n-gram matches first and must perform twice as many random accesses to retrieve backoff information.Further, it needs extra pointers in the trie, increasing model size by 40%.This makes memory usage comparable to our PROBING model.The PROBING model can perform optimistic searches by jumping to any n-gram without needing state and without any additional memory.However, this optimistic search would not visit the entries necessary to store backoff information in the outgoing state.Though we do not directly compare state implementations, performance metrics in Table 1 indicate our overall method is faster.Only IRSTLM does not support threading.In our case multi-threading is trivial because our data structures are read-only and uncached.Memory mapping also allows the same model to be shared across processes on the same machine.Along with IRSTLM and TPT, our binary format is memory mapped, meaning the file and in-memory representation are the same.This is especially effective at reducing load time, since raw bytes are read directly to memory—or, as happens with repeatedly used models, are already in the disk cache.Lazy mapping reduces memory requirements by loading pages from disk only as necessary.However, lazy mapping is generally slow because queries against uncached pages must wait for the disk.This is especially bad with PROBING because it is based on hashing and performs random lookups, but it is not intended to be used in low-memory scenarios.TRIE uses less memory and has better locality.However, TRIE partitions storage by n-gram length, so walking the trie reads N disjoint pages.TPT has theoretically better locality because it stores ngrams near their suffixes, thereby placing reads for a single query in the same or adjacent pages.We do not experiment with models larger than physical memory in this paper because TPT is unreleased, factors such as disk speed are hard to replicate, and in such situations we recommend switching to a more compact representation, such as RandLM.In all of our experiments, the binary file (whether mapped or, in the case of most other packages, interpreted) is loaded into the disk cache in advance so that lazy mapping will never fault to disk.This is similar to using the Linux MAP POPULATE flag that is our default loading mechanism.This section measures performance on shared tasks in order of increasing complexity: sparse lookups, evaluating perplexity of a large file, and translation with Moses.Our test machine has two Intel Xeon E5410 processors totaling eight cores, 32 GB RAM, and four Seagate Barracuda disks in software RAID 0 running Linux 2.6.18.Sparse lookup is a key subproblem of language model queries.We compare three hash tables: our probing implementation, GCC’s hash set, and Boost’s8 unordered.For sorted lookup, we compare interpolation search, standard C++ binary search, and standard C++ set based on red-black trees.The data structure was populated with 64-bit integers sampled uniformly without replacement.For queries, we uniformly sampled 10 million hits and 10 million misses.The same numbers were used for each data structure.Time includes all queries but excludes random number generation and data structure population.Figure 2 shows timing results.For the PROBING implementation, hash table sizes are in the millions, so the most relevant values are on the right size of the graph, where linear probing wins.It also uses less memory, with 8 bytes of overhead per entry (we store 16-byte entries with m = 1.5); linked list implementations hash set and unordered require at least 8 bytes per entry for pointers.Further, the probing hash table does only one random lookup per query, explaining why it is faster on large data.Interpolation search has a more expensive pivot but performs less pivoting and reads, so it is slow on small data and faster on large data.This suggests a strategy: run interpolation search until the range narrows to 4096 or fewer entries, then switch to binary search.However, reads in the TRIE data structure are more expensive due to bit-level packing, so we found that it is faster to use interpolation search the entire time.Memory usage is the same as with binary search and lower than with set.For the perplexity and translation tasks, we used SRILM to build a 5-gram English language model on 834 million tokens from Europarl v6 (Koehn, 2005) and the 2011 Workshop on Machine Translation News Crawl corpus with duplicate lines removed.The model was built with open vocabulary, modified Kneser-Ney smoothing, and default pruning settings that remove singletons of order 3 and higher.Unlike Germann et al. (2009), we chose a model size so that all benchmarks fit comfortably in main memory.Benchmarks use the package’s binary format; our code is also the fastest at building a binary file.As noted in Section 4.4, disk cache state is controlled by reading the entire binary file before each test begins.For RandLM, we used the settings in the documentation: 8 bits per value and false positive probability 1 256.We evaluate the time and memory consumption of each data structure by computing perplexity on 4 billion tokens from the English Gigaword corpus (Parker et al., 2009).Tokens were converted to vocabulary identifiers in advance and state was carried from each query to the next.Table 1 shows results of the benchmark.Compared to decoding, this task is cache-unfriendly in that repeated queries happen only as they naturally occur in text.Therefore, performance is more closely tied to the underlying data structure than to the cache.In fact, we found that enabling IRSTLM’s cache made it slightly slower, so results in Table 1 use IRSTLM without caching.Moses sets the cache size parameter to 50 so we did as well; the resulting cache size is 2.82 GB.The results in Table 1 show PROBING is 81% faster than TRIE, which is in turn 31% faster than the fastest baseline.Memory usage in PROBING is high, though SRILM is even larger, so where memory is of concern we recommend using TRIE, if it fits in memory.For even larger models, we recommend RandLM; the memory consumption of the cache is not expected to grow with model size, and it has been reported to scale well.Another option is the closedsource data structures from Sheffield (Guthrie and Hepple, 2010).Though we are not able to calculate their memory usage on our model, results reported in their paper suggest lower memory consumption than TRIE on large-scale models, at the expense of CPU time.This task measures how well each package performs in machine translation.We run the baseline Moses system for the French-English track of the 2011 Workshop on Machine Translation,9 translating the 3003-sentence test set.Based on revision 4041, we modified Moses to print process statistics before terminating.Process statistics are already collected by the kernel (and printing them has no meaningful impact on performance).SRILM’s compact variant has an incredibly expensive destructor, dwarfing the time it takes to perform translation, and so we also modified Moses to avoiding the destructor by calling exit instead of returning normally.Since our destructor is an efficient call to munmap, bypassing the destructor favors only other packages.The binary language model from Section 5.2 and text phrase table were forced into disk cache before each run.Time starts when Moses is launched and therefore includes model loading time.These conaUses lossy compression. bThe 8-bit quantized variant returned incorrect probabilities as explained in Section 3.It did 402 queries/ms using 1.80 GB. cMemory use increased during scoring due to batch processing (MIT) or caching (Rand).The first value reports use immediately after loading while the second reports the increase during scoring. dBerkeleyLM is written in Java which requires memory be specified in advance.Timing is based on plentiful memory.Then we ran binary search to determine the least amount of memory with which it would run.The first value reports resident size after loading; the second is the gap between post-loading resident memory and peak virtual memory.The developer explained that the loading process requires extra memory that it then frees. eBased on the ratio to SRI’s speed reported in Guthrie and Hepple (2010) under different conditions.Memory usage is likely much lower than ours. fThe original paper (Germann et al., 2009) provided only 2s of query timing and compared with SRI when it exceeded available RAM.The authors provided us with a ratio between TPT and SRI under different conditions. aLossy compression with the same weights. bLossy compression with retuned weights. ditions make the value appropriate for estimating repeated run times, such as in parameter tuning.Table 2 shows single-threaded results, mostly for comparison to IRSTLM, and Table 3 shows multi-threaded results.Part of the gap between resident and virtual memory is due to the time at which data was collected.Statistics are printed before Moses exits and after parts of the decoder have been destroyed.Moses keeps language models and many other resources in static variables, so these are still resident in memory.Further, we report current resident memory and peak virtual memory because these are the most applicable statistics provided by the kernel.Overall, language modeling significantly impacts decoder performance.In line with perplexity results from Table 1, the PROBING model is the fastest followed by TRIE, and subsequently other packages.We incur some additional memory cost due to storing state in each hypothesis, though this is minimal compared with the size of the model itself.The TRIE model continues to use the least memory of ing (-P) with MAP POPULATE, the default.IRST is not threadsafe.Time for Moses itself to load, including loading the language model and phrase table, is included.Along with locking and background kernel operations such as prefaulting, this explains why wall time is not one-eighth that of the single-threaded case. aLossy compression with the same weights. bLossy compression with retuned weights. the non-lossy options.For RandLM and IRSTLM, the effect of caching can be seen on speed and memory usage.This is most severe with RandLM in the multi-threaded case, where each thread keeps a separate cache, exceeding the original model size.As noted for the perplexity task, we do not expect cache to grow substantially with model size, so RandLM remains a low-memory option.Caching for IRSTLM is smaller at 0.09 GB resident memory, though it supports only a single thread.The BerkeleyLM direct-mapped cache is in principle faster than caches implemented by RandLM and by IRSTLM, so we may write a C++ equivalent implementation as future work.RandLM’s stupid backoff variant stores counts instead of probabilities and backoffs.It also does not prune, so comparing to our pruned model would be unfair.Using RandLM and the documented settings (8-bit values and 1 256 false-positive probability), we built a stupid backoff model on the same data as in Section 5.2.We used this data to build an unpruned ARPA file with IRSTLM’s improved-kneser-ney option and the default three pieces.Table 4 shows the results.We elected run Moses single-threaded to minimize the impact of RandLM’s cache on memory use.RandLM is the clear winner in RAM utilization, but is also slower and lower quality.However, the point of RandLM is to scale to even larger data, compensating for this loss in quality.There any many techniques for improving language model speed and reducing memory consumption.For speed, we plan to implement the direct-mapped cache from BerkeleyLM.Much could be done to further reduce memory consumption.Raj and Whittaker (2003) show that integers in a trie implementation can be compressed substantially.Quantization can be improved by jointly encoding probability and backoff.For even larger models, storing counts (Talbot and Osborne, 2007; Pauls and Klein, 2011; Guthrie and Hepple, 2010) is a possibility.Beyond optimizing the memory size of TRIE, there are alternative data structures such as those in Guthrie and Hepple (2010).Finally, other packages implement language model estimation while we are currently dependent on them to generate an ARPA file.While we have minimized forward-looking state in Section 4.1, machine translation systems could also benefit by minimizing backward-looking state.For example, syntactic decoders (Koehn et al., 2007; Dyer et al., 2010; Li et al., 2009) perform dynamic programming parametrized by both backward- and forward-looking state.If they knew that the first four words in a hypergraph node would never extend to the left and form a 5-gram, then three or even fewer words could be kept in the backward state.This information is readily available in TRIE where adjacent records with equal pointers indicate no further extension of context is possible.Exposing this information to the decoder will lead to better hypothesis recombination.Generalizing state minimization, the model could also provide explicit bounds on probability for both backward and forward extension.This would result in better rest cost estimation and better pruning.10 In general, tighter, but well factored, integration between the decoder and language model should produce a significant speed improvement.We have described two data structures for language modeling that achieve substantial reductions in time and memory cost.The PROBING model is 2.4 times as fast as the fastest alternative, SRILM, and uses less memory too.The TRIE model uses less memory than the smallest lossless alternative and is still faster than SRILM.These performance gains transfer to improved system runtime performance; though we focused on Moses, our code is the best lossless option with cdec and Joshua.We attain these results using several optimizations: hashing, custom lookup tables, bit-level packing, and state for left-to-right query patterns.The code is opensource, has minimal dependencies, and offers both C++ and Java interfaces for integration.Alon Lavie advised on this work.Hieu Hoang named the code “KenLM” and assisted with Moses along with Barry Haddow.Adam Pauls provided a pre-release comparison to BerkeleyLM and an initial Java interface.Nicola Bertoldi and Marcello Federico assisted with IRSTLM.Chris Dyer integrated the code into cdec.Juri Ganitkevitch answered questions about Joshua.This material is based upon work supported by the National Science Foundation Graduate Research Fellowship under Grant No.0750271 and by the DARPA GALE program.
Unsupervised Models for Named Entity Classification CollinsThis paper discusses the use of unlabeled examples for the problem of named entity classification.A large number of rules is needed for coverage of the domain, suggesting that a fairly large number of labeled examples should be required to train a classi- However, we show that the use of data can reduce the requirements for supervision to just 7 simple &quot;seed&quot; rules.The approach gains leverage from natural redundancy in the data: for many named-entity instances both the spelling of the name and the context in which it appears are sufficient to determine its type.We present two algorithms.The first method uses a similar algorithm to that of (Yarowsky 95), with modifications motivated by (Blum and Mitchell 98).The second algorithm extends ideas from boosting algorithms, designed for supervised learning tasks, to the framework suggested by (Blum and Mitchell 98).Many statistical or machine-learning approaches for natural language problems require a relatively large amount of supervision, in the form of labeled training examples.Recent results (e.g., (Yarowsky 95; Brill 95; Blum and Mitchell 98)) have suggested that unlabeled data can be used quite profitably in reducing the need for supervision.This paper discusses the use of unlabeled examples for the problem of named entity classification.The task is to learn a function from an input string (proper name) to its type, which we will assume to be one of the categories Person, Organization, or Location.For example, a good classifier would identify Mrs. Frank as a person, Steptoe & Johnson as a company, and Honduras as a location.The approach uses both spelling and contextual rules.A spelling rule might be a simple look-up for the string (e.g., a rule that Honduras is a location) or a rule that looks at words within a string (e.g., a rule that any string containing Mr. is a person).A contextual rule considers words surrounding the string in the sentence in which it appears (e.g., a rule that any proper name modified by an appositive whose head is president is a person).The task can be considered to be one component of the MUC (MUC-6, 1995) named entity task (the other task is that of segmentation, i.e., pulling possible people, places and locations from text before sending them to the classifier).Supervised methods have been applied quite successfully to the full MUC named-entity task (Bikel et al. 97).At first glance, the problem seems quite complex: a large number of rules is needed to cover the domain, suggesting that a large number of labeled examples is required to train an accurate classifier.But we will show that the use of unlabeled data can drastically reduce the need for supervision.Given around 90,000 unlabeled examples, the methods described in this paper classify names with over 91% accuracy.The only supervision is in the form of 7 seed rules (namely, that New York, California and U.S. are locations; that any name containing Mr is a person; that any name containing Incorporated is an organization; and that I.B.M. and Microsoft are organizations).The key to the methods we describe is redundancy in the unlabeled data.In many cases, inspection of either the spelling or context alone is sufficient to classify an example.For example, in .., says Mr. Cooper, a vice president of.. both a spelling feature (that the string contains Mr.) and a contextual feature (that president modifies the string) are strong indications that Mr. Cooper is of type Person.Even if an example like this is not labeled, it can be interpreted as a &quot;hint&quot; that Mr and president imply the same category.The unlabeled data gives many such &quot;hints&quot; that two features should predict the same label, and these hints turn out to be surprisingly useful when building a classifier.We present two algorithms.The first method builds on results from (Yarowsky 95) and (Blum and Mitchell 98).(Yarowsky 95) describes an algorithm for word-sense disambiguation that exploits redundancy in contextual features, and gives impressive performance.Unfortunately, Yarowsky's method is not well understood from a theoretical viewpoint: we would like to formalize the notion of redundancy in unlabeled data, and set up the learning task as optimization of some appropriate objective function.(Blum and Mitchell 98) offer a promising formulation of redundancy, also prove some results about how the use of unlabeled examples can help classification, and suggest an objective function when training with unlabeled examples.Our first algorithm is similar to Yarowsky's, but with some important modifications motivated by (Blum and Mitchell 98).The algorithm can be viewed as heuristically optimizing an objective function suggested by (Blum and Mitchell 98); empirically it is shown to be quite successful in optimizing this criterion.The second algorithm builds on a boosting algorithm called AdaBoost (Freund and Schapire 97; Schapire and Singer 98).The AdaBoost algorithm was developed for supervised learning.AdaBoost finds a weighted combination of simple (weak) classifiers, where the weights are chosen to minimize a function that bounds the classification error on a set of training examples.Roughly speaking, the new algorithm presented in this paper performs a similar search, but instead minimizes a bound on the number of (unlabeled) examples on which two classifiers disagree.The algorithm builds two classifiers iteratively: each iteration involves minimization of a continuously differential function which bounds the number of examples on which the two classifiers disagree.There has been additional recent work on inducing lexicons or other knowledge sources from large corpora.(Brin 98) ,describes a system for extracting (author, book-title) pairs from the World Wide Web using an approach that bootstraps from an initial seed set of examples.(Berland and Charniak 99) describe a method for extracting parts of objects from wholes (e.g., &quot;speedometer&quot; from &quot;car&quot;) from a large corpus using hand-crafted patterns.(Hearst 92) describes a method for extracting hyponyms from a corpus (pairs of words in &quot;isa&quot; relations).(Riloff and Shepherd 97) describe a bootstrapping approach for acquiring nouns in particular categories (such as &quot;vehicle&quot; or &quot;weapon&quot; categories).The approach builds from an initial seed set for a category, and is quite similar to the decision list approach described in (Yarowsky 95).More recently, (Riloff and Jones 99) describe a method they term &quot;mutual bootstrapping&quot; for simultaneously constructing a lexicon and contextual extraction patterns.The method shares some characteristics of the decision list algorithm presented in this paper.(Riloff and Jones 99) was brought to our attention as we were preparing the final version of this paper.971,746 sentences of New York Times text were parsed using the parser of (Collins 96).1 Word sequences that met the following criteria were then extracted as named entity examples: whose head is a singular noun (tagged NN).For example, take ..., says Maury Cooper, a vice president at S.&P.In this case, Maury Cooper is extracted.It is a sequence of proper nouns within an NP; its last word Cooper is the head of the NP; and the NP has an appositive modifier (a vice president at S.&P.) whose head is a singular noun (president).2.The NP is a complement to a preposition, which is the head of a PP.This PP modifies another NP, whose head is a singular noun.For example, ... fraud related to work on a federally funded sewage plant in Georgia In this case, Georgia is extracted: the NP containing it is a complement to the preposition in; the PP headed by in modifies the NP a federally funded sewage plant, whose head is the singular noun plant.In addition to the named-entity string (Maury Cooper or Georgia), a contextual predictor was also extracted.In the appositive case, the contextual predictor was the head of the modifying appositive (president in the Maury Cooper example); in the second case, the contextual predictor was the preposition together with the noun it modifies (plant_in in the Georgia example).From here on we will refer to the named-entity string itself as the spelling of the entity, and the contextual predicate as the context.Having found (spelling, context) pairs in the parsed data, a number of features are extracted.The features are used to represent each example for the learning algorithm.In principle a feature could be an arbitrary predicate of the (spelling, context) pair; for reasons that will become clear, features are limited to querying either the spelling or context alone.The following features were used: full-string=x The full string (e.g., for Maury Cooper, full- s tring=Maury_Cooper). contains(x) If the spelling contains more than one word, this feature applies for any words that the string contains (e.g., Maury Cooper contributes two such features, contains (Maury) and contains (Cooper) . allcapl This feature appears if the spelling is a single word which is all capitals (e.g., IBM would contribute this feature). allcap2 This feature appears if the spelling is a single word which is all capitals or full periods, and contains at least one period.(e.g., N.Y. would contribute this feature, IBM would not). nonalpha=x Appears if the spelling contains any characters other than upper or lower case letters.In this case nonalpha is the string formed by removing all upper/lower case letters from the spelling (e.g., for Thomas E. Petry nonalpha= ., for A. T.&T. nonalpha.. ..). context=x The context for the entity.TheThe first unsupervised algorithm we describe is based on the decision list method from (Yarowsky 95).Before describing the unsupervised case we first describe the supervised version of the algorithm: Input to the learning algorithm: n labeled examples of the form (xi, y„). y, is the label of the ith example (given that there are k possible labels, y, is a member of y = {1 ... 0). xi is a set of mi features {x,1, Xi2 ...Xim, } associated with the ith example.Each xii is a member of X, where X is a set of possible features.Output of the learning algorithm: a function h:Xxy [0, 1] where h(x, y) is an estimate of the conditional probability p(y1x) of seeing label y given that feature x is present.Alternatively, h can be thought of as defining a decision list of rules x y ranked by their &quot;strength&quot; h(x, y).The label for a test example with features x is then defined as In this paper we define h(x, y) as the following function of counts seen in training data: Count(x,y) is the number of times feature x is seen with label y in training data, Count(x) = EyEy Count(x, y). a is a smoothing parameter, and k is the number of possible labels.In this paper k = 3 (the three labels are person, organization, location), and we set a = 0.1.Equation 2 is an estimate of the conditional probability of the label given the feature, P(yjx).2 We now introduce a new algorithm for learning from unlabeled examples, which we will call DLCoTrain (DL stands for decision list, the term Cotrain is taken from (Blum and Mitchell 98)).The 2(Yarowsky 95) describes the use of more sophisticated smoothing methods.It's not clear how to apply these methods in the unsupervised case, as they required cross-validation techniques: for this reason we use the simpler smoothing method shown here. input to the unsupervised algorithm is an initial, &quot;seed&quot; set of rules.In the named entity domain these rules were Each of these rules was given a strength of 0.9999.The following algorithm was then used to induce new rules: Let Count' (x) be the number of times feature x is seen with some known label in the training data.For each label (Per s on, organization and Location), take the n contextual rules with the highest value of Count' (x) whose unsmoothed3 strength is above some threshold pmin.(If fewer than n rules have Precision greater than pin, we 3Note that taking tlie top n most frequent rules already makes the method robut to low count events, hence we do not use smoothing, allowing low-count high-precision features to be chosen on later iterations. keep only those rules which exceed the precision threshold.) pm,n was fixed at 0.95 in all experiments in this paper.Thus at each iteration the method induces at most n x k rules, where k is the number of possible labels (k = 3 in the experiments in this paper). step 3.Otherwise, label the training data with the combined spelling/contextual decision list, then induce a final decision list from the labeled examples where all rules (regardless of strength) are added to the decision list.We can now compare this algorithm to that of (Yarowsky 95).The core of Yarowsky's algorithm is as follows: where h is defined by the formula in equation 2, with counts restricted to training data examples that have been labeled in step 2.Set the decision list to include all rules whose (smoothed) strength is above some threshold Pmin.There are two differences between this method and the DL-CoTrain algorithm: spelling and contextual features, alternating between labeling and learning with the two types of features.Thus an explicit assumption about the redundancy of the features — that either the spelling or context alone should be sufficient to build a classifier — has been built into the algorithm.To measure the contribution of each modification, a third, intermediate algorithm, Yarowsky-cautious was also tested.Yarowsky-cautious does not separate the spelling and contextual features, but does have a limit on the number of rules added at each stage.(Specifically, the limit n starts at 5 and increases by 5 at each iteration.)The first modification — cautiousness — is a relatively minor change.It was motivated by the observation that the (Yarowsky 95) algorithm added a very large number of rules in the first few iterations.Taking only the highest frequency rules is much &quot;safer&quot;, as they tend to be very accurate.This intuition is born out by the experimental results.The second modification is more important, and is discussed in the next section.An important reason for separating the two types of features is that this opens up the possibility of theoretical analysis of the use of unlabeled examples.(Blum and Mitchell 98) describe learning in the following situation: X = X1 X X2 where X1 and X2 correspond to two different &quot;views&quot; of an example.In the named entity task, X1 might be the instance space for the spelling features, X2 might be the instance space for the contextual features.By this assumption, each element x E X can also be represented as (xi, x2) E X1 x X2.Thus the method makes the fairly strong assumption that the features can be partitioned into two types such that each type alone is sufficient for classification.Now assume we have n pairs (xi,, x2,i) drawn from X1 X X2, where the first m pairs have labels whereas for i = m+ 1...n the pairs are unlabeled.In a fully supervised setting, the task is to learn a function f such that for all i = 1...m, f (xi,i, 12,i) = yz.In the cotraining case, (Blum and Mitchell 98) argue that the task should be to induce functions Ii and f2 such that So Ii and 12 must (1) correctly classify the labeled examples, and (2) must agree with each other on the unlabeled examples.The key point is that the second constraint can be remarkably powerful in reducing the complexity of the learning problem.(Blum and Mitchell 98) give an example that illustrates just how powerful the second constraint can be.Consider the case where IX].I = 1X21 N and N is a &quot;medium&quot; sized number so that it is feasible to collect 0(N) unlabeled examples.Assume that the two classifiers are &quot;rote learners&quot;: that is, 1.1 and 12 are defined through look-up tables that list a label for each member of X1 or X2.The problem is a binary classification problem.The problem can be represented as a graph with 2N vertices corresponding to the members of X1 and X2.Each unlabeled pair (x1,i, x2,i) is represented as an edge between nodes corresponding to x1,i and X2,i in the graph.An edge indicates that the two features must have the same label.Given a sufficient number of randomly drawn unlabeled examples (i.e., edges), we will induce two completely connected components that together span the entire graph.Each vertex within a connected component must have the same label — in the binary classification case, we need a single labeled example to identify which component should get which label.(Blum and Mitchell 98) go on to give PAC results for learning in the cotraining case.They also describe an application of cotraining to classifying web pages (the to feature sets are the words on the page, and other pages pointing to the page).The method halves the error rate in comparison to a method using the labeled examples alone.Limitations of (Blum and Mitchell 98): While the assumptions of (Blum and Mitchell 98) are useful in developing both theoretical results and an intuition for the problem, the assumptions are quite limited.In particular, it may not be possible to learn functions fi (x f2(x2,t) for i = m + 1...n: either because there is some noise in the data, or because it is just not realistic to expect to learn perfect classifiers given the features used for representation.It may be more realistic to replace the second criteria with a softer one, for example (Blum and Mitchell 98) suggest the alternative Alternatively, if Ii and 12 are probabilistic learners, it might make sense to encode the second constraint as one of minimizing some measure of the distance between the distributions given by the two learners.The question of what soft function to pick, and how to design' algorithms which optimize it, is an open question, but appears to be a promising way of looking at the problem.The DL-CoTrain algorithm can be motivated as being a greedy method of satisfying the above 2 constraints.At each iteration the algorithm increases the number of rules, while maintaining a high level of agreement between the spelling and contextual decision lists.Inspection of the data shows that at n = 2500, the two classifiers both give labels on 44,281 (49.2%) of the unlabeled examples, and give the same label on 99.25% of these cases.So the success of the algorithm may well be due to its success in maximizing the number of unlabeled examples on which the two decision lists agree.In the next section we present an alternative approach that builds two classifiers while attempting to satisfy the above constraints as much as possible.The algorithm, called CoBoost, has the advantage of being more general than the decision-list learning alInput: (xi , yi), , (xim, ) ; x, E 2x, yi = +1 Initialize Di (i) = 1/m.Fort= 1,...,T:This section describes an algorithm based on boosting algorithms, which were previously developed for supervised machine learning problems.We first give a brief overview of boosting algorithms.We then discuss how we adapt and generalize a boosting algorithm, AdaBoost, to the problem of named entity classification.The new algorithm, which we call CoBoost, uses labeled and unlabeled data and builds two classifiers in parallel.(We would like to note though that unlike previous boosting algorithms, the CoBoost algorithm presented here is not a boosting algorithm under Valiant's (Valiant 84) Probably Approximately Correct (PAC) model.)This section describes AdaBoost, which is the basis for the CoBoost algorithm.AdaBoost was first introduced in (Freund and Schapire 97); (Schapire and Singer 98) gave a generalization of AdaBoost which we will use in this paper.For a description of the application of AdaBoost to various NLP problems see the paper by Abney, Schapire, and Singer in this volume.The input to AdaBoost is a set of training examples ((xi , yi), , (x„.„ yrn)).Each xt E 2x is the set of features constituting the ith example.For the moment we will assume that there are only two possible labels: each y, is in { —1, +1}.AdaBoost is given access to a weak learning algorithm, which accepts as input the training examples, along with a distribution over the instances.The distribution specifies the relative weight, or importance, of each example — typically, the weak learner will attempt to minimize the weighted error on the training set, where the distribution specifies the weights.The weak learner for two-class problems computes a weak hypothesis h from the input space into the reals (h : 2x -4 R), where the sign4 of h(x) is interpreted as the predicted label and the magnitude I h(x)I is the confidence in the prediction: large numbers for I h(x)I indicate high confidence in the prediction, and numbers close to zero indicate low confidence.The weak hypothesis can abstain from predicting the label of an instance x by setting h(x) = 0.The final strong hypothesis, denoted 1(x), is then the sign of a weighted sum of the weak hypotheses, 1(x) = sign (Vii atht(x)), where the weights at are determined during the run of the algorithm, as we describe below.Pseudo-code describing the generalized boosting algorithm of Schapire and Singer is given in Figure 1.Note that Zt is a normalization constant that ensures the distribution Dt+i sums to 1; it is a function of the weak hypothesis ht and the weight for that hypothesis at chosen at the tth round.The normalization factor plays an important role in the AdaBoost algorithm.Schapire and Singer show that the training error is bounded above by Thus, in order to greedily minimize an upper bound on training error, on each iteration we should search for the weak hypothesis ht and the weight at that minimize Z.In our implementation, we make perhaps the simplest choice of weak hypothesis.Each ht is a function that predicts a label (+1 or —1) on examples containing a particular feature xt, while abstaining on other examples: The prediction of the strong hypothesis can then be written as We now briefly describe how to choose ht and at at each iteration.Our derivation is slightly different from the one presented in (Schapire and Singer 98) as we restrict at to be positive.Zt can be written as follows Following the derivation of Schapire and Singer, providing that W+ > W_, Equ.(4) is minimized by setting Since a feature may be present in only a few examples, W_ can be in practice very small or even 0, leading to extreme confidence values.To prevent this we &quot;smooth&quot; the confidence by adding a small value, e, to both W+ and W_, giving at = Plugging the value of at from Equ.(5) and ht into Equ.(4) gives In order to minimize Zt, at each iteration the final algorithm should choose the weak hypothesis (i.e., a feature xt) which has values for W+ and W_ that minimize Equ.(6), with W+ > W_.We now describe the CoBoost algorithm for the named entity problem.Following the convention presented in earlier sections, we assume that each example is an instance pair of the from (xi ,i, x2,) where xj,, E 2x3 , j E 2}.In the namedentity problem each example is a (spelling,context) pair.The first m pairs have labels yi, whereas for i = m + 1, , n the pairs are unlabeled.We make the assumption that for each example, both xi,. and x2,2 alone are sufficient to determine the label yi.The learning task is to find two classifiers : 2x1 { —1, +1} 12 : 2x2 { —1, +1} such that (x1,) = f2(x2,t) = yt for examples i = 1, , m, and f1 (x1,) = f2 (x2,t) as often as possible on examples i = m + 1, ,n. To achieve this goal we extend the auxiliary function that bounds the training error (see Equ.(3)) to be defined over unlabeled as well as labeled instances.Denote by g3(x) = Et crithl(x) , j E {1,2} the unthresholded strong-hypothesis (i.e., f3 (x) = sign(gi (x))).We define the following function: If Zco is small, then it follows that the two classifiers must have a low error rate on the labeled examples, and that they also must give the same label on a large number of unlabeled instances.To see this, note thai the first two terms in the above equation correspond to the function that AdaBoost attempts to minimize in the standard supervised setting (Equ.(3)), with one term for each classifier.The two new terms force the two classifiers to agree, as much as possible, on the unlabeled examples.Put another way, the minimum of Equ.(7) is at 0 when: 1) Vi : sign(gi (xi)) = sign(g2 (xi)); 2) Ig3(xi)l oo; and 3) sign(gi (xi)) = yi for i = 1, , m. In fact, Zco provides a bound on the sum of the classification error of the labeled examples and the number of disagreements between the two classifiers on the unlabeled examples.Formally, let el (62) be the number of classification errors of the first (second) learner on the training data, and let Eco be the number of unlabeled examples on which the two classifiers disagree.Then, it can be verified that We can now derive the CoBoost algorithm as a means of minimizing Zco.The algorithm builds two classifiers in parallel from labeled and unlabeled data.As in boosting, the algorithm works in rounds.Each round is composed of two stages; each stage updates one of the classifiers while keeping the other classifier fixed.Denote the unthresholded classifiers after t — 1 rounds by git—1 and assume that it is the turn for the first classifier to be updated while the second one is kept fixed.We first define &quot;pseudo-labels&quot;,-yt, as follows: = Yi t sign(g 0\ 2— kx2,m < i < n Thus the first m labels are simply copied from the labeled examples, while the remaining (n — m) examples are taken as the current output of the second classifier.We can now add a new weak hypothesis 14 based on a feature in X1 with a confidence value al hl and atl are chosen to minimize the function We now define, for 1 <i <n, the following virtual distribution, As before, Ztl is a normalization constant.Equ.(8) can now be rewritten5 as which is of the same form as the function Zt used in AdaBoost.Using the virtual distribution Di (i) and pseudo-labels&quot;y.,„ values for Wo, W± and W_ can be calculated for each possible weak hypothesis (i.e., for each feature x E Xi); the weak hypothesis with minimal value for Wo + 2/WW _ can be chosen as before; and the weight for this weak hypothesis at = ln ww+411:) can be calculated.This procedure is repeated for T rounds while alternating between the two classifiers.The pseudo-code describing the algorithm is given in Fig.2.The CoBoost algorithm described above divides the function Zco into two parts: Zco = 40 + 40.On each step CoBoost searches for a feature and a weight so as to minimize either 40 or 40.In Input: {(x1,i, Initialize: Vi, j : e(xi) = 0.For t = 1, T and for j = 1, 2: where 4 = exp(-jg'(xj,i)). practice, this greedy approach almost always results in an overall decrease in the value of Zco.Note, however, that there might be situations in which Zco in fact increases.One implementation issue deserves some elaboration.Note that in our formalism a weakhypothesis can abstain.In fact, during the first rounds many of the predictions of Th., g2 are zero.Thus corresponding pseudo-labels for instances on which gj abstain are set to zero and these instances do not contribute to the objective function.Each learner is free to pick the labels for these instances.This allow the learners to &quot;bootstrap&quot; each other by filling the labels of the instances on which the other side has abstained so far.The CoBoost algorithm just described is for the case where there are two labels: for the named entity task there are three labels, and in general it will be useful to generalize the CoBoost algorithm to the multiclass case.Several extensions of AdaBoost for multiclass problems have been suggested (Freund and Schapire 97; Schapire and Singer 98).In this work we extended the AdaBoost.MH (Schapire and Singer 98) algorithm to the cotraining case.AdaBoost.MH maintains a distribution over instances and labels; in addition, each weak-hypothesis outputs a confidence vector with one confidence value for each possible label.We again adopt an approach where we alternate between two classifiers: one classifier is modified while the other remains fixed.Pseudo-labels are formed by taking seed labels on the labeled examples, and the output of the fixed classifier on the unlabeled examples.AdaBoost.MH can be applied to the problem using these pseudolabels in place of supervised examples.For the experiments in this paper we made a couple of additional modifications to the CoBoost algorithm.The algorithm in Fig.(2) was extended to have an additional, innermost loop over the (3) possible labels.The weak hypothesis chosen was then restricted to be a predictor in favor of this label.Thus at each iteration the algorithm is forced to pick features for the location, person and organization in turn for the classifier being trained.This modification brings the method closer to the DL-CoTrain algorithm described earlier, and is motivated by the intuition that all three labels should be kept healthily populated in the unlabeled examples, preventing one label from dominating — this deserves more theoretical investigation.We also removed the context-type feature type when using the CoBoost approach.This &quot;default&quot; feature type has 100% coverage (it is seen on every example) but a low, baseline precision.When this feature type was included, CoBoost chose this default feature at an early iteration, thereby giving non-abstaining pseudo-labels for all examples, with eventual convergence to the two classifiers agreeing by assigning the same label to almost all examples.Again, this deserves further investigation.Finally, we would like to note that it is possible to devise similar algorithms based with other objective functions than the one given in Equ.(7), such as the likelihood function used in maximum-entropy problems and other generalized additive models (Lafferty 99).We are currently exploring such algorithms.The Expectation Maximization (EM) algorithm (Dempster, Laird and Rubin 77) is a common approach for unsupervised training; in this section we describe its application to the named entity problem.A generative model was applied (similar to naive Bayes) with the three labels as hidden vanables on unlabeled examples, and observed variables on (seed) labeled examples.The model was parameterized such that the joint probability of a (label, feature-set) pair P(yi, xi) is written as The model assumes that (y, x) pairs are generated by an underlying process where the label is first chosen with some prior probability P(yi); the number of features mi is then chosen with some probability P(mi); finally the features are independently generated with probabilities P(xulyi).We again assume a training set of n examples {x1 . xri} where the first m examples have labels {y1 ... yin}, and the last (n — m) examples are unlabeled.For the purposes of EM, the &quot;observed&quot; data is {(xi, Ya• • • (xrn, Yrn), xfil, and the hidden data is {ym+i y}.The likelihood of the observed data under the model is where P(yi, xi) is defined as in (9).Training under this model involves estimation of parameter values for P(y), P(m) and P(x I y).The maximum likelihood estimates (i.e., parameter values which maximize 10) can not be found analytically, but the EM algorithm can be used to hill-climb to a local maximum of the likelihood function from some initial parameter settings.In our experiments we set the parameter values randomly, and then ran EM to convergence.Given parameter estimates, the label for a test example x is defined as We should note that the model in equation 9 is deficient, in that it assigns greater than zero probability to some feature combinations that are impossible.For example, the independence assumptions mean that the model fails to capture the dependence between specific and more general features (for example the fact that the feature full.-string=New_York is always seen with the features contains (New) and The baseline method tags all entities as the most frequent class type (organization). contains (York) and is never seen with a feature such as contains (Group) ).Unfortunately, modifying the model to account for these kind of dependencies is not at all straightforward.88,962 (spelling,context) pairs were extracted as training data.1,000 of these were picked at random, and labeled by hand to produce a test set.We chose one of four labels for each example: location, person, organization, or noise where the noise category was used for items that were outside the three categories.The numbers falling into the location, person, organization categories were 186, 289 and 402 respectively.123 examples fell into the noise category.Of these cases, 38 were temporal expressions (either a day of the week or month of the year).We excluded these from the evaluation as they can be easily identified with a list of days/months.This left 962 examples, of which 85 were noise.Taking /V, to be the number of examples an algorithm classified correctly (where all gold standard items labeled noise were counted as being incorrect), we calculated two measures of accuracy: See Tab.2 for the accuracy of the different methods.Note that on some examples (around 2% of the test set) CoBoost abstained altogether; in these cases we labeled the test example with the baseline, organization, label.Fig.(3) shows learning curves for CoBoost.N, portion of examples on which both classifiers give a label rather than abstaining), and the proportion of these examples on which the two classifiers agree.With each iteration more examples are assigned labels by both classifiers, while a high level of agreement (> 94%) is maintained between them.The test accuracy more or less asymptotes.Unlabeled examples in the named-entity classification problem can reduce the need for supervision to a handful of seed rules.In addition to a heuristic based on decision list learning, we also presented a boosting-like framework that builds on ideas from (Blum and Mitchell 98).The method uses a &quot;soft&quot; measure of the agreement between two classifiers as an objective function; we described an algorithm which directly optimizes this function.We are currently exploring other methods that employ similar ideas and their formal properties.Future work should also extend the approach to build a complete named entity extractor - a method that pulls proper names from text and then classifies them.The contextual rules are restricted and may not be applicable to every example, but the spelling rules are generally applicable and should have good coverage.The problem of &quot;noise&quot; items that do not fall into any of the three categories also needs to be addressed.
Exploiting Diversity in Natural Language Processing: Combining ParsersThree state-of-the-art statistical parsers are combined to produce more accurate parses, as well as new bounds on achievable Treebank parsing accuracy.Two general approaches are presented and two combination techniques are described for each approach.Both parametric and non-parametric models are explored.The resulting parsers surpass the best previously published performance results for the Penn Treebank.The natural language processing community is in the strong position of having many available approaches to solving some of its most fundamental problems.The machine learning community has been in a similar situation and has studied the combination of multiple classifiers (Wolpert, 1992; Heath et al., 1996).Their theoretical finding is simply stated: classification error rate decreases toward the noise rate exponentially in the number of independent, accurate classifiers.The theory has also been validated empirically.Recently, combination techniques have been investigated for part of speech tagging with positive results (van Halteren et al., 1998; Brill and Wu, 1998).In both cases the investigators were able to achieve significant improvements over the previous best tagging results.Similar advances have been made in machine translation (Frederking and Nirenburg, 1994), speech recognition (Fiscus, 1997) and named entity recognition (Borthwick et al., 1998).The corpus-based statistical parsing community has many fast and accurate automated parsing systems, including systems produced by Collins (1997), Charniak (1997) and Ratnaparkhi (1997).These three parsers have given the best reported parsing results on the Penn Treebank Wall Street Journal corpus (Marcus et al., 1993).We used these three parsers to explore parser combination techniques.We are interested in combining the substructures of the input parses to produce a better parse.We call this approach parse hybridization.The substructures that are unanimously hypothesized by the parsers should be preserved after combination, and the combination technique should not foolishly create substructures for which there is no supporting evidence.These two principles guide experimentation in this framework, and together with the evaluation measures help us decide which specific type of substructure to combine.The precision and recall measures (described in more detail in Section 3) used in evaluating Treebank parsing treat each constituent as a separate entity, a minimal unit of correctness.Since our goal is to perform well under these measures we will similarly treat constituents as the minimal substructures for combination.One hybridization strategy is to let the parsers vote on constituents' membership in the hypothesized set.If enough parsers suggest that a particular constituent belongs in the parse, we include it.We call this technique constituent voting.We include a constituent in our hypothesized parse if it appears in the output of a majority of the parsers.In our particular case the majority requires the agreement of only two parsers because we have only three.This technique has the advantage of requiring no training, but it has the disadvantage of treating all parsers equally even though they may have differing accuracies or may specialize in modeling different phenomena.Another technique for parse hybridization is to use a naïve Bayes classifier to determine which constituents to include in the parse.The development of a naïve Bayes classifier involves learning how much each parser should be trusted for the decisions it makes.Our original hope in combining these parsers is that their errors are independently distributed.This is equivalent to the assumption used in probability estimation for naïve Bayes classifiers, namely that the attribute values are conditionally independent when the target value is given.For this reason, naïve Bayes classifiers are well-matched to this problem.In Equations 1 through 3 we develop the model for constructing our parse using naïve Bayes classification.C is the union of the sets of constituents suggested by the parsers. r(c) is a binary function returning t (for true) precisely when the constituent c E C should be included in the hypothesis.Mi(c) is a binary function returning t when parser i (from among the k parsers) suggests constituent c should be in the parse.The hypothesized parse is then the set of constituents that are likely (P > 0.5) to be in the parse according to this model.The estimation of the probabilities in the model is carried out as shown in Equation 4.Here NO counts the number of hypothesized constituents in the development set that match the binary predicate specified as an argument.Under certain conditions the constituent voting and naïve Bayes constituent combination techniques are guaranteed to produce sets of constituents with no crossing brackets.There are simply not enough votes remaining to allow any of the crossing structures to enter the hypothesized constituent set.Lemma: If the number of votes required by constituent voting is greater than half of the parsers under consideration the resulting structure has no crossing constituents.IL+-1Proof: Assume a pair of crossing constituents appears in the output of the constituent voting technique using k parsers.Call the crossing constituents A and B.A receives a votes, and B receives b votes.Each of the constituents must have received at least 1 votes from the k parsers, so a > I1 and 2 — 2k±-1 b > ri-5-111.Let s = a + b.None of the parsers produce parses with crossing brackets, so none of them votes for both of the assumed constituents.Hence, s < k. But by addition of the votes on the two parses, s > 2N-11> k, a contradiction.• Similarly, when the naïve Bayes classifier is configured such that the constituents require estimated probabilities strictly larger than 0.5 to be accepted, there is not enough probability mass remaining on crossing brackets for them to be included in the hypothesis.In general, the lemma of the previous section does not ensure that all the productions in the combined parse are found in the grammars of the member parsers.There is a guarantee of no crossing brackets but there is no guarantee that a constituent in the tree has the same children as it had in any of the three original parses.One can trivially create situations in which strictly binary-branching trees are combined to create a tree with only the root node and the terminal nodes, a completely flat structure.This drastic tree manipulation is not appropriate for situations in which we want to assign particular structures to sentences.For example, we may have semantic information (e.g. database query operations) associated with the productions in a grammar.If the parse contains productions from outside our grammar the machine has no direct method for handling them (e.g. the resulting database query may be syntactically malformed).We have developed a general approach for combining parsers when preserving the entire structure of a parse tree is important.The combining algorithm is presented with the candidate parses and asked to choose which one is best.The combining technique must act as a multi-position switch indicating which parser should be trusted for the particular sentence.We call this approach parser switching.Once again we present both a non-parametric and a parametric technique for this task.First we present the non-parametric version of parser switching, similarity switching: The intuition for this technique is that we can measure a similarity between parses by counting the constituents they have in common.We pick the parse that is most similar to the other parses by choosing the one with the highest sum of pairwise similarities.This is the parse that is closest to the centroid of the observed parses under the similarity metric.The probabilistic version of this procedure is straightforward: We once again assume independence among our various member parsers.Furthermore, we know one of the original parses will be the hypothesized parse, so the direct method of determining which one is best is to compute the probability of each of the candidate parses using the probabilistic model we developed in Section 2.1.We model each parse as the decisions made to create it, and model those decisions as independent events.Each decision determines the inclusion or exclusion of a candidate constituent.The set of candidate constituents comes from the union of all the constituents suggested by the member parsers.This is summarized in Equation 5.The computation of Pfr1(c)1Mi M k (C)) has been sketched before in Equations 1 through 4.In this case we are interested in finding' the maximum probability parse, ri, and Mi is the set of relevant (binary) parsing decisions made by parser i. ri is a parse selected from among the outputs of the individual parsers.It is chosen such that the decisions it made in including or excluding constituents are most probable under the models for all of the parsers.The three parsers were trained and tuned by their creators on various sections of the WSJ portion of the Penn Treebank, leaving only sections 22 and 23 completely untouched during the development of any of the parsers.We used section 23 as the development set for our combining techniques, and section 22 only for final testing.The development set contained 44088 constituents in 2416 sentences and the test set contained 30691 constituents in 1699 sentences.A sentence was withheld from section 22 because its extreme length was troublesome for a couple of the parsers.'The standard measures for evaluating Penn Treebank parsing performance are precision and recall of the predicted constituents.Each parse is converted into a set of constituents represented as a tuples: (label, start, end).The set is then compared with the set generated from the Penn Treebank parse to determine the precision and recall.Precision is the portion of hypothesized constituents that are correct and recall is the portion of the Treebank constituents that are hypothesized.For our experiments we also report the mean of precision and recall, which we denote by (P + R)I2 and F-measure.F-measure is the harmonic mean of precision and recall, 2PR/(P + R).It is closer to the smaller value of precision and recall when there is a large skew in their values.We performed three experiments to evaluate our techniques.The first shows how constituent features and context do not help in deciding which parser to trust.We then show that the combining techniques presented above give better parsing accuracy than any of the individual parsers.Finally we show the combining techniques degrade very little when a poor parser is added to the set.It is possible one could produce better models by introducing features describing constituents and their contexts because one parser could be much better than the majority of the others in particular situations.For example, one parser could be more accurate at predicting noun phrases than the other parsers.None of the models we have presented utilize features associated with a particular constituent (i.e. the label, span, parent label, etc.) to influence parser preference.This is not an oversight.Features and context were initially introduced into the models, but they refused to offer any gains in performance.While we cannot prove there are no such useful features on which one should condition trust, we can give some insight into why the features we explored offered no gain.Because we are working with only three parsers, the only situation in which context will help us is when it can indicate we should choose to believe a single parser that disagrees with the majority hypothesis instead of the majority hypothesis itself.This is the only important case, because otherwise the simple majority combining technique would pick the correct constituent.One side of the decision making process is when we choose to believe a constituent should be in the parse, even though only one parser suggests it.We call such a constituent an isolated constituent.If we were working with more than three parsers we could investigate minority constituents, those constituents that are suggested by at least one parser, but which the majority of the parsers do not suggest.Adding the isolated constituents to our hypothesis parse could increase our expected recall, but in the cases we investigated it would invariably hurt our precision more than we would gain on recall.Consider for a set of constituents the isolated constituent precision parser metric, the portion of isolated constituents that are correctly hypothesized.When this metric is less than 0.5, we expect to incur more errors' than we will remove by adding those constituents to the parse.We show the results of three of the experiments we conducted to measure isolated constituent precision under various partitioning schemes.In Table 1 we see with very few exceptions that the isolated constituent precision is less than 0.5 when we use the constituent label as a feature.The counts represent portions of the approximately 44000 constituents hypothesized by the parsers in the development set.In the cases where isolated constituent precision is larger than 0.5 the affected portion of the hypotheses is negligible.Similarly Figures 1 and 2 show how the isolated constituent precision varies by sentence length and the size of the span of the hypothesized constituent.In each figure the upper graph shows the isolated constituent precision and the bottom graph shows the corresponding number of hypothesized constituents.Again we notice that the isolated constituent precision is larger than 0.5 only in those partitions that contain very few samples.From this we see that a finer-grained model for parser combination, at least for the features we have examined, will not give us any additional power.The results in Table 2 were achieved on the development set.The first two rows of the table are baselines.The first row represents the average accuracy of the three parsers we combine.The second row is the accuracy of the best of the three parsers.'The next two rows are results of oracle experiments.The parser switching oracle is the upper bound on the accuracy that can be achieved on this set in the parser switching framework.It is the performance we could achieve if an omniscient observer told us which parser to pick for each of the sentences.The maximum precision row is the upper bound on accuracy if we could pick exactly the correct constituents from among the constituents suggested by the three parsers.Another way to interpret this is that less than 5% of the correct constituents are missing from the hypotheses generated by the union of the three parsers.The maximum precision oracle is an upper bound on the possible gain we can achieve by parse hybridization.We do not show the numbers for the Bayes models in Table 2 because the parameters involved were established using this set.The precision and recall of similarity switching and constituent voting are both significantly better than the best individual parser, and constituent voting is significantly better than parser switching in precision.4 Constituent voting gives the highest accuracy for parsing the Penn Treebank reported to date.Table 3 contains the results for evaluating our systems on the test set (section 22).All of these systems were run on data that was not seen during their development.The difference in precision between similarity and Bayes switching techniques is significant, but the difference in recall is not.This is the first set that gives us a fair evaluation of the Bayes models, and the Bayes switching model performs significantly better than its non-parametric counterpart.The constituent voting and naïve Bayes techniques are equivalent because the parameters learned in the training set did not sufficiently discriminate between the three parsers.Table 4 shows how much the Bayes switching technique uses each of the parsers on the test set.Parser 3, the most accurate parser, was chosen 71% of the time, and Parser 1, the least accurate parser was chosen 16% of the time.Ties are rare in Bayes switching because the models are fine-grained — many estimated probabilities are involved in each decision.In the interest of testing the robustness of these combining techniques, we added a fourth, simple nonlexicalized PCFG parser.The PCFG was trained from the same sections of the Penn Treebank as the other three parsers.It was then tested on section 22 of the Treebank in conjunction with the other parsers.The results of this experiment can be seen in Table 5.The entries in this table can be compared with those of Table 3 to see how the performance of the combining techniques degrades in the presence of an inferior parser.As seen by the drop in average individual parser performance baseline, the introduced parser does not perform very well.The average individual parser accuracy was reduced by more than 5% when we added this new parser, but the precision of the constituent voting technique was the only result that decreased significantly.The Bayes models were able to achieve significantly higher precision than their non-parametric counterparts.We see from these results that the behavior of the parametric techniques are robust in the presence of a poor parser.Surprisingly, the non-parametric switching technique also exhibited robust behaviour in this situation.We have presented two general approaches to studying parser combination: parser switching and parse hybridization.For each experiment we gave an nonparametric and a parametric technique for combining parsers.All four of the techniques studied result in parsing systems that perform better than any previously reported.Both of the switching techniques, as well as the parametric hybridization technique were also shown to be robust when a poor parser was introduced into the experiments.Through parser combination we have reduced the precision error rate by 30% and the recall error rate by 6% compared to the best previously published result.Combining multiple highly-accurate independent parsers yields promising results.We plan to explore more powerful techniques for exploiting the diversity of parsing methods.We would like to thank Eugene Charniak, Michael Collins, and Adwait Ratnaparkhi for enabling all of this research by providing us with their parsers and helpful comments.This work was funded by NSF grant IRI-9502312.Both authors are members of the Center for Language and Speech Processing at Johns Hopkins University.
